
6STEP-P-NUCLEO-IHM03_SensorlessVoltageMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008368  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008898  08008898  0000a374  2**0
                  CONTENTS
  4 .ARM          00000008  08008898  08008898  00009898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a0  080088a0  0000a374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000374  20000000  080088a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  20000374  08008c1c  0000a374  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001880  08008c1c  0000a880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a374  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003c9ab  00000000  00000000  0000a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000093  00000000  00000000  00046d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0003d7bc  00000000  00000000  00046de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000757d  00000000  00000000  0008459e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bc0  00000000  00000000  0008bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe20b  00000000  00000000  0008d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003085  00000000  00000000  0018b8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000189a1  00000000  00000000  0018e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00029ccd  00000000  00000000  001a7311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d0fde  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000049b4  00000000  00000000  001d1024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000374 	.word	0x20000374
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008528 	.word	0x08008528

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000378 	.word	0x20000378
 8000214:	08008528 	.word	0x08008528

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b96a 	b.w	8000b10 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	460c      	mov	r4, r1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d14e      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000860:	4694      	mov	ip, r2
 8000862:	458c      	cmp	ip, r1
 8000864:	4686      	mov	lr, r0
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	d962      	bls.n	8000932 <__udivmoddi4+0xde>
 800086c:	b14a      	cbz	r2, 8000882 <__udivmoddi4+0x2e>
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	4091      	lsls	r1, r2
 8000874:	fa20 f303 	lsr.w	r3, r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	4319      	orrs	r1, r3
 800087e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f f68c 	uxth.w	r6, ip
 800088a:	fbb1 f4f7 	udiv	r4, r1, r7
 800088e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000892:	fb07 1114 	mls	r1, r7, r4, r1
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb04 f106 	mul.w	r1, r4, r6
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008aa:	f080 8112 	bcs.w	8000ad2 <__udivmoddi4+0x27e>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 810f 	bls.w	8000ad2 <__udivmoddi4+0x27e>
 80008b4:	3c02      	subs	r4, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a59      	subs	r1, r3, r1
 80008ba:	fa1f f38e 	uxth.w	r3, lr
 80008be:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c2:	fb07 1110 	mls	r1, r7, r0, r1
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f606 	mul.w	r6, r0, r6
 80008ce:	429e      	cmp	r6, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x94>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008da:	f080 80fc 	bcs.w	8000ad6 <__udivmoddi4+0x282>
 80008de:	429e      	cmp	r6, r3
 80008e0:	f240 80f9 	bls.w	8000ad6 <__udivmoddi4+0x282>
 80008e4:	4463      	add	r3, ip
 80008e6:	3802      	subs	r0, #2
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008ee:	2100      	movs	r1, #0
 80008f0:	b11d      	cbz	r5, 80008fa <__udivmoddi4+0xa6>
 80008f2:	40d3      	lsrs	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	e9c5 3200 	strd	r3, r2, [r5]
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d905      	bls.n	800090e <__udivmoddi4+0xba>
 8000902:	b10d      	cbz	r5, 8000908 <__udivmoddi4+0xb4>
 8000904:	e9c5 0100 	strd	r0, r1, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	4608      	mov	r0, r1
 800090c:	e7f5      	b.n	80008fa <__udivmoddi4+0xa6>
 800090e:	fab3 f183 	clz	r1, r3
 8000912:	2900      	cmp	r1, #0
 8000914:	d146      	bne.n	80009a4 <__udivmoddi4+0x150>
 8000916:	42a3      	cmp	r3, r4
 8000918:	d302      	bcc.n	8000920 <__udivmoddi4+0xcc>
 800091a:	4290      	cmp	r0, r2
 800091c:	f0c0 80f0 	bcc.w	8000b00 <__udivmoddi4+0x2ac>
 8000920:	1a86      	subs	r6, r0, r2
 8000922:	eb64 0303 	sbc.w	r3, r4, r3
 8000926:	2001      	movs	r0, #1
 8000928:	2d00      	cmp	r5, #0
 800092a:	d0e6      	beq.n	80008fa <__udivmoddi4+0xa6>
 800092c:	e9c5 6300 	strd	r6, r3, [r5]
 8000930:	e7e3      	b.n	80008fa <__udivmoddi4+0xa6>
 8000932:	2a00      	cmp	r2, #0
 8000934:	f040 8090 	bne.w	8000a58 <__udivmoddi4+0x204>
 8000938:	eba1 040c 	sub.w	r4, r1, ip
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	fa1f f78c 	uxth.w	r7, ip
 8000944:	2101      	movs	r1, #1
 8000946:	fbb4 f6f8 	udiv	r6, r4, r8
 800094a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094e:	fb08 4416 	mls	r4, r8, r6, r4
 8000952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000956:	fb07 f006 	mul.w	r0, r7, r6
 800095a:	4298      	cmp	r0, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x11c>
 800095e:	eb1c 0303 	adds.w	r3, ip, r3
 8000962:	f106 34ff 	add.w	r4, r6, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x11a>
 8000968:	4298      	cmp	r0, r3
 800096a:	f200 80cd 	bhi.w	8000b08 <__udivmoddi4+0x2b4>
 800096e:	4626      	mov	r6, r4
 8000970:	1a1c      	subs	r4, r3, r0
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb4 f0f8 	udiv	r0, r4, r8
 800097a:	fb08 4410 	mls	r4, r8, r0, r4
 800097e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000982:	fb00 f707 	mul.w	r7, r0, r7
 8000986:	429f      	cmp	r7, r3
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x148>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000992:	d202      	bcs.n	800099a <__udivmoddi4+0x146>
 8000994:	429f      	cmp	r7, r3
 8000996:	f200 80b0 	bhi.w	8000afa <__udivmoddi4+0x2a6>
 800099a:	4620      	mov	r0, r4
 800099c:	1bdb      	subs	r3, r3, r7
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0x9c>
 80009a4:	f1c1 0620 	rsb	r6, r1, #32
 80009a8:	408b      	lsls	r3, r1
 80009aa:	fa22 f706 	lsr.w	r7, r2, r6
 80009ae:	431f      	orrs	r7, r3
 80009b0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009b4:	fa04 f301 	lsl.w	r3, r4, r1
 80009b8:	ea43 030c 	orr.w	r3, r3, ip
 80009bc:	40f4      	lsrs	r4, r6
 80009be:	fa00 f801 	lsl.w	r8, r0, r1
 80009c2:	0c38      	lsrs	r0, r7, #16
 80009c4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009c8:	fbb4 fef0 	udiv	lr, r4, r0
 80009cc:	fa1f fc87 	uxth.w	ip, r7
 80009d0:	fb00 441e 	mls	r4, r0, lr, r4
 80009d4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d8:	fb0e f90c 	mul.w	r9, lr, ip
 80009dc:	45a1      	cmp	r9, r4
 80009de:	fa02 f201 	lsl.w	r2, r2, r1
 80009e2:	d90a      	bls.n	80009fa <__udivmoddi4+0x1a6>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009ea:	f080 8084 	bcs.w	8000af6 <__udivmoddi4+0x2a2>
 80009ee:	45a1      	cmp	r9, r4
 80009f0:	f240 8081 	bls.w	8000af6 <__udivmoddi4+0x2a2>
 80009f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	eba4 0409 	sub.w	r4, r4, r9
 80009fe:	fa1f f983 	uxth.w	r9, r3
 8000a02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a06:	fb00 4413 	mls	r4, r0, r3, r4
 8000a0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a12:	45a4      	cmp	ip, r4
 8000a14:	d907      	bls.n	8000a26 <__udivmoddi4+0x1d2>
 8000a16:	193c      	adds	r4, r7, r4
 8000a18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a1c:	d267      	bcs.n	8000aee <__udivmoddi4+0x29a>
 8000a1e:	45a4      	cmp	ip, r4
 8000a20:	d965      	bls.n	8000aee <__udivmoddi4+0x29a>
 8000a22:	3b02      	subs	r3, #2
 8000a24:	443c      	add	r4, r7
 8000a26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a2e:	eba4 040c 	sub.w	r4, r4, ip
 8000a32:	429c      	cmp	r4, r3
 8000a34:	46ce      	mov	lr, r9
 8000a36:	469c      	mov	ip, r3
 8000a38:	d351      	bcc.n	8000ade <__udivmoddi4+0x28a>
 8000a3a:	d04e      	beq.n	8000ada <__udivmoddi4+0x286>
 8000a3c:	b155      	cbz	r5, 8000a54 <__udivmoddi4+0x200>
 8000a3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a42:	eb64 040c 	sbc.w	r4, r4, ip
 8000a46:	fa04 f606 	lsl.w	r6, r4, r6
 8000a4a:	40cb      	lsrs	r3, r1
 8000a4c:	431e      	orrs	r6, r3
 8000a4e:	40cc      	lsrs	r4, r1
 8000a50:	e9c5 6400 	strd	r6, r4, [r5]
 8000a54:	2100      	movs	r1, #0
 8000a56:	e750      	b.n	80008fa <__udivmoddi4+0xa6>
 8000a58:	f1c2 0320 	rsb	r3, r2, #32
 8000a5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	fa24 f303 	lsr.w	r3, r4, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	430c      	orrs	r4, r1
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a74:	fa1f f78c 	uxth.w	r7, ip
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a80:	0c23      	lsrs	r3, r4, #16
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb00 f107 	mul.w	r1, r0, r7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x24c>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a96:	d22c      	bcs.n	8000af2 <__udivmoddi4+0x29e>
 8000a98:	4299      	cmp	r1, r3
 8000a9a:	d92a      	bls.n	8000af2 <__udivmoddi4+0x29e>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb01 f307 	mul.w	r3, r1, r7
 8000ab4:	42a3      	cmp	r3, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x276>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ac0:	d213      	bcs.n	8000aea <__udivmoddi4+0x296>
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	d911      	bls.n	8000aea <__udivmoddi4+0x296>
 8000ac6:	3902      	subs	r1, #2
 8000ac8:	4464      	add	r4, ip
 8000aca:	1ae4      	subs	r4, r4, r3
 8000acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ad0:	e739      	b.n	8000946 <__udivmoddi4+0xf2>
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	e6f0      	b.n	80008b8 <__udivmoddi4+0x64>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e706      	b.n	80008e8 <__udivmoddi4+0x94>
 8000ada:	45c8      	cmp	r8, r9
 8000adc:	d2ae      	bcs.n	8000a3c <__udivmoddi4+0x1e8>
 8000ade:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	e7a8      	b.n	8000a3c <__udivmoddi4+0x1e8>
 8000aea:	4631      	mov	r1, r6
 8000aec:	e7ed      	b.n	8000aca <__udivmoddi4+0x276>
 8000aee:	4603      	mov	r3, r0
 8000af0:	e799      	b.n	8000a26 <__udivmoddi4+0x1d2>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e7d4      	b.n	8000aa0 <__udivmoddi4+0x24c>
 8000af6:	46d6      	mov	lr, sl
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1a6>
 8000afa:	4463      	add	r3, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	e74d      	b.n	800099c <__udivmoddi4+0x148>
 8000b00:	4606      	mov	r6, r0
 8000b02:	4623      	mov	r3, r4
 8000b04:	4608      	mov	r0, r1
 8000b06:	e70f      	b.n	8000928 <__udivmoddi4+0xd4>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	e730      	b.n	8000970 <__udivmoddi4+0x11c>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_idiv0>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	@ (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	@ (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3e:	f003 f87d 	bl	8003c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f007 fcbf 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b46:	f000 fba9 	bl	800129c <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8000b58:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 8000b5c:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 8000b60:	20001880 	.word	0x20001880

08000b64 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <BusFault_Handler>
	...

08000b68 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000b6c:	6940      	ldr	r0, [r0, #20]
 8000b6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000b70:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b72:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b74:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b76:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000b7a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b7e:	6960      	ldr	r0, [r4, #20]
 8000b80:	f104 011c 	add.w	r1, r4, #28
 8000b84:	462b      	mov	r3, r5
 8000b86:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b8c:	4718      	bx	r3
 8000b8e:	bf00      	nop

08000b90 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000b90:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000b92:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000b94:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000b96:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b9a:	4c1e      	ldr	r4, [pc, #120]	@ (8000c14 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000b9c:	01db      	lsls	r3, r3, #7
 8000b9e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000ba2:	784a      	ldrb	r2, [r1, #1]
 8000ba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000ba8:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000baa:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000bae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000bb8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bbc:	5ca2      	ldrb	r2, [r4, r2]
 8000bbe:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000bc2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bc4:	5ca2      	ldrb	r2, [r4, r2]
 8000bc6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000bca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000bcc:	5ca2      	ldrb	r2, [r4, r2]
 8000bce:	4c12      	ldr	r4, [pc, #72]	@ (8000c18 <ASPEP_sendBeacon+0x88>)
 8000bd0:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000bd4:	5ca2      	ldrb	r2, [r4, r2]
 8000bd6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000bda:	f043 0305 	orr.w	r3, r3, #5
 8000bde:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000be2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000be4:	b14b      	cbz	r3, 8000bfa <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000be6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000be8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000bec:	b913      	cbnz	r3, 8000bf4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000bfa:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c04:	6481      	str	r1, [r0, #72]	@ 0x48
 8000c06:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c08:	2204      	movs	r2, #4
 8000c0a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c10:	6940      	ldr	r0, [r0, #20]
 8000c12:	4718      	bx	r3
 8000c14:	08008550 	.word	0x08008550
 8000c18:	08008540 	.word	0x08008540

08000c1c <ASPEP_sendPing>:
{
 8000c1c:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000c1e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000c20:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000c24:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c28:	4d1d      	ldr	r5, [pc, #116]	@ (8000ca0 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000c2a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c2e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000c32:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c36:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000c3a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000c3e:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c42:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4c16      	ldr	r4, [pc, #88]	@ (8000ca4 <ASPEP_sendPing+0x88>)
 8000c4a:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c4e:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c52:	5ca2      	ldrb	r2, [r4, r2]
 8000c54:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000c58:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c5a:	5ca2      	ldrb	r2, [r4, r2]
 8000c5c:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000c60:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c62:	5ca2      	ldrb	r2, [r4, r2]
 8000c64:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c68:	5ceb      	ldrb	r3, [r5, r3]
 8000c6a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000c6e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c72:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000c74:	b143      	cbz	r3, 8000c88 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c76:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000c78:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000c7c:	b913      	cbnz	r3, 8000c84 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000c84:	bc30      	pop	{r4, r5}
 8000c86:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c88:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c92:	6481      	str	r1, [r0, #72]	@ 0x48
 8000c94:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c96:	2204      	movs	r2, #4
 8000c98:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000c9a:	6940      	ldr	r0, [r0, #20]
}
 8000c9c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c9e:	4718      	bx	r3
 8000ca0:	08008540 	.word	0x08008540
 8000ca4:	08008550 	.word	0x08008550

08000ca8 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000ca8:	2a0a      	cmp	r2, #10
 8000caa:	d009      	beq.n	8000cc0 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000cac:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d91d      	bls.n	8000cf0 <ASPEP_getBuffer+0x48>
 8000cb4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d90d      	bls.n	8000cd8 <ASPEP_getBuffer+0x30>
        result = false;
 8000cbc:	2000      	movs	r0, #0
}
 8000cbe:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000cc0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d8f9      	bhi.n	8000cbc <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000cc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000cca:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000ccc:	3304      	adds	r3, #4
 8000cce:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000cd0:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000cda:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cde:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000ce2:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000ce4:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000ce8:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cea:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000cec:	2001      	movs	r0, #1
 8000cee:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000cf0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000cf2:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000cf6:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000cfa:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000cfc:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d00:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e7f2      	b.n	8000cec <ASPEP_getBuffer+0x44>
 8000d06:	bf00      	nop

08000d08 <ASPEP_sendPacket>:
{
 8000d08:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000d0a:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000d0e:	2802      	cmp	r0, #2
 8000d10:	d001      	beq.n	8000d16 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000d12:	2002      	movs	r0, #2
 8000d14:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000d16:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000d1a:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000d1e:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000d22:	2801      	cmp	r0, #1
 8000d24:	d104      	bne.n	8000d30 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000d26:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000d2a:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000d2c:	3202      	adds	r2, #2
 8000d2e:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000d30:	2b0a      	cmp	r3, #10
 8000d32:	d105      	bne.n	8000d40 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000d34:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000d38:	b348      	cbz	r0, 8000d8e <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000d40:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000d44:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d46:	4d34      	ldr	r5, [pc, #208]	@ (8000e18 <ASPEP_sendPacket+0x110>)
 8000d48:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d4a:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d4c:	5d2e      	ldrb	r6, [r5, r4]
 8000d4e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000d52:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000d54:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d58:	5d2e      	ldrb	r6, [r5, r4]
 8000d5a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000d5e:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d60:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d62:	5d2c      	ldrb	r4, [r5, r4]
 8000d64:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000d68:	406c      	eors	r4, r5
 8000d6a:	4d2c      	ldr	r5, [pc, #176]	@ (8000e1c <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000d6c:	5d2c      	ldrb	r4, [r5, r4]
 8000d6e:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000d72:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d76:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d78:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000d7c:	b1b9      	cbz	r1, 8000dae <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d7e:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d006      	beq.n	8000d92 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	d02a      	beq.n	8000dde <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000d88:	b37b      	cbz	r3, 8000dea <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000d8a:	2000      	movs	r0, #0
}
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000d8e:	2001      	movs	r0, #1
}
 8000d90:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000d92:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000d96:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000d98:	458e      	cmp	lr, r1
 8000d9a:	bf14      	ite	ne
 8000d9c:	2003      	movne	r0, #3
 8000d9e:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000da0:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000da4:	b3a1      	cbz	r1, 8000e10 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000da6:	2102      	movs	r1, #2
 8000da8:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000daa:	809a      	strh	r2, [r3, #4]
}
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	d029      	beq.n	8000e06 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000db2:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000db4:	f04f 0303 	mov.w	r3, #3
 8000db8:	bf0b      	itete	eq
 8000dba:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000dbe:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000dc2:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000dc6:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000dca:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000dce:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000dd0:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000dd4:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000dd8:	4671      	mov	r1, lr
 8000dda:	4798      	blx	r3
 8000ddc:	e7d5      	b.n	8000d8a <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000dde:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d009      	beq.n	8000dfa <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000de6:	2003      	movs	r0, #3
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000dea:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000df8:	e7c7      	b.n	8000d8a <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000e00:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000e04:	e7c1      	b.n	8000d8a <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e06:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e0e:	e7dc      	b.n	8000dca <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e10:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000e14:	e7c7      	b.n	8000da6 <ASPEP_sendPacket+0x9e>
 8000e16:	bf00      	nop
 8000e18:	08008550 	.word	0x08008550
 8000e1c:	08008540 	.word	0x08008540

08000e20 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000e20:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000e22:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000e26:	2b03      	cmp	r3, #3
{
 8000e28:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000e2a:	d013      	beq.n	8000e54 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000e2c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000e2e:	2100      	movs	r1, #0
 8000e30:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000e32:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000e36:	2a02      	cmp	r2, #2
 8000e38:	d013      	beq.n	8000e62 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d11d      	bne.n	8000e7a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e3e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e42:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e44:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e46:	2204      	movs	r2, #4
 8000e48:	6940      	ldr	r0, [r0, #20]
 8000e4a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e52:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000e54:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000e58:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000e5a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000e5c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000e60:	d10b      	bne.n	8000e7a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e62:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e68:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e6a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000e6c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e6e:	6960      	ldr	r0, [r4, #20]
 8000e70:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000e72:	2303      	movs	r3, #3
 8000e74:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000e78:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000e7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000e7e:	b1cb      	cbz	r3, 8000eb4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000e80:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000e82:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000e84:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000e86:	6819      	ldr	r1, [r3, #0]
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	6960      	ldr	r0, [r4, #20]
 8000e8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000e8e:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000e90:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d007      	beq.n	8000ea8 <ASPEP_HWDataTransmittedIT+0x88>
 8000e98:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000ea4:	b662      	cpsie	i
}
 8000ea6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000ea8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000eaa:	0063      	lsls	r3, r4, #1
 8000eac:	3368      	adds	r3, #104	@ 0x68
 8000eae:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000eb0:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000eb2:	e7f7      	b.n	8000ea4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000eb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000eb6:	e7f5      	b.n	8000ea4 <ASPEP_HWDataTransmittedIT+0x84>

08000eb8 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000eb8:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000ebc:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000ebe:	f04f 0c00 	mov.w	ip, #0
{
 8000ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec6:	4604      	mov	r4, r0
    *packetLength = 0;
 8000ec8:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8000ecc:	b1cb      	cbz	r3, 8000f02 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000ece:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000ed2:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d055      	beq.n	8000f86 <ASPEP_RXframeProcess+0xce>
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d018      	beq.n	8000f10 <ASPEP_RXframeProcess+0x58>
 8000ede:	b933      	cbnz	r3, 8000eee <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000ee0:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000ee2:	2905      	cmp	r1, #5
 8000ee4:	f000 80e3 	beq.w	80010ae <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000ee8:	2906      	cmp	r1, #6
 8000eea:	f000 8129 	beq.w	8001140 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000eee:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000ef0:	6960      	ldr	r0, [r4, #20]
 8000ef2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	f104 011c 	add.w	r1, r4, #28
 8000efa:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000efc:	4628      	mov	r0, r5
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000f02:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000f06:	b9bb      	cbnz	r3, 8000f38 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000f08:	2500      	movs	r5, #0
}
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000f10:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d045      	beq.n	8000fa2 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	f000 8118 	beq.w	800114c <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d1e6      	bne.n	8000eee <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f20:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000f24:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000f28:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f2a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f2c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f2e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f32:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000f34:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000f36:	e7db      	b.n	8000ef0 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f38:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000f3c:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000f42:	488b      	ldr	r0, [pc, #556]	@ (8001170 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f44:	4d8b      	ldr	r5, [pc, #556]	@ (8001174 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f46:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f4a:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f4e:	5c82      	ldrb	r2, [r0, r2]
 8000f50:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000f54:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f56:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000f58:	5ceb      	ldrb	r3, [r5, r3]
 8000f5a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000f5e:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000f62:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80f6 	beq.w	8001156 <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f6a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000f6c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000f70:	b913      	cbnz	r3, 8000f78 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000f78:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f7a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000f7c:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000f7e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f82:	4798      	blx	r3
 8000f84:	e7c0      	b.n	8000f08 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8000f86:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000f88:	2905      	cmp	r1, #5
 8000f8a:	d04f      	beq.n	800102c <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000f8c:	2906      	cmp	r1, #6
 8000f8e:	d1ae      	bne.n	8000eee <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000f90:	4619      	mov	r1, r3
 8000f92:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000f96:	f7ff fe41 	bl	8000c1c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000fa0:	e7a5      	b.n	8000eee <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000fa2:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fa6:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000faa:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fac:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fb0:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fb4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000fb8:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000fbc:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fbe:	4575      	cmp	r5, lr
 8000fc0:	bf28      	it	cs
 8000fc2:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fc4:	42b0      	cmp	r0, r6
 8000fc6:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000fc8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fcc:	bf28      	it	cs
 8000fce:	4631      	movcs	r1, r6
 8000fd0:	4663      	mov	r3, ip
 8000fd2:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000fd6:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fda:	45b8      	cmp	r8, r7
 8000fdc:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fde:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fe2:	bf28      	it	cs
 8000fe4:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fe6:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fe8:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fec:	4651      	mov	r1, sl
 8000fee:	bf28      	it	cs
 8000ff0:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ff2:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ff6:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ff8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ffa:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000ffe:	d80f      	bhi.n	8001020 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001000:	45ae      	cmp	lr, r5
 8001002:	d80d      	bhi.n	8001020 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001004:	45b8      	cmp	r8, r7
 8001006:	d80b      	bhi.n	8001020 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001008:	45ca      	cmp	sl, r9
 800100a:	d809      	bhi.n	8001020 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800100c:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8001010:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001014:	ebac 0c02 	sub.w	ip, ip, r2
 8001018:	fabc fc8c 	clz	ip, ip
 800101c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001020:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fdb3 	bl	8000b90 <ASPEP_sendBeacon>
 800102a:	e760      	b.n	8000eee <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800102c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800102e:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001032:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001034:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001038:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800103c:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001040:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001044:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001046:	42a8      	cmp	r0, r5
 8001048:	bf28      	it	cs
 800104a:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800104c:	42b1      	cmp	r1, r6
 800104e:	4663      	mov	r3, ip
 8001050:	468c      	mov	ip, r1
 8001052:	bf28      	it	cs
 8001054:	46b4      	movcs	ip, r6
 8001056:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800105a:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800105e:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001062:	45bc      	cmp	ip, r7
 8001064:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001066:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800106a:	bf28      	it	cs
 800106c:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800106e:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001070:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001074:	46c1      	mov	r9, r8
 8001076:	bf28      	it	cs
 8001078:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800107a:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800107e:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001080:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001082:	d80b      	bhi.n	800109c <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001084:	4285      	cmp	r5, r0
 8001086:	d809      	bhi.n	800109c <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001088:	45bc      	cmp	ip, r7
 800108a:	d807      	bhi.n	800109c <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800108c:	45f0      	cmp	r8, lr
 800108e:	d805      	bhi.n	800109c <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001090:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001094:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001098:	4293      	cmp	r3, r2
 800109a:	d002      	beq.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 800109c:	2300      	movs	r3, #0
 800109e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80010a2:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff fd72 	bl	8000b90 <ASPEP_sendBeacon>
 80010ac:	e71f      	b.n	8000eee <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010ae:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010b2:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010b6:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010b8:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010bc:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010c0:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010c4:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010c8:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010ca:	4561      	cmp	r1, ip
 80010cc:	bf28      	it	cs
 80010ce:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010d0:	42b5      	cmp	r5, r6
 80010d2:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80010d4:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010d8:	bf28      	it	cs
 80010da:	4630      	movcs	r0, r6
 80010dc:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80010e0:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010e4:	45b8      	cmp	r8, r7
 80010e6:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010e8:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010ec:	bf28      	it	cs
 80010ee:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010f0:	45ca      	cmp	sl, r9
 80010f2:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010f4:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010f8:	bf28      	it	cs
 80010fa:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010fc:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001100:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001102:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001104:	d8cd      	bhi.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001106:	458c      	cmp	ip, r1
 8001108:	d8cb      	bhi.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800110a:	45b8      	cmp	r8, r7
 800110c:	d8c9      	bhi.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800110e:	45ca      	cmp	sl, r9
 8001110:	d8c7      	bhi.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001112:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001116:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800111a:	4293      	cmp	r3, r2
 800111c:	d1c1      	bne.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800111e:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001120:	1c42      	adds	r2, r0, #1
 8001122:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001124:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001126:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001128:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800112c:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800112e:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001130:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001132:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001136:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800113a:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 800113e:	e7b0      	b.n	80010a2 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001140:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd69 	bl	8000c1c <ASPEP_sendPing>
 800114a:	e6d0      	b.n	8000eee <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800114c:	7f42      	ldrb	r2, [r0, #29]
 800114e:	2101      	movs	r1, #1
 8001150:	f7ff fd64 	bl	8000c1c <ASPEP_sendPing>
 8001154:	e6cb      	b.n	8000eee <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001156:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 800115a:	2303      	movs	r3, #3
 800115c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001160:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001162:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001164:	2204      	movs	r2, #4
 8001166:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001168:	6960      	ldr	r0, [r4, #20]
 800116a:	4798      	blx	r3
 800116c:	e704      	b.n	8000f78 <ASPEP_RXframeProcess+0xc0>
 800116e:	bf00      	nop
 8001170:	08008550 	.word	0x08008550
 8001174:	08008540 	.word	0x08008540

08001178 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001178:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 800117a:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 800117e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001180:	b13b      	cbz	r3, 8001192 <ASPEP_HWDataReceivedIT+0x1a>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d104      	bne.n	8001190 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001186:	2200      	movs	r2, #0
 8001188:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 800118c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001190:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001192:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001194:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <ASPEP_HWDataReceivedIT+0x98>)
 8001196:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800119e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80011a6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	b95b      	cbnz	r3, 80011ca <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80011b2:	7f03      	ldrb	r3, [r0, #28]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 80011bc:	d809      	bhi.n	80011d2 <ASPEP_HWDataReceivedIT+0x5a>
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d81e      	bhi.n	8001200 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 80011c8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80011ca:	2304      	movs	r3, #4
 80011cc:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d1f5      	bne.n	80011c2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80011d6:	8b83      	ldrh	r3, [r0, #28]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 80011de:	b17b      	cbz	r3, 8001200 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80011e0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d30f      	bcc.n	8001208 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80011e8:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 80011ec:	6981      	ldr	r1, [r0, #24]
 80011ee:	6940      	ldr	r0, [r0, #20]
 80011f0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80011f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011f6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 80011fe:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8001206:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001208:	2302      	movs	r3, #2
 800120a:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800120e:	bd10      	pop	{r4, pc}
 8001210:	08008550 	.word	0x08008550

08001214 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8001214:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001216:	2200      	movs	r2, #0
 8001218:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800121c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800121e:	6940      	ldr	r0, [r0, #20]
 8001220:	2204      	movs	r2, #4
 8001222:	311c      	adds	r1, #28
 8001224:	4718      	bx	r3
 8001226:	bf00      	nop

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b510      	push	{r4, lr}
 800122a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122c:	2238      	movs	r2, #56	@ 0x38
 800122e:	2100      	movs	r1, #0
 8001230:	a806      	add	r0, sp, #24
 8001232:	f007 f93f 	bl	80084b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001236:	2000      	movs	r0, #0
 8001238:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800123c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001240:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001242:	f003 fe01 	bl	8004e48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001246:	2001      	movs	r0, #1
 8001248:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800124c:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001254:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001256:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001258:	2155      	movs	r1, #85	@ 0x55
 800125a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001262:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001266:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f003 fe67 	bl	8004f3c <HAL_RCC_OscConfig>
 800126e:	b108      	cbz	r0, 8001274 <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001272:	e7fe      	b.n	8001272 <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001274:	2104      	movs	r1, #4
 8001276:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001288:	f004 f8d2 	bl	8005430 <HAL_RCC_ClockConfig>
 800128c:	b108      	cbz	r0, 8001292 <SystemClock_Config+0x6a>
 800128e:	b672      	cpsid	i
  while (1)
 8001290:	e7fe      	b.n	8001290 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 8001292:	f004 f9fb 	bl	800568c <HAL_RCC_EnableCSS>
}
 8001296:	b014      	add	sp, #80	@ 0x50
 8001298:	bd10      	pop	{r4, pc}
 800129a:	bf00      	nop

0800129c <main>:
{
 800129c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	2400      	movs	r4, #0
{
 80012a2:	b0a9      	sub	sp, #164	@ 0xa4
  HAL_Init();
 80012a4:	f002 fcfa 	bl	8003c9c <HAL_Init>
  SystemClock_Config();
 80012a8:	f7ff ffbe 	bl	8001228 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 80012b0:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	4dab      	ldr	r5, [pc, #684]	@ (8001564 <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	941d      	str	r4, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80012ba:	48ab      	ldr	r0, [pc, #684]	@ (8001568 <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80012c2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012cc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80012d4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	9304      	str	r3, [sp, #16]
 80012dc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80012e6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	9305      	str	r3, [sp, #20]
 80012ee:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80012f8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80012fe:	4622      	mov	r2, r4
 8001300:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	9306      	str	r3, [sp, #24]
 8001306:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001308:	f003 fd98 	bl	8004e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 800130c:	4622      	mov	r2, r4
 800130e:	4897      	ldr	r0, [pc, #604]	@ (800156c <main+0x2d0>)
 8001310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001314:	f003 fd92 	bl	8004e3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800131c:	4893      	ldr	r0, [pc, #588]	@ (800156c <main+0x2d0>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800131e:	9319      	str	r3, [sp, #100]	@ 0x64
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001320:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001322:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001328:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132c:	931a      	str	r3, [sp, #104]	@ 0x68
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800132e:	f003 fc7d 	bl	8004c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001332:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	488c      	ldr	r0, [pc, #560]	@ (8001568 <main+0x2cc>)
 8001338:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	e9cd 3619 	strd	r3, r6, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	e9cd 771b 	strd	r7, r7, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f003 fc73 	bl	8004c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_BEMF_DIVIDER_Pin;
 8001346:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 800134a:	4888      	ldr	r0, [pc, #544]	@ (800156c <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800134c:	971b      	str	r7, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 800134e:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	941c      	str	r4, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pin = M1_BEMF_DIVIDER_Pin;
 8001352:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 8001356:	f003 fc69 	bl	8004c2c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800135a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001362:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800136e:	4333      	orrs	r3, r6
 8001370:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001372:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Instance = ADC1;
 8001374:	4d7e      	ldr	r5, [pc, #504]	@ (8001570 <main+0x2d4>)
  ADC_MultiModeTypeDef multimode = {0};
 8001376:	940d      	str	r4, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001378:	4033      	ands	r3, r6
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800137a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137c:	9302      	str	r3, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800137e:	223c      	movs	r2, #60	@ 0x3c
 8001380:	a819      	add	r0, sp, #100	@ 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	9b02      	ldr	r3, [sp, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8001384:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001388:	f007 f894 	bl	80084b4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800138c:	4621      	mov	r1, r4
 800138e:	2220      	movs	r2, #32
 8001390:	a811      	add	r0, sp, #68	@ 0x44
 8001392:	f007 f88f 	bl	80084b4 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001396:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800139a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a2:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013a6:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	f885 4024 	strb.w	r4, [r5, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ac:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b0:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013b2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
  hadc1.Instance = ADC1;
 80013b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ba:	2404      	movs	r4, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 1;
 80013be:	622e      	str	r6, [r5, #32]
  hadc1.Instance = ADC1;
 80013c0:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013c2:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c4:	61ac      	str	r4, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c6:	f002 fc93 	bl	8003cf0 <HAL_ADC_Init>
 80013ca:	b108      	cbz	r0, 80013d0 <main+0x134>
 80013cc:	b672      	cpsid	i
  while (1)
 80013ce:	e7fe      	b.n	80013ce <main+0x132>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013d0:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d2:	a90d      	add	r1, sp, #52	@ 0x34
 80013d4:	4628      	mov	r0, r5
 80013d6:	f003 fab5 	bl	8004944 <HAL_ADCEx_MultiModeConfigChannel>
 80013da:	b108      	cbz	r0, 80013e0 <main+0x144>
 80013dc:	b672      	cpsid	i
  while (1)
 80013de:	e7fe      	b.n	80013de <main+0x142>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013e0:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 800158c <main+0x2f0>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013e4:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013e8:	2309      	movs	r3, #9
  sConfigInjected.InjectedOffset = 0;
 80013ea:	e9cd 401d 	strd	r4, r0, [sp, #116]	@ 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013ee:	e9cd c319 	strd	ip, r3, [sp, #100]	@ 0x64
  sConfigInjected.QueueInjectedContext = DISABLE;
 80013f2:	f88d 008a 	strb.w	r0, [sp, #138]	@ 0x8a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80013f6:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80013fa:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 80013fe:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8001402:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001406:	a919      	add	r1, sp, #100	@ 0x64
 8001408:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 800140a:	e9cd 8323 	strd	r8, r3, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800140e:	941b      	str	r4, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001410:	9621      	str	r6, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001412:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001416:	f002 ffbb 	bl	8004390 <HAL_ADCEx_InjectedConfigChannel>
 800141a:	b108      	cbz	r0, 8001420 <main+0x184>
 800141c:	b672      	cpsid	i
  while (1)
 800141e:	e7fe      	b.n	800141e <main+0x182>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001420:	4b54      	ldr	r3, [pc, #336]	@ (8001574 <main+0x2d8>)
  sConfig.Offset = 0;
 8001422:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	f04f 0a06 	mov.w	sl, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	4628      	mov	r0, r5
 800142a:	a911      	add	r1, sp, #68	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142c:	e9cd 4913 	strd	r4, r9, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001430:	e9cd 3a11 	strd	r3, sl, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001434:	9415      	str	r4, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	f002 fd5b 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800143a:	4683      	mov	fp, r0
 800143c:	b108      	cbz	r0, 8001442 <main+0x1a6>
 800143e:	b672      	cpsid	i
  while (1)
 8001440:	e7fe      	b.n	8001440 <main+0x1a4>
  hadc2.Instance = ADC2;
 8001442:	4d4d      	ldr	r5, [pc, #308]	@ (8001578 <main+0x2dc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001444:	4601      	mov	r1, r0
 8001446:	2220      	movs	r2, #32
 8001448:	a819      	add	r0, sp, #100	@ 0x64
 800144a:	f007 f833 	bl	80084b4 <memset>
  hadc2.Instance = ADC2;
 800144e:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <main+0x2e0>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001450:	60ef      	str	r7, [r5, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001452:	4628      	mov	r0, r5
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001454:	e9c5 bb01 	strd	fp, fp, [r5, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001458:	e9c5 bb04 	strd	fp, fp, [r5, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145c:	e9c5 bb0b 	strd	fp, fp, [r5, #44]	@ 0x2c
  hadc2.Init.NbrOfConversion = 1;
 8001460:	622e      	str	r6, [r5, #32]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001462:	61ac      	str	r4, [r5, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001464:	f8a5 b01c 	strh.w	fp, [r5, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001468:	f885 b024 	strb.w	fp, [r5, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800146c:	f885 b038 	strb.w	fp, [r5, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001470:	f8c5 b03c 	str.w	fp, [r5, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001474:	f885 b040 	strb.w	fp, [r5, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001478:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800147a:	f002 fc39 	bl	8003cf0 <HAL_ADC_Init>
 800147e:	b108      	cbz	r0, 8001484 <main+0x1e8>
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <main+0x1e6>
  sConfig.Channel = ADC_CHANNEL_5;
 8001484:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <main+0x2e4>)
  sConfig.Offset = 0;
 8001486:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001488:	a919      	add	r1, sp, #100	@ 0x64
 800148a:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800148c:	941b      	str	r4, [sp, #108]	@ 0x6c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148e:	941d      	str	r4, [sp, #116]	@ 0x74
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001494:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
  sConfig.Channel = ADC_CHANNEL_5;
 8001498:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800149a:	f002 fd29 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800149e:	4604      	mov	r4, r0
 80014a0:	b108      	cbz	r0, 80014a6 <main+0x20a>
 80014a2:	b672      	cpsid	i
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <main+0x208>
  htim1.Instance = TIM1;
 80014a6:	4d37      	ldr	r5, [pc, #220]	@ (8001584 <main+0x2e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	9007      	str	r0, [sp, #28]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80014ae:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 80014b6:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
 80014ba:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80014c2:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80014c6:	900a      	str	r0, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c8:	9017      	str	r0, [sp, #92]	@ 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ca:	4601      	mov	r1, r0
 80014cc:	2234      	movs	r2, #52	@ 0x34
 80014ce:	a819      	add	r0, sp, #100	@ 0x64
 80014d0:	f006 fff0 	bl	80084b4 <memset>
  htim1.Instance = TIM1;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <main+0x2ec>)
 80014d6:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d8:	4628      	mov	r0, r5
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 80014da:	f241 6322 	movw	r3, #5666	@ 0x1622
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80014e2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 80014e8:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ea:	f004 fae5 	bl	8005ab8 <HAL_TIM_Base_Init>
 80014ee:	b108      	cbz	r0, 80014f4 <main+0x258>
 80014f0:	b672      	cpsid	i
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <main+0x256>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f8:	a90d      	add	r1, sp, #52	@ 0x34
 80014fa:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fe:	f004 fbc9 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 8001502:	b108      	cbz	r0, 8001508 <main+0x26c>
 8001504:	b672      	cpsid	i
  while (1)
 8001506:	e7fe      	b.n	8001506 <main+0x26a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001508:	4628      	mov	r0, r5
 800150a:	f004 fb4d 	bl	8005ba8 <HAL_TIM_PWM_Init>
 800150e:	b108      	cbz	r0, 8001514 <main+0x278>
 8001510:	b672      	cpsid	i
  while (1)
 8001512:	e7fe      	b.n	8001512 <main+0x276>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001514:	e9cd 0808 	strd	r0, r8, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001518:	2370      	movs	r3, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151a:	a907      	add	r1, sp, #28
 800151c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800151e:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001520:	f004 fdae 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	b108      	cbz	r0, 800152a <main+0x28e>
 8001526:	b672      	cpsid	i
  while (1)
 8001528:	e7fe      	b.n	8001528 <main+0x28c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800152a:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800152c:	aa0a      	add	r2, sp, #40	@ 0x28
 800152e:	4815      	ldr	r0, [pc, #84]	@ (8001584 <main+0x2e8>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8001530:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001532:	2102      	movs	r1, #2
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001534:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001538:	f004 fe42 	bl	80061c0 <HAL_TIMEx_ConfigBreakInput>
 800153c:	4602      	mov	r2, r0
 800153e:	b108      	cbz	r0, 8001544 <main+0x2a8>
 8001540:	b672      	cpsid	i
  while (1)
 8001542:	e7fe      	b.n	8001542 <main+0x2a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001544:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8001546:	e9cd 3011 	strd	r3, r0, [sp, #68]	@ 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800154a:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154e:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001552:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001554:	a911      	add	r1, sp, #68	@ 0x44
 8001556:	480b      	ldr	r0, [pc, #44]	@ (8001584 <main+0x2e8>)
 8001558:	f004 fcac 	bl	8005eb4 <HAL_TIM_PWM_ConfigChannel>
 800155c:	b1c0      	cbz	r0, 8001590 <main+0x2f4>
 800155e:	b672      	cpsid	i
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0x2c4>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	200005e4 	.word	0x200005e4
 8001574:	04300002 	.word	0x04300002
 8001578:	20000578 	.word	0x20000578
 800157c:	50000100 	.word	0x50000100
 8001580:	14f00020 	.word	0x14f00020
 8001584:	2000052c 	.word	0x2000052c
 8001588:	40012c00 	.word	0x40012c00
 800158c:	19200040 	.word	0x19200040
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001590:	4867      	ldr	r0, [pc, #412]	@ (8001730 <main+0x494>)
 8001592:	2204      	movs	r2, #4
 8001594:	a911      	add	r1, sp, #68	@ 0x44
 8001596:	f004 fc8d 	bl	8005eb4 <HAL_TIM_PWM_ConfigChannel>
 800159a:	b108      	cbz	r0, 80015a0 <main+0x304>
 800159c:	b672      	cpsid	i
  while (1)
 800159e:	e7fe      	b.n	800159e <main+0x302>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a0:	4863      	ldr	r0, [pc, #396]	@ (8001730 <main+0x494>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	a911      	add	r1, sp, #68	@ 0x44
 80015a6:	f004 fc85 	bl	8005eb4 <HAL_TIM_PWM_ConfigChannel>
 80015aa:	b108      	cbz	r0, 80015b0 <main+0x314>
 80015ac:	b672      	cpsid	i
  while (1)
 80015ae:	e7fe      	b.n	80015ae <main+0x312>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b0:	485f      	ldr	r0, [pc, #380]	@ (8001730 <main+0x494>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	a911      	add	r1, sp, #68	@ 0x44
 80015b6:	f004 fc7d 	bl	8005eb4 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b108      	cbz	r0, 80015c2 <main+0x326>
 80015be:	b672      	cpsid	i
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <main+0x324>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80015c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ca:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d2:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80015d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015da:	9221      	str	r2, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.Break2Filter = 3;
 80015dc:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 80015e0:	2203      	movs	r2, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e2:	4853      	ldr	r0, [pc, #332]	@ (8001730 <main+0x494>)
 80015e4:	a919      	add	r1, sp, #100	@ 0x64
  sBreakDeadTimeConfig.Break2Filter = 3;
 80015e6:	e9cd 4222 	strd	r4, r2, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ea:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015ee:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f2:	e9cd 3324 	strd	r3, r3, [sp, #144]	@ 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f6:	f004 fd95 	bl	8006124 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fa:	4604      	mov	r4, r0
 80015fc:	b108      	cbz	r0, 8001602 <main+0x366>
 80015fe:	b672      	cpsid	i
  while (1)
 8001600:	e7fe      	b.n	8001600 <main+0x364>
  htim2.Instance = TIM2;
 8001602:	4d4c      	ldr	r5, [pc, #304]	@ (8001734 <main+0x498>)
  HAL_TIM_MspPostInit(&htim1);
 8001604:	484a      	ldr	r0, [pc, #296]	@ (8001730 <main+0x494>)
 8001606:	f002 f8c3 	bl	8003790 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800160a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800160e:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = LF_TIMER_PSC;
 8001610:	2364      	movs	r3, #100	@ 0x64
 8001612:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001614:	4628      	mov	r0, r5
  htim2.Init.Period = LF_TIMER_ARR;
 8001616:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 800161e:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  htim2.Init.Period = LF_TIMER_ARR;
 8001626:	e9c5 4302 	strd	r4, r3, [r5, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	9413      	str	r4, [sp, #76]	@ 0x4c
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001630:	f004 fa42 	bl	8005ab8 <HAL_TIM_Base_Init>
 8001634:	b108      	cbz	r0, 800163a <main+0x39e>
 8001636:	b672      	cpsid	i
  while (1)
 8001638:	e7fe      	b.n	8001638 <main+0x39c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163e:	a919      	add	r1, sp, #100	@ 0x64
 8001640:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001644:	f004 fb26 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 8001648:	b108      	cbz	r0, 800164e <main+0x3b2>
 800164a:	b672      	cpsid	i
  while (1)
 800164c:	e7fe      	b.n	800164c <main+0x3b0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800164e:	2380      	movs	r3, #128	@ 0x80
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001650:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001652:	a911      	add	r1, sp, #68	@ 0x44
 8001654:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001656:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001658:	9211      	str	r2, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165a:	f004 fd11 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	b108      	cbz	r0, 8001666 <main+0x3ca>
 8001662:	b672      	cpsid	i
  while (1)
 8001664:	e7fe      	b.n	8001664 <main+0x3c8>
  huart2.Instance = USART2;
 8001666:	4834      	ldr	r0, [pc, #208]	@ (8001738 <main+0x49c>)
 8001668:	4c34      	ldr	r4, [pc, #208]	@ (800173c <main+0x4a0>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166a:	6283      	str	r3, [r0, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 800166c:	f44f 11e1 	mov.w	r1, #1843200	@ 0x1c2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 1843200;
 8001672:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001676:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001682:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	f005 f80b 	bl	80066a0 <HAL_UART_Init>
 800168a:	b108      	cbz	r0, 8001690 <main+0x3f4>
 800168c:	b672      	cpsid	i
  while (1)
 800168e:	e7fe      	b.n	800168e <main+0x3f2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	4829      	ldr	r0, [pc, #164]	@ (8001738 <main+0x49c>)
 8001694:	f005 f88e 	bl	80067b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001698:	4601      	mov	r1, r0
 800169a:	b108      	cbz	r0, 80016a0 <main+0x404>
 800169c:	b672      	cpsid	i
  while (1)
 800169e:	e7fe      	b.n	800169e <main+0x402>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a0:	4825      	ldr	r0, [pc, #148]	@ (8001738 <main+0x49c>)
 80016a2:	f005 f8c9 	bl	8006838 <HAL_UARTEx_SetRxFifoThreshold>
 80016a6:	b108      	cbz	r0, 80016ac <main+0x410>
 80016a8:	b672      	cpsid	i
  while (1)
 80016aa:	e7fe      	b.n	80016aa <main+0x40e>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016ac:	4822      	ldr	r0, [pc, #136]	@ (8001738 <main+0x49c>)
 80016ae:	f005 f863 	bl	8006778 <HAL_UARTEx_DisableFifoMode>
 80016b2:	4604      	mov	r4, r0
 80016b4:	b108      	cbz	r0, 80016ba <main+0x41e>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x41c>
  MX_MotorControl_Init();
 80016ba:	f000 fea7 	bl	800240c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80016be:	2103      	movs	r1, #3
 80016c0:	2201      	movs	r2, #1
 80016c2:	2026      	movs	r0, #38	@ 0x26
 80016c4:	f003 f9b6 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c8:	2026      	movs	r0, #38	@ 0x26
 80016ca:	f003 f9ef 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80016ce:	4622      	mov	r2, r4
 80016d0:	2103      	movs	r1, #3
 80016d2:	200b      	movs	r0, #11
 80016d4:	f003 f9ae 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d8:	200b      	movs	r0, #11
 80016da:	f003 f9e7 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80016de:	4622      	mov	r2, r4
 80016e0:	2102      	movs	r1, #2
 80016e2:	201c      	movs	r0, #28
 80016e4:	f003 f9a6 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e8:	201c      	movs	r0, #28
 80016ea:	f003 f9df 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80016ee:	4622      	mov	r2, r4
 80016f0:	2101      	movs	r1, #1
 80016f2:	2018      	movs	r0, #24
 80016f4:	f003 f99e 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80016f8:	2018      	movs	r0, #24
 80016fa:	f003 f9d7 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80016fe:	4622      	mov	r2, r4
 8001700:	2101      	movs	r1, #1
 8001702:	2019      	movs	r0, #25
 8001704:	f003 f996 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001708:	2019      	movs	r0, #25
 800170a:	f003 f9cf 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 800170e:	2201      	movs	r2, #1
 8001710:	4611      	mov	r1, r2
 8001712:	2012      	movs	r0, #18
 8001714:	f003 f98e 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001718:	2012      	movs	r0, #18
 800171a:	f003 f9c7 	bl	8004aac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800171e:	2028      	movs	r0, #40	@ 0x28
 8001720:	4622      	mov	r2, r4
 8001722:	2103      	movs	r1, #3
 8001724:	f003 f986 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001728:	2028      	movs	r0, #40	@ 0x28
 800172a:	f003 f9bf 	bl	8004aac <HAL_NVIC_EnableIRQ>
  while (1)
 800172e:	e7fe      	b.n	800172e <main+0x492>
 8001730:	2000052c 	.word	0x2000052c
 8001734:	200004e0 	.word	0x200004e0
 8001738:	20000450 	.word	0x20000450
 800173c:	40004400 	.word	0x40004400

08001740 <Error_Handler>:
 8001740:	b672      	cpsid	i
  while (1)
 8001742:	e7fe      	b.n	8001742 <Error_Handler+0x2>

08001744 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001744:	4b01      	ldr	r3, [pc, #4]	@ (800174c <MC_StartMotor1+0x8>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f000 b864 	b.w	8001814 <MCI_StartMotor>
 800174c:	20001818 	.word	0x20001818

08001750 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001750:	4b01      	ldr	r3, [pc, #4]	@ (8001758 <MC_StopMotor1+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f000 b874 	b.w	8001840 <MCI_StopMotor>
 8001758:	20001818 	.word	0x20001818

0800175c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 800175c:	4b01      	ldr	r3, [pc, #4]	@ (8001764 <MC_GetSTMStateMotor1+0x8>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	f000 b852 	b.w	8001808 <MCI_GetSTMState>
 8001764:	20001818 	.word	0x20001818

08001768 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pSixStepVars = pSixStepVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001770:	f04f 0c00 	mov.w	ip, #0
    pHandle->pSixStepVars = pSixStepVars;
 8001774:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001778:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800177a:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800177e:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001782:	f8a0 c012 	strh.w	ip, [r0, #18]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001786:	f880 c01a 	strb.w	ip, [r0, #26]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 800178a:	f8a0 c014 	strh.w	ip, [r0, #20]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800178e:	f8c0 c016 	str.w	ip, [r0, #22]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001792:	4770      	bx	lr

08001794 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001794:	89c3      	ldrh	r3, [r0, #14]
    {
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
      pHandle->hFinalSpeed = hFinalSpeed;
      pHandle->hDurationms = hDurationms;
 8001796:	8242      	strh	r2, [r0, #18]
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001798:	fb13 f301 	smulbb	r3, r3, r1
 800179c:	2b00      	cmp	r3, #0
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800179e:	bfab      	itete	ge
 80017a0:	2301      	movge	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
    else
    {
      pHandle->DirectCommand = MCI_STOP;
 80017a2:	2305      	movlt	r3, #5
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80017a4:	7303      	strbge	r3, [r0, #12]
      pHandle->DirectCommand = MCI_STOP;
 80017a6:	7503      	strblt	r3, [r0, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017a8:	f240 3301 	movw	r3, #769	@ 0x301
      pHandle->hFinalSpeed = hFinalSpeed;
 80017ac:	81c1      	strh	r1, [r0, #14]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017ae:	8343      	strh	r3, [r0, #26]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017b4:	8ac3      	ldrh	r3, [r0, #22]
    pHandle->PastFaults |= hSetErrors;
 80017b6:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017ba:	430b      	orrs	r3, r1
 80017bc:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80017c0:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017c4:	82c3      	strh	r3, [r0, #22]
    pHandle->PastFaults |= hSetErrors;
 80017c6:	8301      	strh	r1, [r0, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80017cc:	7e83      	ldrb	r3, [r0, #26]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d000      	beq.n	80017d4 <MCI_ExecBufferedCommands+0x8>
 80017d2:	4770      	bx	lr
{
 80017d4:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80017d6:	7b03      	ldrb	r3, [r0, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	4604      	mov	r4, r0
 80017dc:	d002      	beq.n	80017e4 <MCI_ExecBufferedCommands+0x18>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80017de:	2303      	movs	r3, #3
 80017e0:	76a3      	strb	r3, [r4, #26]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017e2:	bd10      	pop	{r4, pc}
          pHandle->pSixStepVars->bDriveInput = INTERNAL;
 80017e4:	6843      	ldr	r3, [r0, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	711a      	strb	r2, [r3, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80017ea:	6800      	ldr	r0, [r0, #0]
 80017ec:	2103      	movs	r1, #3
 80017ee:	f006 fc61 	bl	80080b4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80017f2:	8a62      	ldrh	r2, [r4, #18]
 80017f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017f8:	6820      	ldr	r0, [r4, #0]
 80017fa:	f006 fc61 	bl	80080c0 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80017fe:	2800      	cmp	r0, #0
 8001800:	d0ed      	beq.n	80017de <MCI_ExecBufferedCommands+0x12>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001802:	2302      	movs	r3, #2
 8001804:	76a3      	strb	r3, [r4, #26]
}
 8001806:	bd10      	pop	{r4, pc}

08001808 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001808:	7d40      	ldrb	r0, [r0, #21]
 800180a:	4770      	bx	lr

0800180c <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 800180c:	8b00      	ldrh	r0, [r0, #24]
 800180e:	4770      	bx	lr

08001810 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001810:	8ac0      	ldrh	r0, [r0, #22]
 8001812:	4770      	bx	lr

08001814 <MCI_StartMotor>:
{
 8001814:	b510      	push	{r4, lr}
 8001816:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001818:	f7ff fff6 	bl	8001808 <MCI_GetSTMState>
 800181c:	b108      	cbz	r0, 8001822 <MCI_StartMotor+0xe>
  bool retVal = false;
 800181e:	2000      	movs	r0, #0
}
 8001820:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fff2 	bl	800180c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001828:	2800      	cmp	r0, #0
 800182a:	d1f8      	bne.n	800181e <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ffef 	bl	8001810 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001832:	2800      	cmp	r0, #0
 8001834:	d1f3      	bne.n	800181e <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001836:	2001      	movs	r0, #1
 8001838:	7520      	strb	r0, [r4, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800183a:	76a0      	strb	r0, [r4, #26]
}
 800183c:	bd10      	pop	{r4, pc}
 800183e:	bf00      	nop

08001840 <MCI_StopMotor>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
 8001842:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001844:	f7ff ffe0 	bl	8001808 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001848:	4604      	mov	r4, r0
 800184a:	b118      	cbz	r0, 8001854 <MCI_StopMotor+0x14>
 800184c:	f1b0 040c 	subs.w	r4, r0, #12
 8001850:	bf18      	it	ne
 8001852:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001854:	4628      	mov	r0, r5
 8001856:	f7ff ffd9 	bl	800180c <MCI_GetOccurredFaults>
 800185a:	b110      	cbz	r0, 8001862 <MCI_StopMotor+0x22>
  bool retVal = false;
 800185c:	2400      	movs	r4, #0
}
 800185e:	4620      	mov	r0, r4
 8001860:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001862:	4628      	mov	r0, r5
 8001864:	f7ff ffd4 	bl	8001810 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001868:	2800      	cmp	r0, #0
 800186a:	d1f7      	bne.n	800185c <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800186c:	2c00      	cmp	r4, #0
 800186e:	d0f5      	beq.n	800185c <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001870:	2305      	movs	r3, #5
 8001872:	752b      	strb	r3, [r5, #20]
      retVal = true;
 8001874:	e7f3      	b.n	800185e <MCI_StopMotor+0x1e>
 8001876:	bf00      	nop

08001878 <MCI_FaultAcknowledged>:
{
 8001878:	b510      	push	{r4, lr}
 800187a:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800187c:	f7ff ffc4 	bl	8001808 <MCI_GetSTMState>
 8001880:	280b      	cmp	r0, #11
 8001882:	d001      	beq.n	8001888 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001884:	2000      	movs	r0, #0
}
 8001886:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff ffc1 	bl	8001810 <MCI_GetCurrentFaults>
 800188e:	2800      	cmp	r0, #0
 8001890:	d1f8      	bne.n	8001884 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001892:	2302      	movs	r3, #2
 8001894:	7523      	strb	r3, [r4, #20]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001896:	8320      	strh	r0, [r4, #24]
      reVal = true;
 8001898:	2001      	movs	r0, #1
}
 800189a:	bd10      	pop	{r4, pc}

0800189c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800189c:	8b03      	ldrh	r3, [r0, #24]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800189e:	8ac0      	ldrh	r0, [r0, #22]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80018a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80018a8:	7ec0      	ldrb	r0, [r0, #27]
 80018aa:	4770      	bx	lr

080018ac <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80018ac:	7b03      	ldrb	r3, [r0, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <MCI_GetImposedMotorDirection+0xa>
  int16_t retVal = 1;
 80018b2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80018b4:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 80018b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bfac      	ite	ge
 80018be:	2001      	movge	r0, #1
 80018c0:	f04f 30ff 	movlt.w	r0, #4294967295
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80018c8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80018d0:	8a40      	ldrh	r0, [r0, #18]
 80018d2:	4770      	bx	lr

080018d4 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80018d4:	6800      	ldr	r0, [r0, #0]
 80018d6:	f006 bc39 	b.w	800814c <STC_StopRamp>
 80018da:	bf00      	nop

080018dc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80018dc:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80018de:	6800      	ldr	r0, [r0, #0]
 80018e0:	f006 fbc2 	bl	8008068 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 80018e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80018e8:	f006 bc9a 	b.w	8008220 <SPD_GetAvrgMecSpeedUnit>

080018ec <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80018ec:	6800      	ldr	r0, [r0, #0]
 80018ee:	f006 bbd3 	b.w	8008098 <STC_GetMecSpeedRefUnit>
 80018f2:	bf00      	nop

080018f4 <MCI_GetDutyCycleRef>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval uint16_t Teref
  */
__weak uint16_t MCI_GetDutyCycleRef( MCI_Handle_t * pHandle )
{
  return ( pHandle->pSixStepVars->DutyCycleRef );
 80018f4:	6843      	ldr	r3, [r0, #4]
}
 80018f6:	8818      	ldrh	r0, [r3, #0]
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <SixStep_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_Clear(uint8_t bMotor)
{
 80018fc:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN SixStep_Clear 0 */

  /* USER CODE END SixStep_Clear 0 */

  STC_Clear(pSTC[bMotor]);
 80018fe:	4e0f      	ldr	r6, [pc, #60]	@ (800193c <SixStep_Clear+0x40>)
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
  BADC_Stop( &Bemf_ADC_M1 );
 8001900:	4d0f      	ldr	r5, [pc, #60]	@ (8001940 <SixStep_Clear+0x44>)
{
 8001902:	4604      	mov	r4, r0
  STC_Clear(pSTC[bMotor]);
 8001904:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001908:	f006 fbb2 	bl	8008070 <STC_Clear>
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 800190c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001910:	f006 fbcc 	bl	80080ac <STC_GetDutyCycleRef>
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <SixStep_Clear+0x48>)
 8001916:	4602      	mov	r2, r0
  BADC_Stop( &Bemf_ADC_M1 );
 8001918:	4628      	mov	r0, r5
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 800191a:	f823 2034 	strh.w	r2, [r3, r4, lsl #3]
  BADC_Stop( &Bemf_ADC_M1 );
 800191e:	f005 f9c5 	bl	8006cac <BADC_Stop>
  BADC_Clear( &Bemf_ADC_M1 );
 8001922:	4628      	mov	r0, r5
 8001924:	f005 f916 	bl	8006b54 <BADC_Clear>
  BADC_SpeedMeasureOff(&Bemf_ADC_M1);
 8001928:	4628      	mov	r0, r5
 800192a:	f005 f9f9 	bl	8006d20 <BADC_SpeedMeasureOff>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <SixStep_Clear+0x4c>)
 8001930:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN SixStep_Clear 1 */

  /* USER CODE END SixStep_Clear 1 */
}
 8001934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001938:	f005 bee2 	b.w	8007700 <PWMC_SwitchOffPWM>
 800193c:	20000000 	.word	0x20000000
 8001940:	200000a8 	.word	0x200000a8
 8001944:	20000684 	.word	0x20000684
 8001948:	20000680 	.word	0x20000680

0800194c <MCboot>:
  if (MC_NULL == pMCIList)
 800194c:	2800      	cmp	r0, #0
 800194e:	d04c      	beq.n	80019ea <MCboot+0x9e>
{
 8001950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001954:	4e25      	ldr	r6, [pc, #148]	@ (80019ec <MCboot+0xa0>)
    bMCBootCompleted = (uint8_t )0;
 8001956:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8001a24 <MCboot+0xd8>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 800195a:	4d25      	ldr	r5, [pc, #148]	@ (80019f0 <MCboot+0xa4>)
    bMCBootCompleted = (uint8_t )0;
 800195c:	2700      	movs	r7, #0
 800195e:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001960:	4824      	ldr	r0, [pc, #144]	@ (80019f4 <MCboot+0xa8>)
 8001962:	6030      	str	r0, [r6, #0]
    bMCBootCompleted = (uint8_t )0;
 8001964:	f888 7000 	strb.w	r7, [r8]
    ThreePwm_Init(&PWM_Handle_M1);
 8001968:	f005 ff36 	bl	80077d8 <ThreePwm_Init>
    ASPEP_start(&aspepOverUartA);
 800196c:	4822      	ldr	r0, [pc, #136]	@ (80019f8 <MCboot+0xac>)
 800196e:	f7ff f8fb 	bl	8000b68 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001972:	4822      	ldr	r0, [pc, #136]	@ (80019fc <MCboot+0xb0>)
 8001974:	f005 fe3c 	bl	80075f0 <PID_HandleInit>
    BADC_Init (&Bemf_ADC_M1);
 8001978:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <MCboot+0xb4>)
 800197a:	f004 ffa5 	bl	80068c8 <BADC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 800197e:	4a20      	ldr	r2, [pc, #128]	@ (8001a00 <MCboot+0xb4>)
 8001980:	491e      	ldr	r1, [pc, #120]	@ (80019fc <MCboot+0xb0>)
 8001982:	6828      	ldr	r0, [r5, #0]
 8001984:	f006 fb56 	bl	8008034 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001988:	481e      	ldr	r0, [pc, #120]	@ (8001a04 <MCboot+0xb8>)
 800198a:	f006 fc95 	bl	80082b8 <VSS_Init>
    RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1);
 800198e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a04 <MCboot+0xb8>)
 8001990:	6829      	ldr	r1, [r5, #0]
 8001992:	481d      	ldr	r0, [pc, #116]	@ (8001a08 <MCboot+0xbc>)
 8001994:	f006 fa52 	bl	8007e3c <RUC_Init>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001998:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <MCboot+0xc0>)
 800199a:	f001 fb8d 	bl	80030b8 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 800199e:	481c      	ldr	r0, [pc, #112]	@ (8001a10 <MCboot+0xc4>)
 80019a0:	f006 f9f2 	bl	8007d88 <RVBS_Init>
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80019a4:	481b      	ldr	r0, [pc, #108]	@ (8001a14 <MCboot+0xc8>)
 80019a6:	f001 fb87 	bl	80030b8 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80019aa:	481b      	ldr	r0, [pc, #108]	@ (8001a18 <MCboot+0xcc>)
 80019ac:	f005 fdea 	bl	8007584 <NTC_Init>
    SixStep_Clear(M1);
 80019b0:	4638      	mov	r0, r7
 80019b2:	f7ff ffa3 	bl	80018fc <SixStep_Clear>
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019b6:	6833      	ldr	r3, [r6, #0]
 80019b8:	4e18      	ldr	r6, [pc, #96]	@ (8001a1c <MCboot+0xd0>)
    SixStepVars[M1].bDriveInput = EXTERNAL;
 80019ba:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <MCboot+0xd4>)
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019bc:	6829      	ldr	r1, [r5, #0]
    SixStepVars[M1].bDriveInput = EXTERNAL;
 80019be:	f04f 0901 	mov.w	r9, #1
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019c2:	4630      	mov	r0, r6
    SixStepVars[M1].bDriveInput = EXTERNAL;
 80019c4:	f882 9004 	strb.w	r9, [r2, #4]
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019c8:	f7ff fed2 	bl	8001770 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 80019cc:	6828      	ldr	r0, [r5, #0]
 80019ce:	f006 fc15 	bl	80081fc <STC_GetMecSpeedRefUnitDefault>
 80019d2:	463a      	mov	r2, r7
 80019d4:	4601      	mov	r1, r0
 80019d6:	4630      	mov	r0, r6
 80019d8:	f7ff fedc 	bl	8001794 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80019dc:	6026      	str	r6, [r4, #0]
    MC_APP_BootHook();
 80019de:	f7ff fec3 	bl	8001768 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80019e2:	f888 9000 	strb.w	r9, [r8]
}
 80019e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019ea:	4770      	bx	lr
 80019ec:	20000680 	.word	0x20000680
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000005c 	.word	0x2000005c
 80019f8:	200002dc 	.word	0x200002dc
 80019fc:	20000264 	.word	0x20000264
 8001a00:	200000a8 	.word	0x200000a8
 8001a04:	200001a4 	.word	0x200001a4
 8001a08:	200001dc 	.word	0x200001dc
 8001a0c:	20000020 	.word	0x20000020
 8001a10:	20000004 	.word	0x20000004
 8001a14:	2000004c 	.word	0x2000004c
 8001a18:	20000030 	.word	0x20000030
 8001a1c:	20000650 	.word	0x20000650
 8001a20:	20000684 	.word	0x20000684
 8001a24:	20000678 	.word	0x20000678

08001a28 <SixStep_InitAdditionalMethods>:
__weak void SixStep_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <SixStep_CalcSpeedRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_CalcSpeedRef(uint8_t bMotor)
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(SixStepVars[bMotor].bDriveInput == INTERNAL)
 8001a2e:	4d07      	ldr	r5, [pc, #28]	@ (8001a4c <SixStep_CalcSpeedRef+0x20>)
 8001a30:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	b103      	cbz	r3, 8001a3a <SixStep_CalcSpeedRef+0xe>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001a38:	bd38      	pop	{r3, r4, r5, pc}
    SixStepVars[bMotor].DutyCycleRef = STC_CalcSpeedReference(pSTC[bMotor]);
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <SixStep_CalcSpeedRef+0x24>)
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a42:	f006 fb89 	bl	8008158 <STC_CalcSpeedReference>
 8001a46:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
}
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	20000684 	.word	0x20000684
 8001a50:	20000000 	.word	0x20000000

08001a54 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a54:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a56:	8018      	strh	r0, [r3, #0]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000067c 	.word	0x2000067c

08001a60 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a62:	8818      	ldrh	r0, [r3, #0]
 8001a64:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a66:	fab0 f080 	clz	r0, r0
 8001a6a:	0940      	lsrs	r0, r0, #5
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	2000067c 	.word	0x2000067c

08001a74 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a74:	4b01      	ldr	r3, [pc, #4]	@ (8001a7c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a76:	8018      	strh	r0, [r3, #0]
}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000067a 	.word	0x2000067a

08001a80 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a82:	8818      	ldrh	r0, [r3, #0]
 8001a84:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a86:	fab0 f080 	clz	r0, r0
 8001a8a:	0940      	lsrs	r0, r0, #5
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2000067a 	.word	0x2000067a

08001a94 <TSK_MediumFrequencyTaskM1>:
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a96:	4ca4      	ldr	r4, [pc, #656]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001a98:	48a4      	ldr	r0, [pc, #656]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
{
 8001a9a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001a9c:	2300      	movs	r3, #0
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001a9e:	a901      	add	r1, sp, #4
  int16_t wAux = 0;
 8001aa0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001aa4:	f005 fa3e 	bl	8006f24 <BADC_CalcAvrgMecSpeedUnit>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff feb1 	bl	8001810 <MCI_GetCurrentFaults>
 8001aae:	b118      	cbz	r0, 8001ab8 <TSK_MediumFrequencyTaskM1+0x24>
    Mci[M1].State = FAULT_NOW;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	7563      	strb	r3, [r4, #21]
}
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fea7 	bl	800180c <MCI_GetOccurredFaults>
 8001abe:	bb68      	cbnz	r0, 8001b1c <TSK_MediumFrequencyTaskM1+0x88>
      switch (Mci[M1].State)
 8001ac0:	7d63      	ldrb	r3, [r4, #21]
 8001ac2:	2b13      	cmp	r3, #19
 8001ac4:	d8f6      	bhi.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
 8001ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8001acc <TSK_MediumFrequencyTaskM1+0x38>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001c4d 	.word	0x08001c4d
 8001ad0:	08001ab5 	.word	0x08001ab5
 8001ad4:	08001ab5 	.word	0x08001ab5
 8001ad8:	08001ab5 	.word	0x08001ab5
 8001adc:	08001c01 	.word	0x08001c01
 8001ae0:	08001ab5 	.word	0x08001ab5
 8001ae4:	08001bcd 	.word	0x08001bcd
 8001ae8:	08001ab5 	.word	0x08001ab5
 8001aec:	08001ba9 	.word	0x08001ba9
 8001af0:	08001ab5 	.word	0x08001ab5
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b9d 	.word	0x08001b9d
 8001afc:	08001ab5 	.word	0x08001ab5
 8001b00:	08001ab5 	.word	0x08001ab5
 8001b04:	08001ab5 	.word	0x08001ab5
 8001b08:	08001ab5 	.word	0x08001ab5
 8001b0c:	08001b45 	.word	0x08001b45
 8001b10:	08001ab5 	.word	0x08001ab5
 8001b14:	08001ab5 	.word	0x08001ab5
 8001b18:	08001b25 	.word	0x08001b25
      Mci[M1].State = FAULT_OVER;
 8001b1c:	230b      	movs	r3, #11
 8001b1e:	7563      	strb	r3, [r4, #21]
}
 8001b20:	b002      	add	sp, #8
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b24:	7d23      	ldrb	r3, [r4, #20]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	f000 80ac 	beq.w	8001c84 <TSK_MediumFrequencyTaskM1+0x1f0>
            if (! RUC_Exec(&RevUpControlM1))
 8001b2c:	4880      	ldr	r0, [pc, #512]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001b2e:	f006 f9f7 	bl	8007f20 <RUC_Exec>
 8001b32:	4602      	mov	r2, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f040 80c4 	bne.w	8001cc2 <TSK_MediumFrequencyTaskM1+0x22e>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001b3a:	487b      	ldr	r0, [pc, #492]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	f7ff fe39 	bl	80017b4 <MCI_FaultProcessing>
 8001b42:	e7b7      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b44:	7d23      	ldrb	r3, [r4, #20]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	f000 809c 	beq.w	8001c84 <TSK_MediumFrequencyTaskM1+0x1f0>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001b4c:	f7ff ff88 	bl	8001a60 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d0af      	beq.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
              ThreePwm_SwitchOffPWM(pwmcHandle[M1]);
 8001b54:	4d77      	ldr	r5, [pc, #476]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x2a0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b56:	4e78      	ldr	r6, [pc, #480]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2a4>)
              ThreePwm_SwitchOffPWM(pwmcHandle[M1]);
 8001b58:	6828      	ldr	r0, [r5, #0]
 8001b5a:	f006 f8a9 	bl	8007cb0 <ThreePwm_SwitchOffPWM>
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001b5e:	4b77      	ldr	r3, [pc, #476]	@ (8001d3c <TSK_MediumFrequencyTaskM1+0x2a8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b60:	4977      	ldr	r1, [pc, #476]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001b62:	6830      	ldr	r0, [r6, #0]
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001b64:	2201      	movs	r2, #1
 8001b66:	711a      	strb	r2, [r3, #4]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b68:	f006 fa7a 	bl	8008060 <STC_SetSpeedSensor>
              BADC_Clear(&Bemf_ADC_M1);
 8001b6c:	486f      	ldr	r0, [pc, #444]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001b6e:	f004 fff1 	bl	8006b54 <BADC_Clear>
              SixStep_Clear( M1 );
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fec2 	bl	80018fc <SixStep_Clear>
              BADC_SetDirection(&Bemf_ADC_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001b78:	486b      	ldr	r0, [pc, #428]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
 8001b7a:	f7ff fe97 	bl	80018ac <MCI_GetImposedMotorDirection>
 8001b7e:	b2c1      	uxtb	r1, r0
 8001b80:	486a      	ldr	r0, [pc, #424]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001b82:	f005 fa85 	bl	8007090 <BADC_SetDirection>
              BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001b86:	6832      	ldr	r2, [r6, #0]
 8001b88:	496e      	ldr	r1, [pc, #440]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001b8a:	4868      	ldr	r0, [pc, #416]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001b8c:	f005 f8d0 	bl	8006d30 <BADC_SetSamplingPoint>
                Mci[M1].State = START;
 8001b90:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b92:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001b94:	7563      	strb	r3, [r4, #21]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b96:	f005 fdb5 	bl	8007704 <PWMC_SwitchOnPWM>
 8001b9a:	e78b      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001b9c:	7d23      	ldrb	r3, [r4, #20]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d188      	bne.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	82a3      	strh	r3, [r4, #20]
 8001ba6:	e785      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001ba8:	f7ff ff6a 	bl	8001a80 <TSK_StopPermanencyTimeHasElapsedM1>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d081      	beq.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001bb0:	4b61      	ldr	r3, [pc, #388]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001bb2:	4963      	ldr	r1, [pc, #396]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f006 fa53 	bl	8008060 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001bba:	4861      	ldr	r0, [pc, #388]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001bbc:	f006 fb6e 	bl	800829c <VSS_Clear>
            BADC_Clear(&Bemf_ADC_M1);
 8001bc0:	485a      	ldr	r0, [pc, #360]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001bc2:	f004 ffc7 	bl	8006b54 <BADC_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	82a3      	strh	r3, [r4, #20]
 8001bca:	e773      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001bcc:	7d23      	ldrb	r3, [r4, #20]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d058      	beq.n	8001c84 <TSK_MediumFrequencyTaskM1+0x1f0>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001bd2:	4855      	ldr	r0, [pc, #340]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001bd4:	4c55      	ldr	r4, [pc, #340]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001bd6:	f7ff fdf9 	bl	80017cc <MCI_ExecBufferedCommands>
            SixStep_CalcSpeedRef( M1 );
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff ff26 	bl	8001a2c <SixStep_CalcSpeedRef>
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001be0:	4b55      	ldr	r3, [pc, #340]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001be2:	4958      	ldr	r1, [pc, #352]	@ (8001d44 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4620      	mov	r0, r4
 8001be8:	f005 f8a2 	bl	8006d30 <BADC_SetSamplingPoint>
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8001bec:	4620      	mov	r0, r4
 8001bee:	f005 fadd 	bl	80071ac <BADC_CalcRunDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 8001bf2:	4b50      	ldr	r3, [pc, #320]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001bf4:	f8b4 10f2 	ldrh.w	r1, [r4, #242]	@ 0xf2
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f005 fd89 	bl	8007710 <PWMC_ForceFastDemagTime>
 8001bfe:	e759      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001c00:	7d23      	ldrb	r3, [r4, #20]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d03e      	beq.n	8001c84 <TSK_MediumFrequencyTaskM1+0x1f0>
            if(! RUC_Exec(&RevUpControlM1))
 8001c06:	484a      	ldr	r0, [pc, #296]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c08:	f006 f98a 	bl	8007f20 <RUC_Exec>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d146      	bne.n	8001ca0 <TSK_MediumFrequencyTaskM1+0x20c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001c12:	4845      	ldr	r0, [pc, #276]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
 8001c14:	2110      	movs	r1, #16
 8001c16:	f7ff fdcd 	bl	80017b4 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001c1a:	4849      	ldr	r0, [pc, #292]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001c1c:	f10d 0106 	add.w	r1, sp, #6
 8001c20:	f006 fba0 	bl	8008364 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001c24:	4842      	ldr	r0, [pc, #264]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c26:	f006 f9cb 	bl	8007fc0 <RUC_FirstAccelerationStageReached>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	f43f af42 	beq.w	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
             ObserverConverged = BADC_IsObserverConverged( &Bemf_ADC_M1);
 8001c30:	483e      	ldr	r0, [pc, #248]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001c32:	f005 fa31 	bl	8007098 <BADC_IsObserverConverged>
 8001c36:	4605      	mov	r5, r0
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001c38:	4629      	mov	r1, r5
 8001c3a:	4841      	ldr	r0, [pc, #260]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001c3c:	f006 fc28 	bl	8008490 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	f43f af37 	beq.w	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
              Mci[M1].State = SWITCH_OVER;
 8001c46:	2313      	movs	r3, #19
 8001c48:	7563      	strb	r3, [r4, #21]
 8001c4a:	e733      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001c4c:	7d23      	ldrb	r3, [r4, #20]
 8001c4e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f47f af2e 	bne.w	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c58:	4833      	ldr	r0, [pc, #204]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
 8001c5a:	f7ff fe27 	bl	80018ac <MCI_GetImposedMotorDirection>
 8001c5e:	4601      	mov	r1, r0
 8001c60:	4833      	ldr	r0, [pc, #204]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c62:	f006 f90d 	bl	8007e80 <RUC_Clear>
              RUC_UpdatePulse(&RevUpControlM1, &BusVoltageSensor_M1._Super);
 8001c66:	4938      	ldr	r1, [pc, #224]	@ (8001d48 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8001c68:	4831      	ldr	r0, [pc, #196]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c6a:	f006 f94d 	bl	8007f08 <RUC_UpdatePulse>
              ThreePwm_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f005 ffa6 	bl	8007bc4 <ThreePwm_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001c78:	2014      	movs	r0, #20
 8001c7a:	f7ff feeb 	bl	8001a54 <TSK_SetChargeBootCapDelayM1>
              Mci[M1].State = CHARGE_BOOT_CAP;
 8001c7e:	2310      	movs	r3, #16
 8001c80:	7563      	strb	r3, [r4, #21]
 8001c82:	e717      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
    ThreePwm_SwitchOffPWM(pwmcHandle[motor]);
 8001c84:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f006 f812 	bl	8007cb0 <ThreePwm_SwitchOffPWM>
  SixStep_Clear(motor);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fe35 	bl	80018fc <SixStep_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001c92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c96:	f7ff feed 	bl	8001a74 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	7563      	strb	r3, [r4, #21]
}
 8001c9e:	e709      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
            (void) BADC_CalcRevUpDemagTime (&Bemf_ADC_M1);
 8001ca0:	4d22      	ldr	r5, [pc, #136]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f005 fa64 	bl	8007170 <BADC_CalcRevUpDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001caa:	f8b5 10f2 	ldrh.w	r1, [r5, #242]	@ 0xf2
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f005 fd2e 	bl	8007710 <PWMC_ForceFastDemagTime>
            SixStepVars[M1].DutyCycleRef = STC_CalcSpeedReference( pSTC[M1] );
 8001cb4:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f006 fa4e 	bl	8008158 <STC_CalcSpeedReference>
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001cbe:	8018      	strh	r0, [r3, #0]
 8001cc0:	e7ab      	b.n	8001c1a <TSK_MediumFrequencyTaskM1+0x186>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001cc2:	481f      	ldr	r0, [pc, #124]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001cc4:	f10d 0106 	add.w	r1, sp, #6
 8001cc8:	f006 fb4c 	bl	8008364 <VSS_CalcAvrgMecSpeedUnit>
 8001ccc:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001cce:	481c      	ldr	r0, [pc, #112]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001cd0:	f006 fbec 	bl	80084ac <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001cd4:	b915      	cbnz	r5, 8001cdc <TSK_MediumFrequencyTaskM1+0x248>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	f43f aeec 	beq.w	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001cde:	481b      	ldr	r0, [pc, #108]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001ce0:	881e      	ldrh	r6, [r3, #0]
                STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8001ce2:	4d15      	ldr	r5, [pc, #84]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x2a4>)
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001ce4:	f005 fca2 	bl	800762c <PID_GetKIDivisor>
 8001ce8:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001cea:	fb06 f101 	mul.w	r1, r6, r1
 8001cee:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001cf0:	f005 fc92 	bl	8007618 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8001cf4:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001cf6:	6828      	ldr	r0, [r5, #0]
 8001cf8:	f006 f9b2 	bl	8008060 <STC_SetSpeedSensor>
                SixStep_InitAdditionalMethods(M1);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fe93 	bl	8001a28 <SixStep_InitAdditionalMethods>
                SixStep_CalcSpeedRef(M1);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fe92 	bl	8001a2c <SixStep_CalcSpeedRef>
                BADC_SetLoopClosed(&Bemf_ADC_M1);
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001d0a:	f005 fa67 	bl	80071dc <BADC_SetLoopClosed>
                BADC_SpeedMeasureOn(&Bemf_ADC_M1);
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x298>)
 8001d10:	f004 fffc 	bl	8006d0c <BADC_SpeedMeasureOn>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	f006 fa75 	bl	8008204 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001d1a:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <TSK_MediumFrequencyTaskM1+0x294>)
 8001d1c:	f7ff fd56 	bl	80017cc <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001d20:	2306      	movs	r3, #6
 8001d22:	7563      	strb	r3, [r4, #21]
 8001d24:	e6c6      	b.n	8001ab4 <TSK_MediumFrequencyTaskM1+0x20>
 8001d26:	bf00      	nop
 8001d28:	20000650 	.word	0x20000650
 8001d2c:	200000a8 	.word	0x200000a8
 8001d30:	200001dc 	.word	0x200001dc
 8001d34:	20000680 	.word	0x20000680
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000684 	.word	0x20000684
 8001d40:	200001a4 	.word	0x200001a4
 8001d44:	2000005c 	.word	0x2000005c
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	20000264 	.word	0x20000264

08001d50 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MC_Scheduler+0x78>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d000      	beq.n	8001d5a <MC_Scheduler+0xa>
 8001d58:	4770      	bx	lr
{
 8001d5a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001d5c:	4c1b      	ldr	r4, [pc, #108]	@ (8001dcc <MC_Scheduler+0x7c>)
 8001d5e:	8823      	ldrh	r3, [r4, #0]
 8001d60:	b19b      	cbz	r3, 8001d8a <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001d66:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd0 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001d68:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001d6a:	8813      	ldrh	r3, [r2, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b11b      	cbz	r3, 8001d78 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001d70:	8813      	ldrh	r3, [r2, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001d78:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <MC_Scheduler+0x84>)
 8001d7a:	8813      	ldrh	r3, [r2, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b11b      	cbz	r3, 8001d88 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001d80:	8813      	ldrh	r3, [r2, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	8013      	strh	r3, [r2, #0]
}
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d8a:	4d13      	ldr	r5, [pc, #76]	@ (8001dd8 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001d8c:	f7ff fe82 	bl	8001a94 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001d90:	f7ff fcec 	bl	800176c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d94:	4629      	mov	r1, r5
 8001d96:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001d9a:	6883      	ldr	r3, [r0, #8]
 8001d9c:	4798      	blx	r3
 8001d9e:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001da0:	b130      	cbz	r0, 8001db0 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001da2:	4629      	mov	r1, r5
 8001da4:	220a      	movs	r2, #10
 8001da6:	f851 0b08 	ldr.w	r0, [r1], #8
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	4798      	blx	r3
 8001dae:	b908      	cbnz	r0, 8001db4 <MC_Scheduler+0x64>
{
 8001db0:	2301      	movs	r3, #1
 8001db2:	e7d8      	b.n	8001d66 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001db4:	4628      	mov	r0, r5
 8001db6:	f000 fa83 	bl	80022c0 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001dba:	6828      	ldr	r0, [r5, #0]
 8001dbc:	89ea      	ldrh	r2, [r5, #14]
 8001dbe:	6846      	ldr	r6, [r0, #4]
 8001dc0:	68a9      	ldr	r1, [r5, #8]
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	47b0      	blx	r6
 8001dc6:	e7f3      	b.n	8001db0 <MC_Scheduler+0x60>
 8001dc8:	20000678 	.word	0x20000678
 8001dcc:	2000067e 	.word	0x2000067e
 8001dd0:	2000067c 	.word	0x2000067c
 8001dd4:	2000067a 	.word	0x2000067a
 8001dd8:	200002cc 	.word	0x200002cc

08001ddc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hSixStepReturn;
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == ThreePwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001de0:	484a      	ldr	r0, [pc, #296]	@ (8001f0c <TSK_HighFrequencyTask+0x130>)
 8001de2:	4e4b      	ldr	r6, [pc, #300]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
{
 8001de4:	b083      	sub	sp, #12
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == ThreePwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001de6:	f005 fa07 	bl	80071f8 <BADC_ClearStepUpdate>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d072      	beq.n	8001ed4 <TSK_HighFrequencyTask+0xf8>
  {
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State )) /*  only for sensor-less*/
 8001dee:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <TSK_HighFrequencyTask+0x138>)
 8001df0:	7d5b      	ldrb	r3, [r3, #21]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d077      	beq.n	8001ee6 <TSK_HighFrequencyTask+0x10a>
 8001df6:	2b13      	cmp	r3, #19
 8001df8:	d056      	beq.n	8001ea8 <TSK_HighFrequencyTask+0xcc>
        PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
      }
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
    }
    (void)BADC_CalcElAngle (&Bemf_ADC_M1);
 8001dfa:	4d44      	ldr	r5, [pc, #272]	@ (8001f0c <TSK_HighFrequencyTask+0x130>)
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f005 f94f 	bl	80070a0 <BADC_CalcElAngle>
inline uint16_t SixStep_StatorController(void)
{
  uint16_t hCodeError = MC_NO_ERROR;
  int16_t hElAngle, hSpeed, hDirection;
  SpeednPosFdbk_Handle_t *speedHandle;
  RCM_ReadOngoingConv();
 8001e02:	f001 fb93 	bl	800352c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001e06:	f001 fb4d 	bl	80034a4 <RCM_ExecNextConv>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e0a:	4b43      	ldr	r3, [pc, #268]	@ (8001f18 <TSK_HighFrequencyTask+0x13c>)
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f006 f92b 	bl	8008068 <STC_GetSpeedSensor>
 8001e12:	4607      	mov	r7, r0
  if(false == BADC_IsObserverConverged(&Bemf_ADC_M1))
 8001e14:	4628      	mov	r0, r5
 8001e16:	f005 f93f 	bl	8007098 <BADC_IsObserverConverged>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d03f      	beq.n	8001e9e <TSK_HighFrequencyTask+0xc2>
  {
    hElAngle = SPD_GetElAngle(speedHandle);
  }
  else
  {
    hElAngle = SPD_GetElAngle(&Bemf_ADC_M1._Super);
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f006 f9fa 	bl	8008218 <SPD_GetElAngle>
 8001e24:	4604      	mov	r4, r0
  }
  hSpeed = SPD_GetElSpeedDpp(speedHandle);
 8001e26:	4638      	mov	r0, r7
 8001e28:	f006 f9fe 	bl	8008228 <SPD_GetElSpeedDpp>
 8001e2c:	4607      	mov	r7, r0
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e2e:	483b      	ldr	r0, [pc, #236]	@ (8001f1c <TSK_HighFrequencyTask+0x140>)
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e30:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8001f30 <TSK_HighFrequencyTask+0x154>
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e34:	f006 f8fa 	bl	800802c <RUC_GetDirection>
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e38:	4b39      	ldr	r3, [pc, #228]	@ (8001f20 <TSK_HighFrequencyTask+0x144>)
 8001e3a:	f8b9 1000 	ldrh.w	r1, [r9]
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e3e:	4680      	mov	r8, r0
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	f005 fcff 	bl	8007844 <PWMC_SetPhaseVoltage>
  if (hDirection > 0)
  {
    SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8001e46:	b2a4      	uxth	r4, r4
  if (hDirection > 0)
 8001e48:	f1b8 0f00 	cmp.w	r8, #0
    SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8001e4c:	bfcc      	ite	gt
 8001e4e:	f504 4480 	addgt.w	r4, r4, #16384	@ 0x4000
  }
  else
  {
    SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
 8001e52:	f5a4 4480 	suble.w	r4, r4, #16384	@ 0x4000
 8001e56:	b223      	sxth	r3, r4
  }
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
  ThreePwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 8001e58:	482d      	ldr	r0, [pc, #180]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001e5a:	f8a9 3006 	strh.w	r3, [r9, #6]
 8001e5e:	4641      	mov	r1, r8
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
 8001e60:	8633      	strh	r3, [r6, #48]	@ 0x30
  ThreePwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 8001e62:	f005 fd25 	bl	80078b0 <ThreePwm_LoadNextStep>
  if (true == ThreePwm_ApplyNextStep(&PWM_Handle_M1))
 8001e66:	482a      	ldr	r0, [pc, #168]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001e68:	f005 fcee 	bl	8007848 <ThreePwm_ApplyNextStep>
 8001e6c:	b118      	cbz	r0, 8001e76 <TSK_HighFrequencyTask+0x9a>
  {
    if (false == Bemf_ADC_M1.IsLoopClosed)
 8001e6e:	f895 3066 	ldrb.w	r3, [r5, #102]	@ 0x66
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d044      	beq.n	8001f00 <TSK_HighFrequencyTask+0x124>
    {
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
    }
  }
  BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1._Super.Step );
 8001e76:	4825      	ldr	r0, [pc, #148]	@ (8001f0c <TSK_HighFrequencyTask+0x130>)
 8001e78:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 8001e7c:	f004 fe7a 	bl	8006b74 <BADC_Start>
    ThreePwm_UpdatePwmDemagCounter( &PWM_Handle_M1 );
 8001e80:	4823      	ldr	r0, [pc, #140]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001e82:	f005 ff4b 	bl	8007d1c <ThreePwm_UpdatePwmDemagCounter>
  GLOBAL_TIMESTAMP++;
 8001e86:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <TSK_HighFrequencyTask+0x148>)
  if (0U == MCPA_UART_A.Mark)
 8001e88:	4827      	ldr	r0, [pc, #156]	@ (8001f28 <TSK_HighFrequencyTask+0x14c>)
  GLOBAL_TIMESTAMP++;
 8001e8a:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001e8c:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001e90:	3301      	adds	r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001e94:	b9c1      	cbnz	r1, 8001ec8 <TSK_HighFrequencyTask+0xec>
}
 8001e96:	2000      	movs	r0, #0
 8001e98:	b003      	add	sp, #12
 8001e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hElAngle = SPD_GetElAngle(speedHandle);
 8001e9e:	4638      	mov	r0, r7
 8001ea0:	f006 f9ba 	bl	8008218 <SPD_GetElAngle>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	e7be      	b.n	8001e26 <TSK_HighFrequencyTask+0x4a>
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
 8001ea8:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f005 fc2e 	bl	800770c <PWMC_SetAlignFlag>
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001eb0:	481e      	ldr	r0, [pc, #120]	@ (8001f2c <TSK_HighFrequencyTask+0x150>)
 8001eb2:	f006 f9b1 	bl	8008218 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001eb6:	f10d 0106 	add.w	r1, sp, #6
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001eba:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ebc:	481b      	ldr	r0, [pc, #108]	@ (8001f2c <TSK_HighFrequencyTask+0x150>)
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001ebe:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ec2:	f006 f9fd 	bl	80082c0 <VSS_CalcElAngle>
 8001ec6:	e798      	b.n	8001dfa <TSK_HighFrequencyTask+0x1e>
    MCPA_dataLog (&MCPA_UART_A);
 8001ec8:	f005 f9e2 	bl	8007290 <MCPA_dataLog>
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	b003      	add	sp, #12
 8001ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == ThreePwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f005 fcd1 	bl	800787c <ThreePwm_IsFastDemagUpdated>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d087      	beq.n	8001dee <TSK_HighFrequencyTask+0x12>
    ThreePwm_DisablePwmDemagCounter( &PWM_Handle_M1 );
 8001ede:	4630      	mov	r0, r6
 8001ee0:	f005 ff2c 	bl	8007d3c <ThreePwm_DisablePwmDemagCounter>
 8001ee4:	e7cf      	b.n	8001e86 <TSK_HighFrequencyTask+0xaa>
        if (0U == RUC_IsAlignStageNow(&RevUpControlM1))
 8001ee6:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <TSK_HighFrequencyTask+0x140>)
 8001ee8:	f006 f85c 	bl	8007fa4 <RUC_IsAlignStageNow>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0db      	beq.n	8001ea8 <TSK_HighFrequencyTask+0xcc>
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, RUC_GetDirection(&RevUpControlM1));
 8001ef0:	480a      	ldr	r0, [pc, #40]	@ (8001f1c <TSK_HighFrequencyTask+0x140>)
 8001ef2:	f006 f89b 	bl	800802c <RUC_GetDirection>
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001efa:	f005 fc07 	bl	800770c <PWMC_SetAlignFlag>
 8001efe:	e7d7      	b.n	8001eb0 <TSK_HighFrequencyTask+0xd4>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <TSK_HighFrequencyTask+0x134>)
 8001f02:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TSK_HighFrequencyTask+0x130>)
 8001f04:	4639      	mov	r1, r7
 8001f06:	f005 f8ed 	bl	80070e4 <BADC_StepChangeEvent>
 8001f0a:	e7b4      	b.n	8001e76 <TSK_HighFrequencyTask+0x9a>
 8001f0c:	200000a8 	.word	0x200000a8
 8001f10:	2000005c 	.word	0x2000005c
 8001f14:	20000650 	.word	0x20000650
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	200001dc 	.word	0x200001dc
 8001f20:	20000680 	.word	0x20000680
 8001f24:	2000187c 	.word	0x2000187c
 8001f28:	200002a0 	.word	0x200002a0
 8001f2c:	200001a4 	.word	0x200001a4
 8001f30:	20000684 	.word	0x20000684

08001f34 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001f36:	4604      	mov	r4, r0
 8001f38:	b300      	cbz	r0, 8001f7c <TSK_SafetyTask_PWMOFF+0x48>
  }
  else
  {
    /* Nothing to do */
  }
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f3a:	4e20      	ldr	r6, [pc, #128]	@ (8001fbc <TSK_SafetyTask_PWMOFF+0x88>)
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f3c:	4d20      	ldr	r5, [pc, #128]	@ (8001fc0 <TSK_SafetyTask_PWMOFF+0x8c>)
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f3e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001f42:	f005 fc2d 	bl	80077a0 <PWMC_IsFaultOccurred>
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f46:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f4a:	4601      	mov	r1, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f4c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001f50:	43ca      	mvns	r2, r1
 8001f52:	4628      	mov	r0, r5
 8001f54:	b292      	uxth	r2, r2
 8001f56:	f7ff fc2d 	bl	80017b4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7ff fc9e 	bl	800189c <MCI_GetFaultState>
 8001f60:	b900      	cbnz	r0, 8001f64 <TSK_SafetyTask_PWMOFF+0x30>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001f64:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001f68:	f005 fbca 	bl	8007700 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001f6c:	4815      	ldr	r0, [pc, #84]	@ (8001fc4 <TSK_SafetyTask_PWMOFF+0x90>)
 8001f6e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001f72:	b9fb      	cbnz	r3, 8001fb4 <TSK_SafetyTask_PWMOFF+0x80>
    SixStep_Clear(bMotor);
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fcc1 	bl	80018fc <SixStep_Clear>
}
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001f7c:	4812      	ldr	r0, [pc, #72]	@ (8001fc8 <TSK_SafetyTask_PWMOFF+0x94>)
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8001fbc <TSK_SafetyTask_PWMOFF+0x88>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001f80:	f001 f996 	bl	80032b0 <RCM_ExecRegularConv>
 8001f84:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001f86:	4811      	ldr	r0, [pc, #68]	@ (8001fcc <TSK_SafetyTask_PWMOFF+0x98>)
 8001f88:	f005 fb08 	bl	800759c <NTC_CalcAvTemp>
 8001f8c:	4607      	mov	r7, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f8e:	6830      	ldr	r0, [r6, #0]
 8001f90:	f005 fc06 	bl	80077a0 <PWMC_IsFaultOccurred>
 8001f94:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001f96:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001f98:	f001 f98a 	bl	80032b0 <RCM_ExecRegularConv>
 8001f9c:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001fa0:	f005 ff1e 	bl	8007de0 <RVBS_CalcAvVbus>
 8001fa4:	4307      	orrs	r7, r0
 8001fa6:	f007 070e 	and.w	r7, r7, #14
 8001faa:	ea45 0107 	orr.w	r1, r5, r7
 8001fae:	b289      	uxth	r1, r1
 8001fb0:	4d03      	ldr	r5, [pc, #12]	@ (8001fc0 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001fb2:	e7cd      	b.n	8001f50 <TSK_SafetyTask_PWMOFF+0x1c>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001fb4:	f005 fa2c 	bl	8007410 <MCPA_flushDataLog>
 8001fb8:	e7dc      	b.n	8001f74 <TSK_SafetyTask_PWMOFF+0x40>
 8001fba:	bf00      	nop
 8001fbc:	20000680 	.word	0x20000680
 8001fc0:	20000650 	.word	0x20000650
 8001fc4:	200002a0 	.word	0x200002a0
 8001fc8:	2000004c 	.word	0x2000004c
 8001fcc:	20000030 	.word	0x20000030
 8001fd0:	20000020 	.word	0x20000020
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <TSK_SafetyTask>:
{
 8001fd8:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <TSK_SafetyTask+0x1c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d000      	beq.n	8001fe4 <TSK_SafetyTask+0xc>
}
 8001fe2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff ffa5 	bl	8001f34 <TSK_SafetyTask_PWMOFF>
}
 8001fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001fee:	f001 ba25 	b.w	800343c <RCM_ExecUserConv>
 8001ff2:	bf00      	nop
 8001ff4:	20000678 	.word	0x20000678

08001ff8 <MC_RunMotorControlTasks>:
{
 8001ff8:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	@ (800200c <MC_RunMotorControlTasks+0x14>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b903      	cbnz	r3, 8002002 <MC_RunMotorControlTasks+0xa>
}
 8002000:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002002:	f7ff fea5 	bl	8001d50 <MC_Scheduler>
    TSK_SafetyTask();
 8002006:	f7ff ffe7 	bl	8001fd8 <TSK_SafetyTask>
}
 800200a:	bd08      	pop	{r3, pc}
 800200c:	20000678 	.word	0x20000678

08002010 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  ThreePwm_SwitchOffPWM(pwmcHandle[M1]);
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <TSK_HardwareFaultTask+0x18>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f005 fe4b 	bl	8007cb0 <ThreePwm_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800201a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800201e:	4803      	ldr	r0, [pc, #12]	@ (800202c <TSK_HardwareFaultTask+0x1c>)
 8002020:	2200      	movs	r2, #0
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	f7ff bbc6 	b.w	80017b4 <MCI_FaultProcessing>
 8002028:	20000680 	.word	0x20000680
 800202c:	20000650 	.word	0x20000650

08002030 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002030:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002032:	f7ff fb93 	bl	800175c <MC_GetSTMStateMotor1>
 8002036:	b918      	cbnz	r0, 8002040 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 800203c:	f7ff bb82 	b.w	8001744 <MC_StartMotor1>
}
 8002040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002044:	f7ff bb84 	b.w	8001750 <MC_StopMotor1>

08002048 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002048:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800204a:	4a3d      	ldr	r2, [pc, #244]	@ (8002140 <mc_lock_pins+0xf8>)
 800204c:	4b3d      	ldr	r3, [pc, #244]	@ (8002144 <mc_lock_pins+0xfc>)
 800204e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002050:	2110      	movs	r1, #16
 8002052:	61d1      	str	r1, [r2, #28]
 8002054:	b08f      	sub	sp, #60	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002056:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002058:	69d1      	ldr	r1, [r2, #28]
 800205a:	910d      	str	r1, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800205c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002060:	4939      	ldr	r1, [pc, #228]	@ (8002148 <mc_lock_pins+0x100>)
  (void) temp;
 8002062:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002064:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002066:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800206a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800206c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	910c      	str	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002072:	f44f 3081 	mov.w	r0, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002076:	f44f 7400 	mov.w	r4, #512	@ 0x200
  (void) temp;
 800207a:	990c      	ldr	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800207c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800207e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002080:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002082:	69d9      	ldr	r1, [r3, #28]
 8002084:	910b      	str	r1, [sp, #44]	@ 0x2c
  (void) temp;
 8002086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002088:	f44f 3184 	mov.w	r1, #67584	@ 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800208c:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002090:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002092:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002094:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002096:	69d9      	ldr	r1, [r3, #28]
 8002098:	910a      	str	r1, [sp, #40]	@ 0x28
  (void) temp;
 800209a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209c:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a0:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020aa:	69d9      	ldr	r1, [r3, #28]
 80020ac:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ae:	4927      	ldr	r1, [pc, #156]	@ (800214c <mc_lock_pins+0x104>)
  (void) temp;
 80020b0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b2:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b6:	f44f 35a0 	mov.w	r5, #81920	@ 0x14000
 80020ba:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020bc:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020be:	61cd      	str	r5, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020c0:	69cd      	ldr	r5, [r1, #28]
 80020c2:	9508      	str	r5, [sp, #32]
  (void) temp;
 80020c4:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020c6:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ca:	f44f 3590 	mov.w	r5, #73728	@ 0x12000
 80020ce:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020d0:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d2:	61cd      	str	r5, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020d4:	69cd      	ldr	r5, [r1, #28]
 80020d6:	9507      	str	r5, [sp, #28]
  (void) temp;
 80020d8:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020da:	f44f 4600 	mov.w	r6, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020de:	f44f 35c0 	mov.w	r5, #98304	@ 0x18000
 80020e2:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020e4:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e6:	61cd      	str	r5, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020e8:	69c9      	ldr	r1, [r1, #28]
 80020ea:	9106      	str	r1, [sp, #24]
  (void) temp;
 80020ec:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ee:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f2:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020f4:	69d1      	ldr	r1, [r2, #28]
 80020f6:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f8:	2008      	movs	r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020fa:	4915      	ldr	r1, [pc, #84]	@ (8002150 <mc_lock_pins+0x108>)
  (void) temp;
 80020fc:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020fe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002100:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002102:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002104:	69d1      	ldr	r1, [r2, #28]
 8002106:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002108:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210a:	4912      	ldr	r1, [pc, #72]	@ (8002154 <mc_lock_pins+0x10c>)
  (void) temp;
 800210c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002110:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002112:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002114:	69d4      	ldr	r4, [r2, #28]
 8002116:	9403      	str	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 800211c:	2001      	movs	r0, #1
  (void) temp;
 800211e:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002122:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002124:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002126:	69d2      	ldr	r2, [r2, #28]
 8002128:	9202      	str	r2, [sp, #8]
  (void) temp;
 800212a:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800212e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002130:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002136:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin);
LL_GPIO_LockPin(M1_BEMF_V_GPIO_Port, M1_BEMF_V_Pin);
LL_GPIO_LockPin(M1_BEMF_W_GPIO_Port, M1_BEMF_W_Pin);
LL_GPIO_LockPin(M1_BEMF_U_GPIO_Port, M1_BEMF_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
}
 8002138:	b00f      	add	sp, #60	@ 0x3c
 800213a:	bc70      	pop	{r4, r5, r6}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	48000800 	.word	0x48000800
 8002144:	00010010 	.word	0x00010010
 8002148:	00010100 	.word	0x00010100
 800214c:	48000400 	.word	0x48000400
 8002150:	00010008 	.word	0x00010008
 8002154:	00010002 	.word	0x00010002

08002158 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 800215c:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <RI_SetRegCommandParser+0xd0>)
{
 8002162:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8002164:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002168:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 800216a:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 800216e:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8002172:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8002176:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002178:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 800217a:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 800217e:	dd47      	ble.n	8002210 <RI_SetRegCommandParser+0xb8>
 8002180:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8002184:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002188:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800218c:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8002190:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002194:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002198:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800219a:	f001 0b07 	and.w	fp, r1, #7
 800219e:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 80021a2:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021a6:	fa0f fe84 	sxth.w	lr, r4
 80021aa:	f10d 0316 	add.w	r3, sp, #22
 80021ae:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80021b0:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 80021b2:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021b6:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 80021ba:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 80021be:	d11b      	bne.n	80021f8 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021c0:	f8cd e000 	str.w	lr, [sp]
 80021c4:	f85b bc08 	ldr.w	fp, [fp, #-8]
 80021c8:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 80021ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 80021ce:	eb06 030a 	add.w	r3, r6, sl
 80021d2:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 80021d4:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80021d6:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 80021d8:	b224      	sxth	r4, r4
        rxData = rxData+size;
 80021da:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80021de:	d013      	beq.n	8002208 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80021e0:	4546      	cmp	r6, r8
 80021e2:	d00d      	beq.n	8002200 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 80021e4:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	3301      	adds	r3, #1
 80021ec:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80021ee:	b1a0      	cbz	r0, 800221a <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80021f0:	2807      	cmp	r0, #7
 80021f2:	d001      	beq.n	80021f8 <RI_SetRegCommandParser+0xa0>
 80021f4:	280a      	cmp	r0, #10
 80021f6:	d10e      	bne.n	8002216 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 80021f8:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80021fa:	b009      	add	sp, #36	@ 0x24
 80021fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002200:	2008      	movs	r0, #8
}
 8002202:	b009      	add	sp, #36	@ 0x24
 8002204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8002208:	2c00      	cmp	r4, #0
 800220a:	d1e9      	bne.n	80021e0 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 800220c:	2800      	cmp	r0, #0
 800220e:	d1f4      	bne.n	80021fa <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8002210:	2000      	movs	r0, #0
 8002212:	81f8      	strh	r0, [r7, #14]
 8002214:	e7f1      	b.n	80021fa <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002216:	2301      	movs	r3, #1
 8002218:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 800221a:	2c00      	cmp	r4, #0
 800221c:	dcb6      	bgt.n	800218c <RI_SetRegCommandParser+0x34>
 800221e:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8002220:	2800      	cmp	r0, #0
 8002222:	d0f5      	beq.n	8002210 <RI_SetRegCommandParser+0xb8>
 8002224:	e7e9      	b.n	80021fa <RI_SetRegCommandParser+0xa2>
 8002226:	bf00      	nop
 8002228:	08002449 	.word	0x08002449
 800222c:	08002551 	.word	0x08002551

08002230 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002234:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 800223c:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 800223e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002242:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <RI_GetRegCommandParser+0x88>)
 8002244:	9304      	str	r3, [sp, #16]
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002248:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 800224c:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800224e:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002250:	f1b8 0f00 	cmp.w	r8, #0
 8002254:	d016      	beq.n	8002284 <RI_GetRegCommandParser+0x54>
 8002256:	4607      	mov	r7, r0
 8002258:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 800225a:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 800225c:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002260:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002264:	f001 0e07 	and.w	lr, r1, #7
 8002268:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 800226c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002270:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002272:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002276:	f10d 030e 	add.w	r3, sp, #14
 800227a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800227e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8002282:	d003      	beq.n	800228c <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8002284:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002286:	b006      	add	sp, #24
 8002288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800228c:	9500      	str	r5, [sp, #0]
 800228e:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8002292:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8002294:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8002298:	fa19 f383 	uxtah	r3, r9, r3
 800229c:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 800229e:	2800      	cmp	r0, #0
 80022a0:	d1f1      	bne.n	8002286 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 80022a2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80022a6:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022a8:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 80022aa:	440a      	add	r2, r1
          txData = txData+size;
 80022ac:	440e      	add	r6, r1
          pHandle->txLength += size;
 80022ae:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022b0:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1d2      	bne.n	800225c <RI_GetRegCommandParser+0x2c>
 80022b6:	e7e6      	b.n	8002286 <RI_GetRegCommandParser+0x56>
 80022b8:	08002981 	.word	0x08002981
 80022bc:	08002ab9 	.word	0x08002ab9

080022c0 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022c4:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022c6:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022c8:	f836 3b02 	ldrh.w	r3, [r6], #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022cc:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022ce:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022d0:	3a01      	subs	r2, #1
 80022d2:	b291      	uxth	r1, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022d4:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022d8:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022da:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022de:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
{
 80022e2:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022e4:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022e6:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022ea:	d03b      	beq.n	8002364 <MCP_ReceivedPacket+0xa4>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80022ec:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022ee:	4d45      	ldr	r5, [pc, #276]	@ (8002404 <MCP_ReceivedPacket+0x144>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022f0:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80022fa:	f04f 0e00 	mov.w	lr, #0

    switch (command)
 80022fe:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002302:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002304:	f8a4 e00e 	strh.w	lr, [r4, #14]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002308:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    switch (command)
 800230c:	d821      	bhi.n	8002352 <MCP_ReceivedPacket+0x92>
 800230e:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8002312:	d81e      	bhi.n	8002352 <MCP_ReceivedPacket+0x92>
 8002314:	e8df f00c 	tbb	[pc, ip]
 8002318:	1d1d1d48 	.word	0x1d1d1d48
 800231c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002320:	1d1d1d50 	.word	0x1d1d1d50
 8002324:	1d1d1d1d 	.word	0x1d1d1d1d
 8002328:	1d1d1d43 	.word	0x1d1d1d43
 800232c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002330:	1d1d1d3b 	.word	0x1d1d1d3b
 8002334:	1d1d1d1d 	.word	0x1d1d1d1d
 8002338:	1d1d1d35 	.word	0x1d1d1d35
 800233c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002340:	1d1d1d55 	.word	0x1d1d1d55
 8002344:	1d1d1d1d 	.word	0x1d1d1d1d
 8002348:	1d1d1d31 	.word	0x1d1d1d31
 800234c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002350:	5d          	.byte	0x5d
 8002351:	00          	.byte	0x00
 8002352:	2300      	movs	r3, #0
 8002354:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002356:	68a2      	ldr	r2, [r4, #8]
 8002358:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800235a:	89e3      	ldrh	r3, [r4, #14]
 800235c:	3301      	adds	r3, #1
 800235e:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002364:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8002368:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800236a:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800236e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002370:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002372:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002374:	d931      	bls.n	80023da <MCP_ReceivedPacket+0x11a>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002376:	200d      	movs	r0, #13
 8002378:	e7ed      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        if (IDLE == MCI_GetSTMState(pMCI))
 800237a:	4628      	mov	r0, r5
 800237c:	f7ff fa44 	bl	8001808 <MCI_GetSTMState>
 8002380:	b128      	cbz	r0, 800238e <MCP_ReceivedPacket+0xce>
          (void)MCI_StopMotor(pMCI);
 8002382:	4628      	mov	r0, r5
 8002384:	f7ff fa5c 	bl	8001840 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002388:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800238a:	2000      	movs	r0, #0
 800238c:	e7e3      	b.n	8002356 <MCP_ReceivedPacket+0x96>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800238e:	4628      	mov	r0, r5
 8002390:	f7ff fa40 	bl	8001814 <MCI_StartMotor>
 8002394:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002398:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800239a:	b2c0      	uxtb	r0, r0
 800239c:	e7db      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ff46 	bl	8002230 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023a4:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023a6:	e7d6      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        *pHandle->txBuffer = MCP_VERSION;
 80023a8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 80023aa:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 80023ac:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80023ae:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80023b0:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023b2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023b4:	2000      	movs	r0, #0
        break;
 80023b6:	e7ce      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff fecd 	bl	8002158 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023be:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023c0:	e7c9      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        if (RUN == MCI_GetSTMState(pMCI))
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff fa20 	bl	8001808 <MCI_GetSTMState>
 80023c8:	2806      	cmp	r0, #6
 80023ca:	d013      	beq.n	80023f4 <MCP_ReceivedPacket+0x134>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023cc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023ce:	2000      	movs	r0, #0
        break;
 80023d0:	e7c1      	b.n	8002356 <MCP_ReceivedPacket+0x96>
        (void)MCI_FaultAcknowledged(pMCI);
 80023d2:	4628      	mov	r0, r5
 80023d4:	f7ff fa50 	bl	8001878 <MCI_FaultAcknowledged>
 80023d8:	e7f8      	b.n	80023cc <MCP_ReceivedPacket+0x10c>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023da:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <MCP_ReceivedPacket+0x148>)
 80023dc:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80023e0:	b175      	cbz	r5, 8002400 <MCP_ReceivedPacket+0x140>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80023e2:	68a3      	ldr	r3, [r4, #8]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	b20a      	sxth	r2, r1
 80023e8:	f104 030e 	add.w	r3, r4, #14
 80023ec:	4631      	mov	r1, r6
 80023ee:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023f0:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80023f2:	e7b0      	b.n	8002356 <MCP_ReceivedPacket+0x96>
          MCI_StopRamp(pMCI);
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff fa6d 	bl	80018d4 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023fa:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023fc:	2000      	movs	r0, #0
 80023fe:	e7aa      	b.n	8002356 <MCP_ReceivedPacket+0x96>
 8002400:	462b      	mov	r3, r5
 8002402:	e7b8      	b.n	8002376 <MCP_ReceivedPacket+0xb6>
 8002404:	20000650 	.word	0x20000650
 8002408:	2000068c 	.word	0x2000068c

0800240c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800240c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800240e:	f003 f913 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <MX_MotorControl_Init+0x30>)
 8002414:	fba3 3000 	umull	r3, r0, r3, r0
 8002418:	09c0      	lsrs	r0, r0, #7
 800241a:	f002 fb55 	bl	8004ac8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <MX_MotorControl_Init+0x34>)
 8002420:	2200      	movs	r2, #0
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f002 fb04 	bl	8004a34 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800242c:	4805      	ldr	r0, [pc, #20]	@ (8002444 <MX_MotorControl_Init+0x38>)
 800242e:	f7ff fa8d 	bl	800194c <MCboot>
  mc_lock_pins();
}
 8002432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002436:	f7ff be07 	b.w	8002048 <mc_lock_pins>
 800243a:	bf00      	nop
 800243c:	10624dd3 	.word	0x10624dd3
 8002440:	20000370 	.word	0x20000370
 8002444:	20001818 	.word	0x20001818

08002448 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002448:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800244a:	3908      	subs	r1, #8
{
 800244c:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002450:	2920      	cmp	r1, #32
 8002452:	d812      	bhi.n	800247a <RI_SetRegisterGlobal+0x32>
 8002454:	e8df f001 	tbb	[pc, r1]
 8002458:	11111117 	.word	0x11111117
 800245c:	11111111 	.word	0x11111111
 8002460:	11111121 	.word	0x11111121
 8002464:	11111111 	.word	0x11111111
 8002468:	11111133 	.word	0x11111133
 800246c:	11111111 	.word	0x11111111
 8002470:	1111113d 	.word	0x1111113d
 8002474:	11111111 	.word	0x11111111
 8002478:	51          	.byte	0x51
 8002479:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800247a:	2200      	movs	r2, #0
 800247c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800247e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8002480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002484:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8002486:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002488:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 800248c:	bf14      	ite	ne
 800248e:	2005      	movne	r0, #5
 8002490:	2004      	moveq	r0, #4
}
 8002492:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8002496:	801a      	strh	r2, [r3, #0]
}
 8002498:	4770      	bx	lr
      switch (regID)
 800249a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800249e:	d04e      	beq.n	800253e <RI_SetRegisterGlobal+0xf6>
 80024a0:	d93e      	bls.n	8002520 <RI_SetRegisterGlobal+0xd8>
 80024a2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80024a6:	d04a      	beq.n	800253e <RI_SetRegisterGlobal+0xf6>
 80024a8:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024ac:	4290      	cmp	r0, r2
 80024ae:	bf0c      	ite	eq
 80024b0:	2004      	moveq	r0, #4
 80024b2:	2005      	movne	r0, #5
      *size = 2;
 80024b4:	2202      	movs	r2, #2
}
 80024b6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80024ba:	801a      	strh	r2, [r3, #0]
}
 80024bc:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80024be:	2818      	cmp	r0, #24
      *size = 4;
 80024c0:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80024c4:	bf14      	ite	ne
 80024c6:	2005      	movne	r0, #5
 80024c8:	4610      	moveq	r0, r2
}
 80024ca:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80024ce:	801a      	strh	r2, [r3, #0]
}
 80024d0:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80024d2:	2101      	movs	r1, #1
 80024d4:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024d6:	f992 0000 	ldrsb.w	r0, [r2]
 80024da:	b348      	cbz	r0, 8002530 <RI_SetRegisterGlobal+0xe8>
 80024dc:	fa1f f08c 	uxth.w	r0, ip
 80024e0:	e003      	b.n	80024ea <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80024e2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024e4:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80024e8:	b314      	cbz	r4, 8002530 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80024ea:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024ee:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80024f0:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024f4:	d3f5      	bcc.n	80024e2 <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80024f6:	2004      	movs	r0, #4
 80024f8:	e7c2      	b.n	8002480 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	3202      	adds	r2, #2
 80024fe:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002500:	fa1f fc8c 	uxth.w	ip, ip
 8002504:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002506:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002508:	d81b      	bhi.n	8002542 <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 800250a:	28a8      	cmp	r0, #168	@ 0xa8
 800250c:	d0f3      	beq.n	80024f6 <RI_SetRegisterGlobal+0xae>
 800250e:	d813      	bhi.n	8002538 <RI_SetRegisterGlobal+0xf0>
 8002510:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002514:	2828      	cmp	r0, #40	@ 0x28
 8002516:	d0ee      	beq.n	80024f6 <RI_SetRegisterGlobal+0xae>
 8002518:	2005      	movs	r0, #5
}
 800251a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002524:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002528:	bf0c      	ite	eq
 800252a:	2004      	moveq	r0, #4
 800252c:	2005      	movne	r0, #5
 800252e:	e7c1      	b.n	80024b4 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002530:	2300      	movs	r3, #0
 8002532:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002534:	2004      	movs	r0, #4
 8002536:	e7a3      	b.n	8002480 <RI_SetRegisterGlobal+0x38>
 8002538:	28e8      	cmp	r0, #232	@ 0xe8
 800253a:	d1ed      	bne.n	8002518 <RI_SetRegisterGlobal+0xd0>
 800253c:	e7db      	b.n	80024f6 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	e7b8      	b.n	80024b4 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002546:	200a      	movs	r0, #10
 8002548:	e79a      	b.n	8002480 <RI_SetRegisterGlobal+0x38>
 800254a:	bf00      	nop
 800254c:	0000      	movs	r0, r0
	...

08002550 <RI_SetRegisterMotor1>:
{
 8002550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002554:	b086      	sub	sp, #24
  switch(typeID)
 8002556:	3908      	subs	r1, #8
{
 8002558:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 800255c:	4614      	mov	r4, r2
 800255e:	461d      	mov	r5, r3
  switch(typeID)
 8002560:	2920      	cmp	r1, #32
 8002562:	d812      	bhi.n	800258a <RI_SetRegisterMotor1+0x3a>
 8002564:	e8df f001 	tbb	[pc, r1]
 8002568:	11111117 	.word	0x11111117
 800256c:	11111111 	.word	0x11111111
 8002570:	11111130 	.word	0x11111130
 8002574:	11111111 	.word	0x11111111
 8002578:	111111a0 	.word	0x111111a0
 800257c:	11111111 	.word	0x11111111
 8002580:	11111149 	.word	0x11111149
 8002584:	11111111 	.word	0x11111111
 8002588:	5e          	.byte	0x5e
 8002589:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800258a:	2300      	movs	r3, #0
 800258c:	802b      	strh	r3, [r5, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800258e:	2007      	movs	r0, #7
}
 8002590:	b006      	add	sp, #24
 8002592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 8002596:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 800259a:	f000 8164 	beq.w	8002866 <RI_SetRegisterMotor1+0x316>
 800259e:	f200 8092 	bhi.w	80026c6 <RI_SetRegisterMotor1+0x176>
 80025a2:	2848      	cmp	r0, #72	@ 0x48
 80025a4:	f000 8147 	beq.w	8002836 <RI_SetRegisterMotor1+0x2e6>
 80025a8:	2888      	cmp	r0, #136	@ 0x88
 80025aa:	f040 8158 	bne.w	800285e <RI_SetRegisterMotor1+0x30e>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80025ae:	7813      	ldrb	r3, [r2, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	f040 8090 	bne.w	80026d6 <RI_SetRegisterMotor1+0x186>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80025b6:	48b4      	ldr	r0, [pc, #720]	@ (8002888 <RI_SetRegisterMotor1+0x338>)
 80025b8:	f7ff f998 	bl	80018ec <MCI_GetMecSpeedRefUnit>
 80025bc:	2200      	movs	r2, #0
 80025be:	4601      	mov	r1, r0
 80025c0:	48b1      	ldr	r0, [pc, #708]	@ (8002888 <RI_SetRegisterMotor1+0x338>)
 80025c2:	f7ff f8e7 	bl	8001794 <MCI_ExecSpeedRamp>
 80025c6:	e086      	b.n	80026d6 <RI_SetRegisterMotor1+0x186>
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80025c8:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80025cc:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 80025ce:	d00e      	beq.n	80025ee <RI_SetRegisterMotor1+0x9e>
 80025d0:	f200 8092 	bhi.w	80026f8 <RI_SetRegisterMotor1+0x1a8>
 80025d4:	28d0      	cmp	r0, #208	@ 0xd0
 80025d6:	f000 814d 	beq.w	8002874 <RI_SetRegisterMotor1+0x324>
 80025da:	f240 8082 	bls.w	80026e2 <RI_SetRegisterMotor1+0x192>
 80025de:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80025e2:	f040 8097 	bne.w	8002714 <RI_SetRegisterMotor1+0x1c4>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80025e6:	48a9      	ldr	r0, [pc, #676]	@ (800288c <RI_SetRegisterMotor1+0x33c>)
 80025e8:	b209      	sxth	r1, r1
 80025ea:	f005 f83b 	bl	8007664 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 80025ee:	2000      	movs	r0, #0
      *size = 2;
 80025f0:	2302      	movs	r3, #2
 80025f2:	802b      	strh	r3, [r5, #0]
}
 80025f4:	b006      	add	sp, #24
 80025f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 80025fa:	2201      	movs	r2, #1
 80025fc:	802a      	strh	r2, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025fe:	f994 3000 	ldrsb.w	r3, [r4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8112 	beq.w	800282c <RI_SetRegisterMotor1+0x2dc>
 8002608:	fa1f f38c 	uxth.w	r3, ip
 800260c:	e005      	b.n	800261a <RI_SetRegisterMotor1+0xca>
    *size = *size + 1U;
 800260e:	802a      	strh	r2, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002610:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
 8002614:	2900      	cmp	r1, #0
 8002616:	f000 8109 	beq.w	800282c <RI_SetRegisterMotor1+0x2dc>
    *size = *size + 1U;
 800261a:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800261c:	4293      	cmp	r3, r2
    *size = *size + 1U;
 800261e:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002620:	d8f5      	bhi.n	800260e <RI_SetRegisterMotor1+0xbe>
 8002622:	e0b9      	b.n	8002798 <RI_SetRegisterMotor1+0x248>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002624:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8002626:	1c8a      	adds	r2, r1, #2
 8002628:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800262a:	fa1f f38c 	uxth.w	r3, ip
 800262e:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002630:	802a      	strh	r2, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 8002632:	f200 8102 	bhi.w	800283a <RI_SetRegisterMotor1+0x2ea>
        switch (regID)
 8002636:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800263a:	f000 8137 	beq.w	80028ac <RI_SetRegisterMotor1+0x35c>
 800263e:	f200 80ad 	bhi.w	800279c <RI_SetRegisterMotor1+0x24c>
 8002642:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002646:	f000 8138 	beq.w	80028ba <RI_SetRegisterMotor1+0x36a>
 800264a:	f240 80a0 	bls.w	800278e <RI_SetRegisterMotor1+0x23e>
 800264e:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002652:	f040 8098 	bne.w	8002786 <RI_SetRegisterMotor1+0x236>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002656:	f011 0607 	ands.w	r6, r1, #7
 800265a:	f040 8102 	bne.w	8002862 <RI_SetRegisterMotor1+0x312>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 800265e:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002660:	292f      	cmp	r1, #47	@ 0x2f
 8002662:	f200 80fe 	bhi.w	8002862 <RI_SetRegisterMotor1+0x312>
              for (i = 0; i <nbrOfPhase; i++)
 8002666:	08c9      	lsrs	r1, r1, #3
 8002668:	f000 80de 	beq.w	8002828 <RI_SetRegisterMotor1+0x2d8>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800266c:	f8df 8230 	ldr.w	r8, [pc, #560]	@ 80028a0 <RI_SetRegisterMotor1+0x350>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002670:	4f87      	ldr	r7, [pc, #540]	@ (8002890 <RI_SetRegisterMotor1+0x340>)
 8002672:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002676:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
              revUpPhase.hFinalPulse = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800267a:	88e3      	ldrh	r3, [r4, #6]
 800267c:	f8ad 3010 	strh.w	r3, [sp, #16]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002680:	f834 3f08 	ldrh.w	r3, [r4, #8]!
 8002684:	f8ad 300c 	strh.w	r3, [sp, #12]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002688:	fb88 1302 	smull	r1, r3, r8, r2
 800268c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002690:	b2f1      	uxtb	r1, r6
 8002692:	aa03      	add	r2, sp, #12
 8002694:	4638      	mov	r0, r7
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002696:	f8ad 300e 	strh.w	r3, [sp, #14]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 800269a:	f005 fc9b 	bl	8007fd4 <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 800269e:	42a5      	cmp	r5, r4
 80026a0:	f106 0601 	add.w	r6, r6, #1
 80026a4:	d1e7      	bne.n	8002676 <RI_SetRegisterMotor1+0x126>
 80026a6:	e0bf      	b.n	8002828 <RI_SetRegisterMotor1+0x2d8>
      switch (regID)
 80026a8:	2858      	cmp	r0, #88	@ 0x58
 80026aa:	f000 80e1 	beq.w	8002870 <RI_SetRegisterMotor1+0x320>
 80026ae:	2898      	cmp	r0, #152	@ 0x98
 80026b0:	f000 80c7 	beq.w	8002842 <RI_SetRegisterMotor1+0x2f2>
 80026b4:	2818      	cmp	r0, #24
 80026b6:	bf0c      	ite	eq
 80026b8:	2004      	moveq	r0, #4
 80026ba:	2005      	movne	r0, #5
      *size = 4;
 80026bc:	2304      	movs	r3, #4
 80026be:	802b      	strh	r3, [r5, #0]
}
 80026c0:	b006      	add	sp, #24
 80026c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026c6:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 80026ca:	f040 80c8 	bne.w	800285e <RI_SetRegisterMotor1+0x30e>
          PWMC_SetQuasiSynchState(&(&PWM_Handle_M1)->_Super, regdata8);
 80026ce:	7811      	ldrb	r1, [r2, #0]
 80026d0:	4870      	ldr	r0, [pc, #448]	@ (8002894 <RI_SetRegisterMotor1+0x344>)
 80026d2:	f005 f825 	bl	8007720 <PWMC_SetQuasiSynchState>
  uint8_t retVal = MCP_CMD_OK;
 80026d6:	2000      	movs	r0, #0
      *size = 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	802b      	strh	r3, [r5, #0]
}
 80026dc:	b006      	add	sp, #24
 80026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e2:	2890      	cmp	r0, #144	@ 0x90
 80026e4:	d104      	bne.n	80026f0 <RI_SetRegisterMotor1+0x1a0>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80026e6:	4869      	ldr	r0, [pc, #420]	@ (800288c <RI_SetRegisterMotor1+0x33c>)
 80026e8:	b209      	sxth	r1, r1
 80026ea:	f004 ff89 	bl	8007600 <PID_SetKP>
          break;
 80026ee:	e77e      	b.n	80025ee <RI_SetRegisterMotor1+0x9e>
      *size = 2;
 80026f0:	2302      	movs	r3, #2
          retVal = MCP_ERROR_UNKNOWN_REG;
 80026f2:	2005      	movs	r0, #5
      *size = 2;
 80026f4:	802b      	strh	r3, [r5, #0]
      break;
 80026f6:	e77d      	b.n	80025f4 <RI_SetRegisterMotor1+0xa4>
 80026f8:	f241 4390 	movw	r3, #5264	@ 0x1490
 80026fc:	4298      	cmp	r0, r3
 80026fe:	f000 80d1 	beq.w	80028a4 <RI_SetRegisterMotor1+0x354>
 8002702:	d927      	bls.n	8002754 <RI_SetRegisterMotor1+0x204>
 8002704:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002708:	4298      	cmp	r0, r3
 800270a:	d111      	bne.n	8002730 <RI_SetRegisterMotor1+0x1e0>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800270c:	485f      	ldr	r0, [pc, #380]	@ (800288c <RI_SetRegisterMotor1+0x33c>)
 800270e:	f004 ffb1 	bl	8007674 <PID_SetKDDivisorPOW2>
          break;
 8002712:	e76c      	b.n	80025ee <RI_SetRegisterMotor1+0x9e>
 8002714:	d3ec      	bcc.n	80026f0 <RI_SetRegisterMotor1+0x1a0>
 8002716:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800271a:	f43f af68 	beq.w	80025ee <RI_SetRegisterMotor1+0x9e>
 800271e:	d8e7      	bhi.n	80026f0 <RI_SetRegisterMotor1+0x1a0>
 8002720:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002724:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002728:	bf0c      	ite	eq
 800272a:	2004      	moveq	r0, #4
 800272c:	2005      	movne	r0, #5
 800272e:	e75f      	b.n	80025f0 <RI_SetRegisterMotor1+0xa0>
 8002730:	f241 43cf 	movw	r3, #5327	@ 0x14cf
 8002734:	4298      	cmp	r0, r3
 8002736:	d9db      	bls.n	80026f0 <RI_SetRegisterMotor1+0x1a0>
 8002738:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800273c:	4298      	cmp	r0, r3
 800273e:	d078      	beq.n	8002832 <RI_SetRegisterMotor1+0x2e2>
 8002740:	d910      	bls.n	8002764 <RI_SetRegisterMotor1+0x214>
 8002742:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002746:	f641 3390 	movw	r3, #7056	@ 0x1b90
 800274a:	4298      	cmp	r0, r3
 800274c:	bf0c      	ite	eq
 800274e:	2004      	moveq	r0, #4
 8002750:	2005      	movne	r0, #5
 8002752:	e74d      	b.n	80025f0 <RI_SetRegisterMotor1+0xa0>
 8002754:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002758:	4298      	cmp	r0, r3
 800275a:	d1c9      	bne.n	80026f0 <RI_SetRegisterMotor1+0x1a0>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800275c:	484b      	ldr	r0, [pc, #300]	@ (800288c <RI_SetRegisterMotor1+0x33c>)
 800275e:	f004 ff5f 	bl	8007620 <PID_SetKPDivisorPOW2>
          break;
 8002762:	e744      	b.n	80025ee <RI_SetRegisterMotor1+0x9e>
 8002764:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002768:	f641 3210 	movw	r2, #6928	@ 0x1b10
 800276c:	4293      	cmp	r3, r2
 800276e:	d060      	beq.n	8002832 <RI_SetRegisterMotor1+0x2e2>
 8002770:	f641 2390 	movw	r3, #6800	@ 0x1a90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002774:	4298      	cmp	r0, r3
 8002776:	bf0c      	ite	eq
 8002778:	2004      	moveq	r0, #4
 800277a:	2005      	movne	r0, #5
 800277c:	e738      	b.n	80025f0 <RI_SetRegisterMotor1+0xa0>
 800277e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002782:	2828      	cmp	r0, #40	@ 0x28
 8002784:	d008      	beq.n	8002798 <RI_SetRegisterMotor1+0x248>
 8002786:	2005      	movs	r0, #5
}
 8002788:	b006      	add	sp, #24
 800278a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800278e:	28a8      	cmp	r0, #168	@ 0xa8
 8002790:	d002      	beq.n	8002798 <RI_SetRegisterMotor1+0x248>
 8002792:	d9f4      	bls.n	800277e <RI_SetRegisterMotor1+0x22e>
 8002794:	28e8      	cmp	r0, #232	@ 0xe8
 8002796:	d1f6      	bne.n	8002786 <RI_SetRegisterMotor1+0x236>
      retVal = MCP_ERROR_RO_REG;
 8002798:	2004      	movs	r0, #4
 800279a:	e6f9      	b.n	8002590 <RI_SetRegisterMotor1+0x40>
 800279c:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 80027a0:	f000 8098 	beq.w	80028d4 <RI_SetRegisterMotor1+0x384>
 80027a4:	f640 0328 	movw	r3, #2088	@ 0x828
 80027a8:	4298      	cmp	r0, r3
 80027aa:	d1ec      	bne.n	8002786 <RI_SetRegisterMotor1+0x236>
            BemfOnAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027ac:	8860      	ldrh	r0, [r4, #2]
 80027ae:	0300      	lsls	r0, r0, #12
 80027b0:	f7fd ffae 	bl	8000710 <__aeabi_i2d>
 80027b4:	a332      	add	r3, pc, #200	@ (adr r3, 8002880 <RI_SetRegisterMotor1+0x330>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fd2d 	bl	8000218 <__aeabi_dmul>
 80027be:	f7fe f811 	bl	80007e4 <__aeabi_d2uiz>
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c2:	88a2      	ldrh	r2, [r4, #4]
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 80027c4:	0103      	lsls	r3, r0, #4
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c6:	0310      	lsls	r0, r2, #12
            BemfOnAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c8:	f8ad 300e 	strh.w	r3, [sp, #14]
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027cc:	f7fd ffa0 	bl	8000710 <__aeabi_i2d>
 80027d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8002880 <RI_SetRegisterMotor1+0x330>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd fd1f 	bl	8000218 <__aeabi_dmul>
 80027da:	f7fe f803 	bl	80007e4 <__aeabi_d2uiz>
            BemfOnAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027de:	88e3      	ldrh	r3, [r4, #6]
 80027e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <RI_SetRegisterMotor1+0x348>)
 80027e2:	f241 6522 	movw	r5, #5666	@ 0x1622
 80027e6:	fb05 f303 	mul.w	r3, r5, r3
 80027ea:	fba2 1303 	umull	r1, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 80027f0:	0101      	lsls	r1, r0, #4
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027f2:	f8ad 100c 	strh.w	r1, [sp, #12]
            BemfOnAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027f6:	f8ad 3010 	strh.w	r3, [sp, #16]
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027fa:	8961      	ldrh	r1, [r4, #10]
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027fc:	8923      	ldrh	r3, [r4, #8]
            (void)BADC_SetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &BemfOnAdcConfig,&OnSensingEnThres,&OnSensingHisteresys);
 80027fe:	4827      	ldr	r0, [pc, #156]	@ (800289c <RI_SetRegisterMotor1+0x34c>)
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002800:	fb05 f403 	mul.w	r4, r5, r3
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002804:	fb05 f101 	mul.w	r1, r5, r1
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002808:	fba2 3404 	umull	r3, r4, r2, r4
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800280c:	fba2 2101 	umull	r2, r1, r2, r1
 8002810:	0949      	lsrs	r1, r1, #5
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002812:	0964      	lsrs	r4, r4, #5
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002814:	f8ad 1004 	strh.w	r1, [sp, #4]
            (void)BADC_SetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &BemfOnAdcConfig,&OnSensingEnThres,&OnSensingHisteresys);
 8002818:	ab01      	add	r3, sp, #4
 800281a:	f10d 0202 	add.w	r2, sp, #2
 800281e:	a903      	add	r1, sp, #12
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002820:	f8ad 4002 	strh.w	r4, [sp, #2]
            (void)BADC_SetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &BemfOnAdcConfig,&OnSensingEnThres,&OnSensingHisteresys);
 8002824:	f004 fd08 	bl	8007238 <BADC_SetBemfOnTimeSensorlessParam>
  uint8_t retVal = MCP_CMD_OK;
 8002828:	2000      	movs	r0, #0
 800282a:	e6b1      	b.n	8002590 <RI_SetRegisterMotor1+0x40>
    *tempdestString = (int8_t)0;
 800282c:	2300      	movs	r3, #0
 800282e:	7023      	strb	r3, [r4, #0]
 8002830:	e7b2      	b.n	8002798 <RI_SetRegisterMotor1+0x248>
 8002832:	2004      	movs	r0, #4
 8002834:	e6dc      	b.n	80025f0 <RI_SetRegisterMotor1+0xa0>
            retVal = MCP_ERROR_RO_REG;
 8002836:	2004      	movs	r0, #4
 8002838:	e74e      	b.n	80026d8 <RI_SetRegisterMotor1+0x188>
        *size = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800283e:	200a      	movs	r0, #10
 8002840:	e6a6      	b.n	8002590 <RI_SetRegisterMotor1+0x40>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002842:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002846:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <RI_SetRegisterMotor1+0x350>)
 8002848:	480f      	ldr	r0, [pc, #60]	@ (8002888 <RI_SetRegisterMotor1+0x338>)
 800284a:	fb81 2103 	smull	r2, r1, r1, r3
 800284e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002852:	2200      	movs	r2, #0
 8002854:	b209      	sxth	r1, r1
 8002856:	f7fe ff9d 	bl	8001794 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800285a:	2000      	movs	r0, #0
          break;
 800285c:	e72e      	b.n	80026bc <RI_SetRegisterMotor1+0x16c>
 800285e:	2005      	movs	r0, #5
 8002860:	e73a      	b.n	80026d8 <RI_SetRegisterMotor1+0x188>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002862:	200a      	movs	r0, #10
            break;
 8002864:	e694      	b.n	8002590 <RI_SetRegisterMotor1+0x40>
          PWMC_SetFastDemagState(&(&PWM_Handle_M1)->_Super, regdata8);
 8002866:	7811      	ldrb	r1, [r2, #0]
 8002868:	480a      	ldr	r0, [pc, #40]	@ (8002894 <RI_SetRegisterMotor1+0x344>)
 800286a:	f004 ff53 	bl	8007714 <PWMC_SetFastDemagState>
          break;
 800286e:	e732      	b.n	80026d6 <RI_SetRegisterMotor1+0x186>
          retVal = MCP_ERROR_RO_REG;
 8002870:	2004      	movs	r0, #4
 8002872:	e723      	b.n	80026bc <RI_SetRegisterMotor1+0x16c>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002874:	4805      	ldr	r0, [pc, #20]	@ (800288c <RI_SetRegisterMotor1+0x33c>)
 8002876:	b209      	sxth	r1, r1
 8002878:	f004 fec4 	bl	8007604 <PID_SetKI>
          break;
 800287c:	e6b7      	b.n	80025ee <RI_SetRegisterMotor1+0x9e>
 800287e:	bf00      	nop
 8002880:	2d7cbcf7 	.word	0x2d7cbcf7
 8002884:	3f0ca64d 	.word	0x3f0ca64d
 8002888:	20000650 	.word	0x20000650
 800288c:	20000264 	.word	0x20000264
 8002890:	200001dc 	.word	0x200001dc
 8002894:	2000005c 	.word	0x2000005c
 8002898:	51eb851f 	.word	0x51eb851f
 800289c:	200000a8 	.word	0x200000a8
 80028a0:	2aaaaaab 	.word	0x2aaaaaab
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028a4:	482e      	ldr	r0, [pc, #184]	@ (8002960 <RI_SetRegisterMotor1+0x410>)
 80028a6:	f004 fec9 	bl	800763c <PID_SetKIDivisorPOW2>
          break;
 80028aa:	e6a0      	b.n	80025ee <RI_SetRegisterMotor1+0x9e>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80028ac:	482d      	ldr	r0, [pc, #180]	@ (8002964 <RI_SetRegisterMotor1+0x414>)
 80028ae:	1ca1      	adds	r1, r4, #2
}
 80028b0:	b006      	add	sp, #24
 80028b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80028b6:	f004 bdd9 	b.w	800746c <MCPA_cfgLog>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80028ba:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80028be:	492a      	ldr	r1, [pc, #168]	@ (8002968 <RI_SetRegisterMotor1+0x418>)
 80028c0:	88e2      	ldrh	r2, [r4, #6]
 80028c2:	fb81 0103 	smull	r0, r1, r1, r3
 80028c6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80028ca:	4828      	ldr	r0, [pc, #160]	@ (800296c <RI_SetRegisterMotor1+0x41c>)
 80028cc:	b209      	sxth	r1, r1
 80028ce:	f7fe ff61 	bl	8001794 <MCI_ExecSpeedRamp>
            break;
 80028d2:	e7a9      	b.n	8002828 <RI_SetRegisterMotor1+0x2d8>
            BemfAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028d4:	8860      	ldrh	r0, [r4, #2]
 80028d6:	0300      	lsls	r0, r0, #12
 80028d8:	f7fd ff1a 	bl	8000710 <__aeabi_i2d>
 80028dc:	a31e      	add	r3, pc, #120	@ (adr r3, 8002958 <RI_SetRegisterMotor1+0x408>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fc99 	bl	8000218 <__aeabi_dmul>
 80028e6:	f7fd ff7d 	bl	80007e4 <__aeabi_d2uiz>
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028ea:	88a2      	ldrh	r2, [r4, #4]
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 80028ec:	0103      	lsls	r3, r0, #4
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028ee:	0310      	lsls	r0, r2, #12
            BemfAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028f0:	f8ad 3006 	strh.w	r3, [sp, #6]
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028f4:	f7fd ff0c 	bl	8000710 <__aeabi_i2d>
 80028f8:	a317      	add	r3, pc, #92	@ (adr r3, 8002958 <RI_SetRegisterMotor1+0x408>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fc8b 	bl	8000218 <__aeabi_dmul>
 8002902:	f7fd ff6f 	bl	80007e4 <__aeabi_d2uiz>
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002906:	88e2      	ldrh	r2, [r4, #6]
 8002908:	4919      	ldr	r1, [pc, #100]	@ (8002970 <RI_SetRegisterMotor1+0x420>)
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 800290a:	8923      	ldrh	r3, [r4, #8]
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800290c:	f241 6522 	movw	r5, #5666	@ 0x1622
 8002910:	fb05 f202 	mul.w	r2, r5, r2
 8002914:	fba1 1202 	umull	r1, r2, r1, r2
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 8002918:	4916      	ldr	r1, [pc, #88]	@ (8002974 <RI_SetRegisterMotor1+0x424>)
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	fba1 1303 	umull	r1, r3, r1, r3
 8002920:	091b      	lsrs	r3, r3, #4
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002922:	89a1      	ldrh	r1, [r4, #12]
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 8002924:	f8ad 3002 	strh.w	r3, [sp, #2]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <RI_SetRegisterMotor1+0x428>)
            bemfAdcDemagConfig.DemagMinimumThreshold = *(uint16_t *)&rawData[8]; //cstat !MISRAC2012-Rule-11.3
 800292a:	8964      	ldrh	r4, [r4, #10]
 800292c:	f8ad 4012 	strh.w	r4, [sp, #18]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002930:	fba3 3101 	umull	r3, r1, r3, r1
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 8002934:	0100      	lsls	r0, r0, #4
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002936:	0952      	lsrs	r2, r2, #5
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002938:	0889      	lsrs	r1, r1, #2
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 800293a:	f8ad 0004 	strh.w	r0, [sp, #4]
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800293e:	f8ad 2008 	strh.w	r2, [sp, #8]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002942:	f8ad 100c 	strh.w	r1, [sp, #12]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&Zc2CommDelay,&bemfAdcDemagConfig);
 8002946:	480d      	ldr	r0, [pc, #52]	@ (800297c <RI_SetRegisterMotor1+0x42c>)
 8002948:	ab03      	add	r3, sp, #12
 800294a:	f10d 0202 	add.w	r2, sp, #2
 800294e:	a901      	add	r1, sp, #4
 8002950:	f004 fc62 	bl	8007218 <BADC_SetBemfSensorlessParam>
            break;
 8002954:	e768      	b.n	8002828 <RI_SetRegisterMotor1+0x2d8>
 8002956:	bf00      	nop
 8002958:	2d7cbcf7 	.word	0x2d7cbcf7
 800295c:	3f0ca64d 	.word	0x3f0ca64d
 8002960:	20000264 	.word	0x20000264
 8002964:	200002a0 	.word	0x200002a0
 8002968:	2aaaaaab 	.word	0x2aaaaaab
 800296c:	20000650 	.word	0x20000650
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	88888889 	.word	0x88888889
 8002978:	aaaaaaab 	.word	0xaaaaaaab
 800297c:	200000a8 	.word	0x200000a8

08002980 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002980:	b510      	push	{r4, lr}
    switch (typeID)
 8002982:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002986:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 800298a:	f1bc 0f20 	cmp.w	ip, #32
 800298e:	d812      	bhi.n	80029b6 <RI_GetRegisterGlobal+0x36>
 8002990:	e8df f00c 	tbb	[pc, ip]
 8002994:	1111111b 	.word	0x1111111b
 8002998:	11111111 	.word	0x11111111
 800299c:	11111127 	.word	0x11111127
 80029a0:	11111111 	.word	0x11111111
 80029a4:	11111122 	.word	0x11111122
 80029a8:	11111111 	.word	0x11111111
 80029ac:	11111135 	.word	0x11111135
 80029b0:	11111111 	.word	0x11111111
 80029b4:	13          	.byte	0x13
 80029b5:	00          	.byte	0x00
 80029b6:	2007      	movs	r0, #7
}
 80029b8:	bd10      	pop	{r4, pc}
        switch (regID)
 80029ba:	2828      	cmp	r0, #40	@ 0x28
 80029bc:	d044      	beq.n	8002a48 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80029c2:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80029c4:	b292      	uxth	r2, r2
 80029c6:	801a      	strh	r2, [r3, #0]
}
 80029c8:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80029ca:	f1be 0f00 	cmp.w	lr, #0
 80029ce:	dd39      	ble.n	8002a44 <RI_GetRegisterGlobal+0xc4>
 80029d0:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80029d2:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80029d4:	2005      	movs	r0, #5
}
 80029d6:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 80029d8:	f1be 0f03 	cmp.w	lr, #3
 80029dc:	dd2a      	ble.n	8002a34 <RI_GetRegisterGlobal+0xb4>
 80029de:	2204      	movs	r2, #4
 80029e0:	e7f7      	b.n	80029d2 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 80029e2:	f1be 0f01 	cmp.w	lr, #1
 80029e6:	dd25      	ble.n	8002a34 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 80029e8:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80029ec:	d05a      	beq.n	8002aa4 <RI_GetRegisterGlobal+0x124>
 80029ee:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80029f2:	bf0c      	ite	eq
 80029f4:	2000      	moveq	r0, #0
 80029f6:	2005      	movne	r0, #5
          *size = 2;
 80029f8:	2202      	movs	r2, #2
 80029fa:	801a      	strh	r2, [r3, #0]
}
 80029fc:	bd10      	pop	{r4, pc}
        switch (regID)
 80029fe:	2820      	cmp	r0, #32
 8002a00:	d02c      	beq.n	8002a5c <RI_GetRegisterGlobal+0xdc>
 8002a02:	2860      	cmp	r0, #96	@ 0x60
 8002a04:	d118      	bne.n	8002a38 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a06:	4c28      	ldr	r4, [pc, #160]	@ (8002aa8 <RI_GetRegisterGlobal+0x128>)
 8002a08:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a10:	b1a0      	cbz	r0, 8002a3c <RI_GetRegisterGlobal+0xbc>
 8002a12:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a16:	46a4      	mov	ip, r4
 8002a18:	e008      	b.n	8002a2c <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8002a1a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002a1e:	8819      	ldrh	r1, [r3, #0]
 8002a20:	3101      	adds	r1, #1
 8002a22:	b289      	uxth	r1, r1
 8002a24:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a26:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002a2a:	b138      	cbz	r0, 8002a3c <RI_GetRegisterGlobal+0xbc>
 8002a2c:	4571      	cmp	r1, lr
 8002a2e:	d3f4      	bcc.n	8002a1a <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002a30:	2006      	movs	r0, #6
}
 8002a32:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a34:	2008      	movs	r0, #8
}
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	2200      	movs	r2, #0
 8002a3a:	e7ca      	b.n	80029d2 <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a44:	4608      	mov	r0, r1
}
 8002a46:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a48:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a4c:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a4e:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a52:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a54:	d81a      	bhi.n	8002a8c <RI_GetRegisterGlobal+0x10c>
 8002a56:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a58:	2008      	movs	r0, #8
 8002a5a:	e7b4      	b.n	80029c6 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a5c:	4c13      	ldr	r4, [pc, #76]	@ (8002aac <RI_GetRegisterGlobal+0x12c>)
 8002a5e:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002a62:	2101      	movs	r1, #1
 8002a64:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d0e8      	beq.n	8002a3c <RI_GetRegisterGlobal+0xbc>
 8002a6a:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a6e:	46a4      	mov	ip, r4
 8002a70:	e009      	b.n	8002a86 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8002a72:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002a76:	8819      	ldrh	r1, [r3, #0]
 8002a78:	3101      	adds	r1, #1
 8002a7a:	b289      	uxth	r1, r1
 8002a7c:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a7e:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d0da      	beq.n	8002a3c <RI_GetRegisterGlobal+0xbc>
 8002a86:	458e      	cmp	lr, r1
 8002a88:	d8f3      	bhi.n	8002a72 <RI_GetRegisterGlobal+0xf2>
 8002a8a:	e7d1      	b.n	8002a30 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a8c:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <RI_GetRegisterGlobal+0x130>)
 8002a8e:	6848      	ldr	r0, [r1, #4]
 8002a90:	680c      	ldr	r4, [r1, #0]
 8002a92:	8909      	ldrh	r1, [r1, #8]
 8002a94:	f8c2 0006 	str.w	r0, [r2, #6]
 8002a98:	f8c2 4002 	str.w	r4, [r2, #2]
 8002a9c:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002a9e:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	e790      	b.n	80029c6 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	e7a7      	b.n	80029f8 <RI_GetRegisterGlobal+0x78>
 8002aa8:	080086dc 	.word	0x080086dc
 8002aac:	080086b4 	.word	0x080086b4
 8002ab0:	080086a8 	.word	0x080086a8
 8002ab4:	00000000 	.word	0x00000000

08002ab8 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	461d      	mov	r5, r3
    switch (typeID)
 8002ac0:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ac4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8002ac8:	4614      	mov	r4, r2
    switch (typeID)
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d812      	bhi.n	8002af4 <RI_GetRegisterMotor1+0x3c>
 8002ace:	e8df f003 	tbb	[pc, r3]
 8002ad2:	112f      	.short	0x112f
 8002ad4:	11111111 	.word	0x11111111
 8002ad8:	11491111 	.word	0x11491111
 8002adc:	11111111 	.word	0x11111111
 8002ae0:	116b1111 	.word	0x116b1111
 8002ae4:	11111111 	.word	0x11111111
 8002ae8:	117e1111 	.word	0x117e1111
 8002aec:	11111111 	.word	0x11111111
 8002af0:	1111      	.short	0x1111
 8002af2:	15          	.byte	0x15
 8002af3:	00          	.byte	0x00
 8002af4:	2007      	movs	r0, #7
  }
 8002af6:	b006      	add	sp, #24
 8002af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 8002afc:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002b00:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002b04:	f000 8237 	beq.w	8002f76 <RI_GetRegisterMotor1+0x4be>
 8002b08:	d879      	bhi.n	8002bfe <RI_GetRegisterMotor1+0x146>
 8002b0a:	28a8      	cmp	r0, #168	@ 0xa8
 8002b0c:	f000 8229 	beq.w	8002f62 <RI_GetRegisterMotor1+0x4aa>
 8002b10:	28e8      	cmp	r0, #232	@ 0xe8
 8002b12:	d166      	bne.n	8002be2 <RI_GetRegisterMotor1+0x12a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b14:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002b18:	220b      	movs	r2, #11
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b1a:	f1bc 0f0c 	cmp.w	ip, #12
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002b1e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b20:	f200 8177 	bhi.w	8002e12 <RI_GetRegisterMotor1+0x35a>
 8002b24:	230d      	movs	r3, #13
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b26:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002b28:	802b      	strh	r3, [r5, #0]
  }
 8002b2a:	b006      	add	sp, #24
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 8002b30:	f1bc 0f00 	cmp.w	ip, #0
 8002b34:	f340 81ae 	ble.w	8002e94 <RI_GetRegisterMotor1+0x3dc>
          switch (regID)
 8002b38:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 8002b3c:	f000 81c4 	beq.w	8002ec8 <RI_GetRegisterMotor1+0x410>
 8002b40:	f200 80d3 	bhi.w	8002cea <RI_GetRegisterMotor1+0x232>
 8002b44:	2848      	cmp	r0, #72	@ 0x48
 8002b46:	f000 81c3 	beq.w	8002ed0 <RI_GetRegisterMotor1+0x418>
 8002b4a:	2888      	cmp	r0, #136	@ 0x88
 8002b4c:	f040 81a4 	bne.w	8002e98 <RI_GetRegisterMotor1+0x3e0>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002b50:	48b9      	ldr	r0, [pc, #740]	@ (8002e38 <RI_GetRegisterMotor1+0x380>)
 8002b52:	f7fe fea9 	bl	80018a8 <MCI_GetControlMode>
 8002b56:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b58:	2000      	movs	r0, #0
          *size = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	802b      	strh	r3, [r5, #0]
  }
 8002b5e:	b006      	add	sp, #24
 8002b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 2)
 8002b64:	f1bc 0f01 	cmp.w	ip, #1
 8002b68:	f340 8117 	ble.w	8002d9a <RI_GetRegisterMotor1+0x2e2>
          switch (regID)
 8002b6c:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002b70:	4298      	cmp	r0, r3
 8002b72:	f000 8221 	beq.w	8002fb8 <RI_GetRegisterMotor1+0x500>
 8002b76:	f240 80d9 	bls.w	8002d2c <RI_GetRegisterMotor1+0x274>
 8002b7a:	f641 3310 	movw	r3, #6928	@ 0x1b10
 8002b7e:	4298      	cmp	r0, r3
 8002b80:	f000 8215 	beq.w	8002fae <RI_GetRegisterMotor1+0x4f6>
 8002b84:	f240 80c4 	bls.w	8002d10 <RI_GetRegisterMotor1+0x258>
 8002b88:	f641 3390 	movw	r3, #7056	@ 0x1b90
 8002b8c:	4298      	cmp	r0, r3
 8002b8e:	f000 8208 	beq.w	8002fa2 <RI_GetRegisterMotor1+0x4ea>
 8002b92:	f641 33d0 	movw	r3, #7120	@ 0x1bd0
 8002b96:	4298      	cmp	r0, r3
 8002b98:	f040 80af 	bne.w	8002cfa <RI_GetRegisterMotor1+0x242>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 2);
 8002b9c:	48a7      	ldr	r0, [pc, #668]	@ (8002e3c <RI_GetRegisterMotor1+0x384>)
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	f004 fb20 	bl	80071e4 <BADC_GetLastBemfValue>
 8002ba4:	8020      	strh	r0, [r4, #0]
              break;
 8002ba6:	e0cc      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
        if (freeSpace >= 4)
 8002ba8:	f1bc 0f03 	cmp.w	ip, #3
 8002bac:	f340 80f5 	ble.w	8002d9a <RI_GetRegisterMotor1+0x2e2>
          switch (regID)
 8002bb0:	2858      	cmp	r0, #88	@ 0x58
 8002bb2:	f000 8181 	beq.w	8002eb8 <RI_GetRegisterMotor1+0x400>
 8002bb6:	2898      	cmp	r0, #152	@ 0x98
 8002bb8:	f000 8176 	beq.w	8002ea8 <RI_GetRegisterMotor1+0x3f0>
 8002bbc:	2818      	cmp	r0, #24
 8002bbe:	f000 816d 	beq.w	8002e9c <RI_GetRegisterMotor1+0x3e4>
 8002bc2:	2005      	movs	r0, #5
          *size = 4;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	802b      	strh	r3, [r5, #0]
  }
 8002bc8:	b006      	add	sp, #24
 8002bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 8002bce:	28a0      	cmp	r0, #160	@ 0xa0
 8002bd0:	f000 8104 	beq.w	8002ddc <RI_GetRegisterMotor1+0x324>
 8002bd4:	28e0      	cmp	r0, #224	@ 0xe0
 8002bd6:	f000 80e4 	beq.w	8002da2 <RI_GetRegisterMotor1+0x2ea>
            *size= 0 ; /* */
 8002bda:	2300      	movs	r3, #0
 8002bdc:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002bde:	2005      	movs	r0, #5
            break;
 8002be0:	e789      	b.n	8002af6 <RI_GetRegisterMotor1+0x3e>
 8002be2:	2868      	cmp	r0, #104	@ 0x68
 8002be4:	f040 8178 	bne.w	8002ed8 <RI_GetRegisterMotor1+0x420>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002be8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002bec:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bee:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002bf2:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bf4:	f200 8134 	bhi.w	8002e60 <RI_GetRegisterMotor1+0x3a8>
 8002bf8:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002bfa:	2008      	movs	r0, #8
 8002bfc:	e794      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
 8002bfe:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 8002c02:	f000 816e 	beq.w	8002ee2 <RI_GetRegisterMotor1+0x42a>
 8002c06:	f640 0328 	movw	r3, #2088	@ 0x828
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	d142      	bne.n	8002c94 <RI_GetRegisterMotor1+0x1dc>
            (void)BADC_GetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &bemfOnAdcConfig,&OnSensingEnThres,&OnSensingDisThres);
 8002c0e:	ab01      	add	r3, sp, #4
 8002c10:	f10d 0202 	add.w	r2, sp, #2
 8002c14:	4889      	ldr	r0, [pc, #548]	@ (8002e3c <RI_GetRegisterMotor1+0x384>)
 8002c16:	a903      	add	r1, sp, #12
 8002c18:	f004 fb2c 	bl	8007274 <BADC_GetBemfOnTimeSensorlessParam>
                                      (bemfOnAdcConfig.AdcThresholdUp >> 4)) / 4096);
 8002c1c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002c20:	0900      	lsrs	r0, r0, #4
 8002c22:	f7fd fd75 	bl	8000710 <__aeabi_i2d>
 8002c26:	a382      	add	r3, pc, #520	@ (adr r3, 8002e30 <RI_GetRegisterMotor1+0x378>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd faf4 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c30:	f7fd fdd8 	bl	80007e4 <__aeabi_d2uiz>
                                      (bemfOnAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002c34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c38:	8060      	strh	r0, [r4, #2]
                                      (bemfOnAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002c3a:	0918      	lsrs	r0, r3, #4
 8002c3c:	f7fd fd68 	bl	8000710 <__aeabi_i2d>
 8002c40:	a37b      	add	r3, pc, #492	@ (adr r3, 8002e30 <RI_GetRegisterMotor1+0x378>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fae7 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c4a:	f7fd fdcb 	bl	80007e4 <__aeabi_d2uiz>
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c52:	f8bd 1010 	ldrh.w	r1, [sp, #16]
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c56:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c5a:	80a0      	strh	r0, [r4, #4]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c5c:	2664      	movs	r6, #100	@ 0x64
 8002c5e:	4878      	ldr	r0, [pc, #480]	@ (8002e40 <RI_GetRegisterMotor1+0x388>)
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c60:	fb06 f202 	mul.w	r2, r6, r2
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c64:	fb06 f101 	mul.w	r1, r6, r1
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c68:	fb06 f303 	mul.w	r3, r6, r3
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	fba0 6202 	umull	r6, r2, r0, r2
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c72:	0849      	lsrs	r1, r1, #1
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c74:	085b      	lsrs	r3, r3, #1
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c76:	fba0 6101 	umull	r6, r1, r0, r1
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c7a:	0ad2      	lsrs	r2, r2, #11
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c7c:	fba0 0303 	umull	r0, r3, r0, r3
 8002c80:	0adb      	lsrs	r3, r3, #11
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c82:	0ac9      	lsrs	r1, r1, #11
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c84:	8122      	strh	r2, [r4, #8]
            *rawSize = 10;
 8002c86:	220a      	movs	r2, #10
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c88:	8163      	strh	r3, [r4, #10]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c8a:	80e1      	strh	r1, [r4, #6]
            *rawSize = 10;
 8002c8c:	8022      	strh	r2, [r4, #0]
            break;
 8002c8e:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8002c90:	2000      	movs	r0, #0
 8002c92:	e749      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
 8002c94:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002c98:	f040 811e 	bne.w	8002ed8 <RI_GetRegisterMotor1+0x420>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c9c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002ca0:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ca2:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002ca6:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ca8:	f240 80b0 	bls.w	8002e0c <RI_GetRegisterMotor1+0x354>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8002cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e5c <RI_GetRegisterMotor1+0x3a4>
 8002cb0:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cb2:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8002cb4:	b2f1      	uxtb	r1, r6
 8002cb6:	aa03      	add	r2, sp, #12
 8002cb8:	4640      	mov	r0, r8
 8002cba:	f005 f99f 	bl	8007ffc <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002cbe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8002cc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002ccc:	3601      	adds	r6, #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002cce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002cd2:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002cd4:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 8002cd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002cda:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002cde:	d1e9      	bne.n	8002cb4 <RI_GetRegisterMotor1+0x1fc>
        *size = (*rawSize) + 2U;
 8002ce0:	8823      	ldrh	r3, [r4, #0]
 8002ce2:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8002ce4:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	e71e      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
 8002cea:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8002cee:	f040 80d3 	bne.w	8002e98 <RI_GetRegisterMotor1+0x3e0>
              *data = PWMC_GetQuasiSynchState(&(&PWM_Handle_M1)->_Super);
 8002cf2:	4854      	ldr	r0, [pc, #336]	@ (8002e44 <RI_GetRegisterMotor1+0x38c>)
 8002cf4:	f004 fd22 	bl	800773c <PWMC_GetQuasiSynchState>
              break;
 8002cf8:	e72d      	b.n	8002b56 <RI_GetRegisterMotor1+0x9e>
 8002cfa:	f641 3350 	movw	r3, #6992	@ 0x1b50
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	f040 8176 	bne.w	8002ff0 <RI_GetRegisterMotor1+0x538>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 0);
 8002d04:	484d      	ldr	r0, [pc, #308]	@ (8002e3c <RI_GetRegisterMotor1+0x384>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	f004 fa6c 	bl	80071e4 <BADC_GetLastBemfValue>
 8002d0c:	8020      	strh	r0, [r4, #0]
              break;
 8002d0e:	e018      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d10:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002d14:	4298      	cmp	r0, r3
 8002d16:	f000 8159 	beq.w	8002fcc <RI_GetRegisterMotor1+0x514>
 8002d1a:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d129      	bne.n	8002d76 <RI_GetRegisterMotor1+0x2be>
              *regdataU16 = MCI_GetDutyCycleRef(pMCIN);
 8002d22:	4845      	ldr	r0, [pc, #276]	@ (8002e38 <RI_GetRegisterMotor1+0x380>)
 8002d24:	f7fe fde6 	bl	80018f4 <MCI_GetDutyCycleRef>
 8002d28:	8020      	strh	r0, [r4, #0]
              break;
 8002d2a:	e00a      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d2c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002d30:	f000 8147 	beq.w	8002fc2 <RI_GetRegisterMotor1+0x50a>
 8002d34:	d914      	bls.n	8002d60 <RI_GetRegisterMotor1+0x2a8>
 8002d36:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002d3a:	d002      	beq.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d3c:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002d40:	d105      	bne.n	8002d4e <RI_GetRegisterMotor1+0x296>
    uint8_t retVal = MCP_CMD_OK;
 8002d42:	2000      	movs	r0, #0
          *size = 2;
 8002d44:	2302      	movs	r3, #2
 8002d46:	802b      	strh	r3, [r5, #0]
  }
 8002d48:	b006      	add	sp, #24
 8002d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d4e:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002d52:	f040 814d 	bne.w	8002ff0 <RI_GetRegisterMotor1+0x538>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002d56:	483c      	ldr	r0, [pc, #240]	@ (8002e48 <RI_GetRegisterMotor1+0x390>)
 8002d58:	f004 fc38 	bl	80075cc <NTC_GetAvTemp_C>
 8002d5c:	8020      	strh	r0, [r4, #0]
              break;
 8002d5e:	e7f0      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d60:	28d0      	cmp	r0, #208	@ 0xd0
 8002d62:	f000 8119 	beq.w	8002f98 <RI_GetRegisterMotor1+0x4e0>
 8002d66:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002d6a:	d10e      	bne.n	8002d8a <RI_GetRegisterMotor1+0x2d2>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002d6c:	4837      	ldr	r0, [pc, #220]	@ (8002e4c <RI_GetRegisterMotor1+0x394>)
 8002d6e:	f004 fc7b 	bl	8007668 <PID_GetKD>
 8002d72:	8020      	strh	r0, [r4, #0]
              break;
 8002d74:	e7e5      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d76:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002d7a:	4298      	cmp	r0, r3
 8002d7c:	f040 8138 	bne.w	8002ff0 <RI_GetRegisterMotor1+0x538>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002d80:	4832      	ldr	r0, [pc, #200]	@ (8002e4c <RI_GetRegisterMotor1+0x394>)
 8002d82:	f004 fc55 	bl	8007630 <PID_GetKIDivisorPOW2>
 8002d86:	8020      	strh	r0, [r4, #0]
              break;
 8002d88:	e7db      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
 8002d8a:	2890      	cmp	r0, #144	@ 0x90
 8002d8c:	f040 8130 	bne.w	8002ff0 <RI_GetRegisterMotor1+0x538>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002d90:	482e      	ldr	r0, [pc, #184]	@ (8002e4c <RI_GetRegisterMotor1+0x394>)
 8002d92:	f004 fc39 	bl	8007608 <PID_GetKP>
 8002d96:	8020      	strh	r0, [r4, #0]
              break;
 8002d98:	e7d3      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d9a:	2008      	movs	r0, #8
  }
 8002d9c:	b006      	add	sp, #24
 8002d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002da2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <RI_GetRegisterMotor1+0x398>)
 8002da4:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002da6:	2301      	movs	r3, #1
 8002da8:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002daa:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002dae:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8002db2:	b17a      	cbz	r2, 8002dd4 <RI_GetRegisterMotor1+0x31c>
 8002db4:	fa1f fc8c 	uxth.w	ip, ip
 8002db8:	e008      	b.n	8002dcc <RI_GetRegisterMotor1+0x314>
    *tempdestString = *tempsrcString;
 8002dba:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002dbe:	882b      	ldrh	r3, [r5, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002dc6:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002dca:	b11a      	cbz	r2, 8002dd4 <RI_GetRegisterMotor1+0x31c>
 8002dcc:	459c      	cmp	ip, r3
 8002dce:	d8f4      	bhi.n	8002dba <RI_GetRegisterMotor1+0x302>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002dd0:	2006      	movs	r0, #6
 8002dd2:	e690      	b.n	8002af6 <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e68c      	b.n	8002af6 <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <RI_GetRegisterMotor1+0x39c>)
  *size= 1U ; /* /0 is the min String size */
 8002dde:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002de0:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002de2:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002de4:	f991 2000 	ldrsb.w	r2, [r1]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d0f3      	beq.n	8002dd4 <RI_GetRegisterMotor1+0x31c>
 8002dec:	fa1f fc8c 	uxth.w	ip, ip
 8002df0:	e009      	b.n	8002e06 <RI_GetRegisterMotor1+0x34e>
    *tempdestString = *tempsrcString;
 8002df2:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002df6:	882b      	ldrh	r3, [r5, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002dfe:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	d0e6      	beq.n	8002dd4 <RI_GetRegisterMotor1+0x31c>
 8002e06:	459c      	cmp	ip, r3
 8002e08:	d8f3      	bhi.n	8002df2 <RI_GetRegisterMotor1+0x33a>
 8002e0a:	e7e1      	b.n	8002dd0 <RI_GetRegisterMotor1+0x318>
 8002e0c:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e0e:	2008      	movs	r0, #8
            break;
 8002e10:	e68a      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
              SixStepFwConfig_reg_t const *pSixStepConfig_reg = SixStepConfig_reg[motorID];
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <RI_GetRegisterMotor1+0x3a0>)
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	6811      	ldr	r1, [r2, #0]
 8002e18:	6850      	ldr	r0, [r2, #4]
 8002e1a:	6058      	str	r0, [r3, #4]
 8002e1c:	6019      	str	r1, [r3, #0]
 8002e1e:	8911      	ldrh	r1, [r2, #8]
 8002e20:	7a92      	ldrb	r2, [r2, #10]
 8002e22:	729a      	strb	r2, [r3, #10]
 8002e24:	8119      	strh	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002e26:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8002e28:	230d      	movs	r3, #13
 8002e2a:	e67d      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
 8002e2c:	f3af 8000 	nop.w
 8002e30:	189374bc 	.word	0x189374bc
 8002e34:	4011df00 	.word	0x4011df00
 8002e38:	20000650 	.word	0x20000650
 8002e3c:	200000a8 	.word	0x200000a8
 8002e40:	b910895b 	.word	0xb910895b
 8002e44:	2000005c 	.word	0x2000005c
 8002e48:	20000030 	.word	0x20000030
 8002e4c:	20000264 	.word	0x20000264
 8002e50:	20000294 	.word	0x20000294
 8002e54:	2000029c 	.word	0x2000029c
 8002e58:	20000298 	.word	0x20000298
 8002e5c:	200001dc 	.word	0x200001dc
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8002e60:	4a67      	ldr	r2, [pc, #412]	@ (8003000 <RI_GetRegisterMotor1+0x548>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f102 0730 	add.w	r7, r2, #48	@ 0x30
 8002e68:	6814      	ldr	r4, [r2, #0]
 8002e6a:	6850      	ldr	r0, [r2, #4]
 8002e6c:	6891      	ldr	r1, [r2, #8]
 8002e6e:	68d6      	ldr	r6, [r2, #12]
 8002e70:	60de      	str	r6, [r3, #12]
 8002e72:	3210      	adds	r2, #16
 8002e74:	42ba      	cmp	r2, r7
 8002e76:	601c      	str	r4, [r3, #0]
 8002e78:	6058      	str	r0, [r3, #4]
 8002e7a:	6099      	str	r1, [r3, #8]
 8002e7c:	f103 0310 	add.w	r3, r3, #16
 8002e80:	d1f2      	bne.n	8002e68 <RI_GetRegisterMotor1+0x3b0>
 8002e82:	6810      	ldr	r0, [r2, #0]
 8002e84:	6851      	ldr	r1, [r2, #4]
 8002e86:	6892      	ldr	r2, [r2, #8]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	6018      	str	r0, [r3, #0]
 8002e8c:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8002e8e:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e90:	233e      	movs	r3, #62	@ 0x3e
 8002e92:	e649      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e94:	4608      	mov	r0, r1
 8002e96:	e62e      	b.n	8002af6 <RI_GetRegisterMotor1+0x3e>
 8002e98:	2005      	movs	r0, #5
 8002e9a:	e65e      	b.n	8002b5a <RI_GetRegisterMotor1+0xa2>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002e9c:	4859      	ldr	r0, [pc, #356]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002e9e:	f7fe fcfd 	bl	800189c <MCI_GetFaultState>
 8002ea2:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e68d      	b.n	8002bc4 <RI_GetRegisterMotor1+0x10c>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ea8:	4856      	ldr	r0, [pc, #344]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002eaa:	f7fe fd1f 	bl	80018ec <MCI_GetMecSpeedRefUnit>
 8002eae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002eb2:	0040      	lsls	r0, r0, #1
 8002eb4:	6020      	str	r0, [r4, #0]
              break;
 8002eb6:	e7f5      	b.n	8002ea4 <RI_GetRegisterMotor1+0x3ec>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002eb8:	4852      	ldr	r0, [pc, #328]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002eba:	f7fe fd0f 	bl	80018dc <MCI_GetAvrgMecSpeedUnit>
 8002ebe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ec2:	0040      	lsls	r0, r0, #1
 8002ec4:	6020      	str	r0, [r4, #0]
              break;
 8002ec6:	e7ed      	b.n	8002ea4 <RI_GetRegisterMotor1+0x3ec>
              *data = PWMC_GetFastDemagState(&(&PWM_Handle_M1)->_Super);
 8002ec8:	484f      	ldr	r0, [pc, #316]	@ (8003008 <RI_GetRegisterMotor1+0x550>)
 8002eca:	f004 fc31 	bl	8007730 <PWMC_GetFastDemagState>
              break;
 8002ece:	e642      	b.n	8002b56 <RI_GetRegisterMotor1+0x9e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002ed0:	484c      	ldr	r0, [pc, #304]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002ed2:	f7fe fc99 	bl	8001808 <MCI_GetSTMState>
              break;
 8002ed6:	e63e      	b.n	8002b56 <RI_GetRegisterMotor1+0x9e>
        *size = (*rawSize) + 2U;
 8002ed8:	8823      	ldrh	r3, [r4, #0]
 8002eda:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002edc:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	e622      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig,&Zc2CommDelay,&bemfAdcDemagConfig);
 8002ee2:	ab03      	add	r3, sp, #12
 8002ee4:	f10d 0202 	add.w	r2, sp, #2
 8002ee8:	4848      	ldr	r0, [pc, #288]	@ (800300c <RI_GetRegisterMotor1+0x554>)
 8002eea:	a901      	add	r1, sp, #4
 8002eec:	f004 f9b0 	bl	8007250 <BADC_GetBemfSensorlessParam>
                                      (bemfAdcConfig.AdcThresholdUp >> 4)) / 4096);
 8002ef0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002ef4:	0900      	lsrs	r0, r0, #4
 8002ef6:	f7fd fc0b 	bl	8000710 <__aeabi_i2d>
 8002efa:	a33f      	add	r3, pc, #252	@ (adr r3, 8002ff8 <RI_GetRegisterMotor1+0x540>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd f98a 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f04:	f7fd fc6e 	bl	80007e4 <__aeabi_d2uiz>
                                      (bemfAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002f08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f0c:	8060      	strh	r0, [r4, #2]
                                      (bemfAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002f0e:	0918      	lsrs	r0, r3, #4
 8002f10:	f7fd fbfe 	bl	8000710 <__aeabi_i2d>
 8002f14:	a338      	add	r3, pc, #224	@ (adr r3, 8002ff8 <RI_GetRegisterMotor1+0x540>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd f97d 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f1e:	f7fd fc61 	bl	80007e4 <__aeabi_d2uiz>
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f22:	f8bd 3008 	ldrh.w	r3, [sp, #8]
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8002f26:	f8bd 1012 	ldrh.w	r1, [sp, #18]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f2a:	80a0      	strh	r0, [r4, #4]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f2c:	2264      	movs	r2, #100	@ 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <RI_GetRegisterMotor1+0x558>)
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8002f34:	8161      	strh	r1, [r4, #10]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0adb      	lsrs	r3, r3, #11
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f3e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f42:	80e3      	strh	r3, [r4, #6]
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f48:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002f4c:	11d2      	asrs	r2, r2, #7
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f52:	005b      	lsls	r3, r3, #1
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f54:	8122      	strh	r2, [r4, #8]
            *rawSize = 12;
 8002f56:	220c      	movs	r2, #12
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f58:	81a3      	strh	r3, [r4, #12]
            *rawSize = 12;
 8002f5a:	8022      	strh	r2, [r4, #0]
            break;
 8002f5c:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e5e2      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f62:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002f66:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f68:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002f6c:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f6e:	d832      	bhi.n	8002fd6 <RI_GetRegisterMotor1+0x51e>
 8002f70:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002f72:	2008      	movs	r0, #8
 8002f74:	e5d8      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002f76:	4823      	ldr	r0, [pc, #140]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002f78:	f7fe fca6 	bl	80018c8 <MCI_GetLastRampFinalSpeed>
 8002f7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f80:	0043      	lsls	r3, r0, #1
 8002f82:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002f86:	481f      	ldr	r0, [pc, #124]	@ (8003004 <RI_GetRegisterMotor1+0x54c>)
 8002f88:	f7fe fca2 	bl	80018d0 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002f8c:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002f8e:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002f90:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f92:	2000      	movs	r0, #0
            break;
 8002f94:	2308      	movs	r3, #8
 8002f96:	e5c7      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002f98:	481e      	ldr	r0, [pc, #120]	@ (8003014 <RI_GetRegisterMotor1+0x55c>)
 8002f9a:	f004 fb39 	bl	8007610 <PID_GetKI>
 8002f9e:	8020      	strh	r0, [r4, #0]
              break;
 8002fa0:	e6cf      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 1);
 8002fa2:	481a      	ldr	r0, [pc, #104]	@ (800300c <RI_GetRegisterMotor1+0x554>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	f004 f91d 	bl	80071e4 <BADC_GetLastBemfValue>
 8002faa:	8020      	strh	r0, [r4, #0]
              break;
 8002fac:	e6c9      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              *regdataU16 = (uint16_t) BADC_GetBemfZcrFlag(&Bemf_ADC_M1);
 8002fae:	4817      	ldr	r0, [pc, #92]	@ (800300c <RI_GetRegisterMotor1+0x554>)
 8002fb0:	f004 f91e 	bl	80071f0 <BADC_GetBemfZcrFlag>
 8002fb4:	8020      	strh	r0, [r4, #0]
              break;
 8002fb6:	e6c4      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8002fb8:	4816      	ldr	r0, [pc, #88]	@ (8003014 <RI_GetRegisterMotor1+0x55c>)
 8002fba:	f004 fb2f 	bl	800761c <PID_GetKPDivisorPOW2>
 8002fbe:	8020      	strh	r0, [r4, #0]
              break;
 8002fc0:	e6bf      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002fc2:	4815      	ldr	r0, [pc, #84]	@ (8003018 <RI_GetRegisterMotor1+0x560>)
 8002fc4:	f003 fc7a 	bl	80068bc <VBS_GetAvBusVoltage_V>
 8002fc8:	8020      	strh	r0, [r4, #0]
              break;
 8002fca:	e6ba      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8002fcc:	4811      	ldr	r0, [pc, #68]	@ (8003014 <RI_GetRegisterMotor1+0x55c>)
 8002fce:	f004 fb4f 	bl	8007670 <PID_GetKDDivisorPOW2>
 8002fd2:	8020      	strh	r0, [r4, #0]
              break;
 8002fd4:	e6b5      	b.n	8002d42 <RI_GetRegisterMotor1+0x28a>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002fd6:	4a11      	ldr	r2, [pc, #68]	@ (800301c <RI_GetRegisterMotor1+0x564>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6850      	ldr	r0, [r2, #4]
 8002fdc:	6814      	ldr	r4, [r2, #0]
 8002fde:	6891      	ldr	r1, [r2, #8]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	6058      	str	r0, [r3, #4]
 8002fe6:	601c      	str	r4, [r3, #0]
 8002fe8:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002fea:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002fec:	2312      	movs	r3, #18
 8002fee:	e59b      	b.n	8002b28 <RI_GetRegisterMotor1+0x70>
 8002ff0:	2005      	movs	r0, #5
 8002ff2:	e6a7      	b.n	8002d44 <RI_GetRegisterMotor1+0x28c>
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	189374bc 	.word	0x189374bc
 8002ffc:	4011df00 	.word	0x4011df00
 8003000:	20000294 	.word	0x20000294
 8003004:	20000650 	.word	0x20000650
 8003008:	2000005c 	.word	0x2000005c
 800300c:	200000a8 	.word	0x200000a8
 8003010:	b910895b 	.word	0xb910895b
 8003014:	20000264 	.word	0x20000264
 8003018:	20000004 	.word	0x20000004
 800301c:	20000290 	.word	0x20000290

08003020 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003020:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003024:	3808      	subs	r0, #8
 8003026:	b2c0      	uxtb	r0, r0
 8003028:	2810      	cmp	r0, #16
 800302a:	bf9a      	itte	ls
 800302c:	4b01      	ldrls	r3, [pc, #4]	@ (8003034 <RI_GetIDSize+0x14>)
 800302e:	5c18      	ldrbls	r0, [r3, r0]
 8003030:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003032:	4770      	bx	lr
 8003034:	0800873c 	.word	0x0800873c

08003038 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003038:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 800303c:	2b10      	cmp	r3, #16
 800303e:	d003      	beq.n	8003048 <RI_GetPtrReg+0x10>
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <RI_GetPtrReg+0x68>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003042:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 8003044:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003046:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003048:	f020 0007 	bic.w	r0, r0, #7
 800304c:	f641 3350 	movw	r3, #6992	@ 0x1b50
 8003050:	4298      	cmp	r0, r3
 8003052:	b282      	uxth	r2, r0
 8003054:	d020      	beq.n	8003098 <RI_GetPtrReg+0x60>
 8003056:	d80e      	bhi.n	8003076 <RI_GetPtrReg+0x3e>
 8003058:	f641 2390 	movw	r3, #6800	@ 0x1a90
 800305c:	429a      	cmp	r2, r3
 800305e:	d017      	beq.n	8003090 <RI_GetPtrReg+0x58>
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <RI_GetPtrReg+0x6c>)
 8003062:	480f      	ldr	r0, [pc, #60]	@ (80030a0 <RI_GetPtrReg+0x68>)
 8003064:	f641 3c10 	movw	ip, #6928	@ 0x1b10
 8003068:	4562      	cmp	r2, ip
 800306a:	bf16      	itet	ne
 800306c:	4603      	movne	r3, r0
 800306e:	2000      	moveq	r0, #0
 8003070:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 8003072:	600b      	str	r3, [r1, #0]
}
 8003074:	4770      	bx	lr
 8003076:	f641 3390 	movw	r3, #7056	@ 0x1b90
 800307a:	429a      	cmp	r2, r3
 800307c:	d004      	beq.n	8003088 <RI_GetPtrReg+0x50>
 800307e:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <RI_GetPtrReg+0x70>)
 8003080:	4807      	ldr	r0, [pc, #28]	@ (80030a0 <RI_GetPtrReg+0x68>)
 8003082:	f641 3cd0 	movw	ip, #7120	@ 0x1bd0
 8003086:	e7ef      	b.n	8003068 <RI_GetPtrReg+0x30>
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <RI_GetPtrReg+0x74>)
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 800308a:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800308c:	2000      	movs	r0, #0
}
 800308e:	4770      	bx	lr
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 8003090:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <RI_GetPtrReg+0x78>)
  uint8_t retVal = MCP_CMD_OK;
 8003092:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 8003094:	685b      	ldr	r3, [r3, #4]
            break;
 8003096:	e7d5      	b.n	8003044 <RI_GetPtrReg+0xc>
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <RI_GetPtrReg+0x7c>)
  uint8_t retVal = MCP_CMD_OK;
 800309a:	2000      	movs	r0, #0
 800309c:	e7d2      	b.n	8003044 <RI_GetPtrReg+0xc>
 800309e:	bf00      	nop
 80030a0:	2000181c 	.word	0x2000181c
 80030a4:	2000010f 	.word	0x2000010f
 80030a8:	200000cc 	.word	0x200000cc
 80030ac:	200000ca 	.word	0x200000ca
 80030b0:	20000650 	.word	0x20000650
 80030b4:	200000c8 	.word	0x200000c8

080030b8 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 80030b8:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030ba:	4e79      	ldr	r6, [pc, #484]	@ (80032a0 <RCM_RegisterRegConv+0x1e8>)
 80030bc:	6832      	ldr	r2, [r6, #0]
 80030be:	2a00      	cmp	r2, #0
 80030c0:	d035      	beq.n	800312e <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030c2:	7901      	ldrb	r1, [r0, #4]
 80030c4:	7913      	ldrb	r3, [r2, #4]
 80030c6:	4299      	cmp	r1, r3
 80030c8:	d01f      	beq.n	800310a <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030ca:	6874      	ldr	r4, [r6, #4]
 80030cc:	2c00      	cmp	r4, #0
 80030ce:	f000 80c5 	beq.w	800325c <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030d2:	7923      	ldrb	r3, [r4, #4]
 80030d4:	428b      	cmp	r3, r1
  uint8_t handle = 255U;
 80030d6:	f04f 02ff 	mov.w	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030da:	d030      	beq.n	800313e <RCM_RegisterRegConv+0x86>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030dc:	68b5      	ldr	r5, [r6, #8]
 80030de:	2d00      	cmp	r5, #0
 80030e0:	f000 80a2 	beq.w	8003228 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030e4:	792b      	ldrb	r3, [r5, #4]
 80030e6:	428b      	cmp	r3, r1
 80030e8:	d02f      	beq.n	800314a <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030ea:	68f4      	ldr	r4, [r6, #12]
 80030ec:	2c00      	cmp	r4, #0
 80030ee:	f000 80a7 	beq.w	8003240 <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030f2:	7923      	ldrb	r3, [r4, #4]
 80030f4:	428b      	cmp	r3, r1
 80030f6:	f000 80aa 	beq.w	800324e <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80030fa:	2a03      	cmp	r2, #3
 80030fc:	bf88      	it	hi
 80030fe:	22ff      	movhi	r2, #255	@ 0xff
 8003100:	f240 80b6 	bls.w	8003270 <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
}
 8003104:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8003106:	7302      	strb	r2, [r0, #12]
}
 8003108:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4293      	cmp	r3, r2
 8003110:	d021      	beq.n	8003156 <RCM_RegisterRegConv+0x9e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003112:	6874      	ldr	r4, [r6, #4]
 8003114:	2c00      	cmp	r4, #0
 8003116:	d1dc      	bne.n	80030d2 <RCM_RegisterRegConv+0x1a>
 8003118:	68b5      	ldr	r5, [r6, #8]
      i++;
 800311a:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800311c:	2d00      	cmp	r5, #0
 800311e:	d1e1      	bne.n	80030e4 <RCM_RegisterRegConv+0x2c>
 8003120:	68f4      	ldr	r4, [r6, #12]
 8003122:	b1dc      	cbz	r4, 800315c <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003124:	7925      	ldrb	r5, [r4, #4]
 8003126:	7901      	ldrb	r1, [r0, #4]
 8003128:	428d      	cmp	r5, r1
 800312a:	d115      	bne.n	8003158 <RCM_RegisterRegConv+0xa0>
 800312c:	e090      	b.n	8003250 <RCM_RegisterRegConv+0x198>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800312e:	6874      	ldr	r4, [r6, #4]
 8003130:	2c00      	cmp	r4, #0
 8003132:	f000 80a5 	beq.w	8003280 <RCM_RegisterRegConv+0x1c8>
 8003136:	7901      	ldrb	r1, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003138:	7923      	ldrb	r3, [r4, #4]
 800313a:	428b      	cmp	r3, r1
 800313c:	d1ce      	bne.n	80030dc <RCM_RegisterRegConv+0x24>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800313e:	6824      	ldr	r4, [r4, #0]
 8003140:	6803      	ldr	r3, [r0, #0]
 8003142:	42a3      	cmp	r3, r4
 8003144:	d1ca      	bne.n	80030dc <RCM_RegisterRegConv+0x24>
      i++;
 8003146:	2201      	movs	r2, #1
 8003148:	e006      	b.n	8003158 <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800314a:	682c      	ldr	r4, [r5, #0]
 800314c:	6803      	ldr	r3, [r0, #0]
 800314e:	429c      	cmp	r4, r3
 8003150:	d1cb      	bne.n	80030ea <RCM_RegisterRegConv+0x32>
      i++;
 8003152:	2202      	movs	r2, #2
 8003154:	e000      	b.n	8003158 <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8003156:	2200      	movs	r2, #0
    while (i < RCM_MAX_CONV)
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	f362 0407 	bfi	r4, r2, #0, #8
 8003160:	f362 240f 	bfi	r4, r2, #8, #8
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003164:	4d4f      	ldr	r5, [pc, #316]	@ (80032a4 <RCM_RegisterRegConv+0x1ec>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003166:	6899      	ldr	r1, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8003168:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800316c:	2600      	movs	r6, #0
 800316e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
 8003172:	07ce      	lsls	r6, r1, #31
 8003174:	d422      	bmi.n	80031bc <RCM_RegisterRegConv+0x104>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	f021 0104 	bic.w	r1, r1, #4
 800317c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800317e:	2104      	movs	r1, #4
 8003180:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	f021 0120 	bic.w	r1, r1, #32
 8003188:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800318a:	2120      	movs	r1, #32
 800318c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003194:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003198:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800319c:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	2900      	cmp	r1, #0
 80031a2:	dbfc      	blt.n	800319e <RCM_RegisterRegConv+0xe6>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	07cd      	lsls	r5, r1, #31
 80031a8:	d408      	bmi.n	80031bc <RCM_RegisterRegConv+0x104>
  MODIFY_REG(ADCx->CR,
 80031aa:	4d3f      	ldr	r5, [pc, #252]	@ (80032a8 <RCM_RegisterRegConv+0x1f0>)
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	4029      	ands	r1, r5
 80031b0:	f041 0101 	orr.w	r1, r1, #1
 80031b4:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	07c9      	lsls	r1, r1, #31
 80031ba:	d5f7      	bpl.n	80031ac <RCM_RegisterRegConv+0xf4>
      RCM_NoInj_array[handle].enable = false;
 80031bc:	4d3b      	ldr	r5, [pc, #236]	@ (80032ac <RCM_RegisterRegConv+0x1f4>)
 80031be:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80031c2:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80031c4:	1d2e      	adds	r6, r5, #4
 80031c6:	5274      	strh	r4, [r6, r1]
      RCM_NoInj_array[handle].enable = false;
 80031c8:	2400      	movs	r4, #0
 80031ca:	546c      	strb	r4, [r5, r1]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80031cc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80031ce:	f024 040f 	bic.w	r4, r4, #15
 80031d2:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80031d4:	f890 c004 	ldrb.w	ip, [r0, #4]
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f10c 	lsl.w	r1, r1, ip
 80031de:	f1bc 0f09 	cmp.w	ip, #9
 80031e2:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 80031e6:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80031ea:	d817      	bhi.n	800321c <RCM_RegisterRegConv+0x164>
 80031ec:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031f0:	0dcc      	lsrs	r4, r1, #23
 80031f2:	f004 0404 	and.w	r4, r4, #4
 80031f6:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80031fa:	6885      	ldr	r5, [r0, #8]
 80031fc:	f85c 3004 	ldr.w	r3, [ip, r4]
 8003200:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8003204:	2607      	movs	r6, #7
 8003206:	408d      	lsls	r5, r1
 8003208:	fa06 f101 	lsl.w	r1, r6, r1
 800320c:	ea23 0101 	bic.w	r1, r3, r1
 8003210:	4329      	orrs	r1, r5
 8003212:	f84c 1004 	str.w	r1, [ip, r4]
}
 8003216:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8003218:	7302      	strb	r2, [r0, #12]
}
 800321a:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800321c:	3c1e      	subs	r4, #30
 800321e:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003222:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8003226:	e7e3      	b.n	80031f0 <RCM_RegisterRegConv+0x138>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003228:	2a04      	cmp	r2, #4
 800322a:	d92e      	bls.n	800328a <RCM_RegisterRegConv+0x1d2>
 800322c:	68f2      	ldr	r2, [r6, #12]
 800322e:	b372      	cbz	r2, 800328e <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003230:	7913      	ldrb	r3, [r2, #4]
 8003232:	4299      	cmp	r1, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003234:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003236:	d02f      	beq.n	8003298 <RCM_RegisterRegConv+0x1e0>
      i++;
 8003238:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800323a:	f240 2402 	movw	r4, #514	@ 0x202
 800323e:	e791      	b.n	8003164 <RCM_RegisterRegConv+0xac>
 8003240:	2a04      	cmp	r2, #4
 8003242:	d917      	bls.n	8003274 <RCM_RegisterRegConv+0x1bc>
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	2203      	movs	r2, #3
 8003248:	f240 3403 	movw	r4, #771	@ 0x303
 800324c:	e78a      	b.n	8003164 <RCM_RegisterRegConv+0xac>
 800324e:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003250:	6821      	ldr	r1, [r4, #0]
 8003252:	4299      	cmp	r1, r3
 8003254:	f47f af51 	bne.w	80030fa <RCM_RegisterRegConv+0x42>
      i++;
 8003258:	2203      	movs	r2, #3
 800325a:	e77d      	b.n	8003158 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800325c:	68b5      	ldr	r5, [r6, #8]
      i++;
 800325e:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003260:	2d00      	cmp	r5, #0
 8003262:	f47f af3f 	bne.w	80030e4 <RCM_RegisterRegConv+0x2c>
 8003266:	68f4      	ldr	r4, [r6, #12]
 8003268:	b124      	cbz	r4, 8003274 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800326a:	7923      	ldrb	r3, [r4, #4]
 800326c:	428b      	cmp	r3, r1
 800326e:	d0ee      	beq.n	800324e <RCM_RegisterRegConv+0x196>
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	f362 0407 	bfi	r4, r2, #0, #8
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	f362 240f 	bfi	r4, r2, #8, #8
 800327e:	e771      	b.n	8003164 <RCM_RegisterRegConv+0xac>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003280:	68b5      	ldr	r5, [r6, #8]
 8003282:	b135      	cbz	r5, 8003292 <RCM_RegisterRegConv+0x1da>
 8003284:	7901      	ldrb	r1, [r0, #4]
    uint8_t i = 0;
 8003286:	4622      	mov	r2, r4
 8003288:	e72c      	b.n	80030e4 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800328a:	462a      	mov	r2, r5
 800328c:	e7eb      	b.n	8003266 <RCM_RegisterRegConv+0x1ae>
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	e7d2      	b.n	8003238 <RCM_RegisterRegConv+0x180>
 8003292:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8003294:	462a      	mov	r2, r5
 8003296:	e743      	b.n	8003120 <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	4293      	cmp	r3, r2
 800329c:	d0dc      	beq.n	8003258 <RCM_RegisterRegConv+0x1a0>
 800329e:	e7cb      	b.n	8003238 <RCM_RegisterRegConv+0x180>
 80032a0:	20001864 	.word	0x20001864
 80032a4:	20001844 	.word	0x20001844
 80032a8:	7fffffc0 	.word	0x7fffffc0
 80032ac:	2000182c 	.word	0x2000182c

080032b0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 80032b0:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 80032b2:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 80032b4:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <RCM_ExecRegularConv+0x17c>)
 80032b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80032ba:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80032be:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d139      	bne.n	800333a <RCM_ExecRegularConv+0x8a>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80032c6:	7811      	ldrb	r1, [r2, #0]
 80032c8:	b991      	cbnz	r1, 80032f0 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 80032ca:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 80032cc:	7991      	ldrb	r1, [r2, #6]
 80032ce:	2900      	cmp	r1, #0
 80032d0:	d173      	bne.n	80033ba <RCM_ExecRegularConv+0x10a>
 80032d2:	7b11      	ldrb	r1, [r2, #12]
 80032d4:	2900      	cmp	r1, #0
 80032d6:	d175      	bne.n	80033c4 <RCM_ExecRegularConv+0x114>
 80032d8:	7c91      	ldrb	r1, [r2, #18]
 80032da:	2900      	cmp	r1, #0
 80032dc:	f000 8098 	beq.w	8003410 <RCM_ExecRegularConv+0x160>
      {
        if (RCM_NoInj_array[i].next > handle)
 80032e0:	7dd1      	ldrb	r1, [r2, #23]
 80032e2:	4299      	cmp	r1, r3
 80032e4:	f240 809e 	bls.w	8003424 <RCM_ExecRegularConv+0x174>
 80032e8:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 80032ec:	4670      	mov	r0, lr
 80032ee:	e003      	b.n	80032f8 <RCM_ExecRegularConv+0x48>
        if (RCM_NoInj_array[i].next > handle)
 80032f0:	7951      	ldrb	r1, [r2, #5]
 80032f2:	428b      	cmp	r3, r1
 80032f4:	d2ea      	bcs.n	80032cc <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 80032f6:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 80032f8:	eb0c 0403 	add.w	r4, ip, r3
 80032fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8003300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003304:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003306:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 800330a:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 800330e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003312:	4c47      	ldr	r4, [pc, #284]	@ (8003430 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003314:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8003316:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800331a:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 800331c:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 800331e:	eb0c 0003 	add.w	r0, ip, r3
 8003322:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003326:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 800332a:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800332e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003332:	7849      	ldrb	r1, [r1, #1]
 8003334:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003336:	bf18      	it	ne
 8003338:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == Bemf_ADC_M1.ADCRegularLocked)
 800333a:	493e      	ldr	r1, [pc, #248]	@ (8003434 <RCM_ExecRegularConv+0x184>)
 800333c:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 8003340:	2900      	cmp	r1, #0
 8003342:	d135      	bne.n	80033b0 <RCM_ExecRegularConv+0x100>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003344:	493c      	ldr	r1, [pc, #240]	@ (8003438 <RCM_ExecRegularConv+0x188>)
 8003346:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800334a:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800334c:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800334e:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003350:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003352:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003356:	fa01 f104 	lsl.w	r1, r1, r4
 800335a:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 800335e:	bf84      	itt	hi
 8003360:	f1ae 0e1e 	subhi.w	lr, lr, #30
 8003364:	ea41 510e 	orrhi.w	r1, r1, lr, lsl #20
  MODIFY_REG(*preg,
 8003368:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800336a:	bf94      	ite	ls
 800336c:	ea41 510e 	orrls.w	r1, r1, lr, lsl #20
 8003370:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8003374:	0d09      	lsrs	r1, r1, #20
 8003376:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 800337a:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 800337e:	4321      	orrs	r1, r4
 8003380:	6301      	str	r1, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003382:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003384:	6881      	ldr	r1, [r0, #8]
 8003386:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800338a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800338e:	f041 0104 	orr.w	r1, r1, #4
 8003392:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003394:	6801      	ldr	r1, [r0, #0]
 8003396:	0749      	lsls	r1, r1, #29
 8003398:	d5fc      	bpl.n	8003394 <RCM_ExecRegularConv+0xe4>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 800339a:	eb0c 0103 	add.w	r1, ip, r3
 800339e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80033a2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80033a4:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80033a6:	4822      	ldr	r0, [pc, #136]	@ (8003430 <RCM_ExecRegularConv+0x180>)
 80033a8:	794c      	ldrb	r4, [r1, #5]
 80033aa:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 80033ac:	2002      	movs	r0, #2
 80033ae:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80033b0:	449c      	add	ip, r3
 80033b2:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 80033b6:	8850      	ldrh	r0, [r2, #2]
 80033b8:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 80033ba:	7ad1      	ldrb	r1, [r2, #11]
 80033bc:	428b      	cmp	r3, r1
 80033be:	d31d      	bcc.n	80033fc <RCM_ExecRegularConv+0x14c>
      if (true == RCM_NoInj_array [i].enable)
 80033c0:	7b11      	ldrb	r1, [r2, #12]
 80033c2:	b1f9      	cbz	r1, 8003404 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array[i].next > handle)
 80033c4:	7c51      	ldrb	r1, [r2, #17]
 80033c6:	4299      	cmp	r1, r3
 80033c8:	d828      	bhi.n	800341c <RCM_ExecRegularConv+0x16c>
      if (true == RCM_NoInj_array [i].enable)
 80033ca:	7c91      	ldrb	r1, [r2, #18]
 80033cc:	2900      	cmp	r1, #0
 80033ce:	d187      	bne.n	80032e0 <RCM_ExecRegularConv+0x30>
 80033d0:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 80033d2:	4608      	mov	r0, r1
 80033d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80033d8:	eb0c 0403 	add.w	r4, ip, r3
 80033dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 80033e0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80033e4:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 80033e6:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80033e8:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80033ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80033ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033f2:	4c0f      	ldr	r4, [pc, #60]	@ (8003430 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 80033f4:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80033f6:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033f8:	7821      	ldrb	r1, [r4, #0]
 80033fa:	e790      	b.n	800331e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 80033fc:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8003400:	4670      	mov	r0, lr
 8003402:	e779      	b.n	80032f8 <RCM_ExecRegularConv+0x48>
 8003404:	7c91      	ldrb	r1, [r2, #18]
 8003406:	2900      	cmp	r1, #0
 8003408:	f47f af6a 	bne.w	80032e0 <RCM_ExecRegularConv+0x30>
 800340c:	2101      	movs	r1, #1
 800340e:	e7e0      	b.n	80033d2 <RCM_ExecRegularConv+0x122>
       if (LastEnable != RCM_MAX_CONV )
 8003410:	2800      	cmp	r0, #0
 8003412:	d0de      	beq.n	80033d2 <RCM_ExecRegularConv+0x122>
         RCM_currentHandle = handle;
 8003414:	4c06      	ldr	r4, [pc, #24]	@ (8003430 <RCM_ExecRegularConv+0x180>)
 8003416:	4619      	mov	r1, r3
 8003418:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 800341a:	e780      	b.n	800331e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 800341c:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8003420:	4670      	mov	r0, lr
 8003422:	e769      	b.n	80032f8 <RCM_ExecRegularConv+0x48>
 8003424:	2003      	movs	r0, #3
 8003426:	4601      	mov	r1, r0
 8003428:	e7d4      	b.n	80033d4 <RCM_ExecRegularConv+0x124>
 800342a:	bf00      	nop
 800342c:	2000182c 	.word	0x2000182c
 8003430:	20001828 	.word	0x20001828
 8003434:	200000a8 	.word	0x200000a8
 8003438:	20001864 	.word	0x20001864

0800343c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <RCM_ExecUserConv+0x54>)
{
 800343e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003442:	681c      	ldr	r4, [r3, #0]
 8003444:	b124      	cbz	r4, 8003450 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003446:	4d13      	ldr	r5, [pc, #76]	@ (8003494 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8003448:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800344a:	782b      	ldrb	r3, [r5, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff ff2b 	bl	80032b0 <RCM_ExecRegularConv>
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <RCM_ExecUserConv+0x5c>)
 800345c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800345e:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <RCM_ExecUserConv+0x60>)
 8003460:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003464:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003468:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	b10b      	cbz	r3, 8003472 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 800346e:	2302      	movs	r3, #2
 8003470:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <RCM_ExecUserConv+0x64>)
 8003474:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8003478:	2f00      	cmp	r7, #0
 800347a:	d0e9      	beq.n	8003450 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800347c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003480:	4620      	mov	r0, r4
 8003482:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003484:	2300      	movs	r3, #0
 8003486:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003488:	463b      	mov	r3, r7
}
 800348a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800348e:	4718      	bx	r3
 8003490:	20001820 	.word	0x20001820
 8003494:	20001824 	.word	0x20001824
 8003498:	20001826 	.word	0x20001826
 800349c:	2000182c 	.word	0x2000182c
 80034a0:	20001844 	.word	0x20001844

080034a4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <RCM_ExecNextConv+0x7c>)
 80034a6:	491f      	ldr	r1, [pc, #124]	@ (8003524 <RCM_ExecNextConv+0x80>)
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80034ae:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80034b2:	b3a3      	cbz	r3, 800351e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80034b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <RCM_ExecNextConv+0x84>)
{
 80034b6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80034be:	2404      	movs	r4, #4
 80034c0:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80034c2:	f893 c004 	ldrb.w	ip, [r3, #4]
 80034c6:	2301      	movs	r3, #1
 80034c8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80034cc:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80034d0:	fa03 f30c 	lsl.w	r3, r3, ip
 80034d4:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 80034d8:	bf84      	itt	hi
 80034da:	3c1e      	subhi	r4, #30
 80034dc:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 80034e0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80034e4:	bf98      	it	ls
 80034e6:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80034ea:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80034ec:	bf88      	it	hi
 80034ee:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 80034f2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80034f4:	0d1b      	lsrs	r3, r3, #20
 80034f6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80034fa:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 80034fe:	4313      	orrs	r3, r2
 8003500:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003502:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003504:	6883      	ldr	r3, [r0, #8]
 8003506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800350a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800350e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003512:	2401      	movs	r4, #1
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6083      	str	r3, [r0, #8]
 800351a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 800351c:	bd10      	pop	{r4, pc}
 800351e:	4770      	bx	lr
 8003520:	20001828 	.word	0x20001828
 8003524:	2000182c 	.word	0x2000182c
 8003528:	20001864 	.word	0x20001864

0800352c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 800352c:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 800352e:	4811      	ldr	r0, [pc, #68]	@ (8003574 <RCM_ReadOngoingConv+0x48>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003530:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <RCM_ReadOngoingConv+0x4c>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003532:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003538:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003540:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003544:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <RCM_ReadOngoingConv+0x50>)
 8003546:	d00e      	beq.n	8003566 <RCM_ReadOngoingConv+0x3a>
 8003548:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800354c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003550:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003554:	f01e 0ffd 	tst.w	lr, #253	@ 0xfd
 8003558:	d005      	beq.n	8003566 <RCM_ReadOngoingConv+0x3a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800355a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800355c:	f8ac 4002 	strh.w	r4, [ip, #2]
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003560:	2402      	movs	r4, #2
 8003562:	f88c 4001 	strb.w	r4, [ip, #1]
    /* Restore back DMA configuration */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003566:	440b      	add	r3, r1
 8003568:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800356c:	7953      	ldrb	r3, [r2, #5]
 800356e:	7003      	strb	r3, [r0, #0]
}
 8003570:	bd10      	pop	{r4, pc}
 8003572:	bf00      	nop
 8003574:	20001828 	.word	0x20001828
 8003578:	20001864 	.word	0x20001864
 800357c:	2000182c 	.word	0x2000182c

08003580 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003580:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <HAL_MspInit+0x3c>)
{
 8003582:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	661a      	str	r2, [r3, #96]	@ 0x60
 800358c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 800358e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003590:	f002 0201 	and.w	r2, r2, #1
 8003594:	9200      	str	r2, [sp, #0]
 8003596:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800359a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800359e:	659a      	str	r2, [r3, #88]	@ 0x58
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80035a8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80035ac:	f001 fa30 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b0:	b003      	add	sp, #12
 80035b2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80035b6:	f001 bcb9 	b.w	8004f2c <HAL_PWREx_DisableUCPDDeadBattery>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035c0:	b510      	push	{r4, lr}
 80035c2:	4604      	mov	r4, r0
 80035c4:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c8:	2244      	movs	r2, #68	@ 0x44
 80035ca:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80035d0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80035d4:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035d6:	f004 ff6d 	bl	80084b4 <memset>
  if(hadc->Instance==ADC1)
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e0:	d004      	beq.n	80035ec <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80035e2:	4a41      	ldr	r2, [pc, #260]	@ (80036e8 <HAL_ADC_MspInit+0x128>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d045      	beq.n	8003674 <HAL_ADC_MspInit+0xb4>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80035e8:	b01c      	add	sp, #112	@ 0x70
 80035ea:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80035ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80035f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f4:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80035f6:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80035f8:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035fa:	f002 f84f 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d168      	bne.n	80036d4 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_ADC_MspInit+0x12c>)
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003608:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800360a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800360c:	d109      	bne.n	8003622 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_ADC_MspInit+0x130>)
 8003610:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003616:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003622:	4b33      	ldr	r3, [pc, #204]	@ (80036f0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003624:	4833      	ldr	r0, [pc, #204]	@ (80036f4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003628:	f042 0204 	orr.w	r2, r2, #4
 800362c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800362e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003630:	f002 0204 	and.w	r2, r2, #4
 8003634:	9202      	str	r2, [sp, #8]
 8003636:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800364a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_W_Pin|M1_BEMF_V_Pin;
 800364c:	220b      	movs	r2, #11
 800364e:	2303      	movs	r3, #3
 8003650:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003658:	f001 fae8 	bl	8004c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 800365c:	2201      	movs	r2, #1
 800365e:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003660:	a906      	add	r1, sp, #24
 8003662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003666:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800366c:	f001 fade 	bl	8004c2c <HAL_GPIO_Init>
}
 8003670:	b01c      	add	sp, #112	@ 0x70
 8003672:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003674:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003678:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367c:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800367e:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003680:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003682:	f002 f80b 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 8003686:	bb40      	cbnz	r0, 80036da <HAL_ADC_MspInit+0x11a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_ADC_MspInit+0x12c>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800368e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003690:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003692:	d109      	bne.n	80036a8 <HAL_ADC_MspInit+0xe8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003694:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_ADC_MspInit+0x130>)
 8003696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800369e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80036aa:	4812      	ldr	r0, [pc, #72]	@ (80036f4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ae:	f042 0204 	orr.w	r2, r2, #4
 80036b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80036b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80036b6:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80036e0 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80036c0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80036c4:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c8:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80036cc:	f001 faae 	bl	8004c2c <HAL_GPIO_Init>
}
 80036d0:	b01c      	add	sp, #112	@ 0x70
 80036d2:	bd10      	pop	{r4, pc}
      Error_Handler();
 80036d4:	f7fe f834 	bl	8001740 <Error_Handler>
 80036d8:	e793      	b.n	8003602 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80036da:	f7fe f831 	bl	8001740 <Error_Handler>
 80036de:	e7d3      	b.n	8003688 <HAL_ADC_MspInit+0xc8>
 80036e0:	00000010 	.word	0x00000010
 80036e4:	00000003 	.word	0x00000003
 80036e8:	50000100 	.word	0x50000100
 80036ec:	20001874 	.word	0x20001874
 80036f0:	40021000 	.word	0x40021000
 80036f4:	48000800 	.word	0x48000800

080036f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80036fa:	6802      	ldr	r2, [r0, #0]
 80036fc:	4922      	ldr	r1, [pc, #136]	@ (8003788 <HAL_TIM_Base_MspInit+0x90>)
{
 80036fe:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003702:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003708:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800370c:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 800370e:	d010      	beq.n	8003732 <HAL_TIM_Base_MspInit+0x3a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003710:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003714:	d001      	beq.n	800371a <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003716:	b00a      	add	sp, #40	@ 0x28
 8003718:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371a:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <HAL_TIM_Base_MspInit+0x94>)
 800371c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	659a      	str	r2, [r3, #88]	@ 0x58
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	9b03      	ldr	r3, [sp, #12]
}
 800372e:	b00a      	add	sp, #40	@ 0x28
 8003730:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003732:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003736:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800373a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8003780 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800373e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
 8003746:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003748:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800374c:	9201      	str	r2, [sp, #4]
 800374e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003750:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003760:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8003762:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003764:	a904      	add	r1, sp, #16
 8003766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800376a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003770:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8003772:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003774:	f001 fa5a 	bl	8004c2c <HAL_GPIO_Init>
}
 8003778:	b00a      	add	sp, #40	@ 0x28
 800377a:	bd10      	pop	{r4, pc}
 800377c:	f3af 8000 	nop.w
 8003780:	00000800 	.word	0x00000800
 8003784:	00000012 	.word	0x00000012
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003790:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003792:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <HAL_TIM_MspPostInit+0x70>)
 8003794:	6801      	ldr	r1, [r0, #0]
{
 8003796:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800379a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80037a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80037a4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80037a6:	d002      	beq.n	80037ae <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037a8:	b009      	add	sp, #36	@ 0x24
 80037aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037b2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80037b6:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80037f0 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80037c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80037c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80037c8:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80037f8 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037d4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80037da:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037e0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e2:	f001 fa23 	bl	8004c2c <HAL_GPIO_Init>
}
 80037e6:	b009      	add	sp, #36	@ 0x24
 80037e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ec:	f3af 8000 	nop.w
 80037f0:	00000700 	.word	0x00000700
 80037f4:	00000002 	.word	0x00000002
 80037f8:	00000002 	.word	0x00000002
 80037fc:	00000002 	.word	0x00000002
 8003800:	40012c00 	.word	0x40012c00

08003804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4604      	mov	r4, r0
 8003808:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	2244      	movs	r2, #68	@ 0x44
 800380e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003814:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003818:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800381a:	f004 fe4b 	bl	80084b4 <memset>
  if(huart->Instance==USART2)
 800381e:	4b31      	ldr	r3, [pc, #196]	@ (80038e4 <HAL_UART_MspInit+0xe0>)
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003826:	b018      	add	sp, #96	@ 0x60
 8003828:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800382a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800382e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003830:	f001 ff34 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 8003834:	2800      	cmp	r0, #0
 8003836:	d14c      	bne.n	80038d2 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003838:	4b2b      	ldr	r3, [pc, #172]	@ (80038e8 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800383a:	4e2c      	ldr	r6, [pc, #176]	@ (80038ec <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800383c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800383e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003842:	659a      	str	r2, [r3, #88]	@ 0x58
 8003844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003846:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800385e:	220c      	movs	r2, #12
 8003860:	2302      	movs	r3, #2
 8003862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003866:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003868:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800386a:	2300      	movs	r3, #0
 800386c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003872:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003878:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	f001 f9d7 	bl	8004c2c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800387e:	491c      	ldr	r1, [pc, #112]	@ (80038f0 <HAL_UART_MspInit+0xec>)
 8003880:	221a      	movs	r2, #26
 8003882:	2300      	movs	r3, #0
 8003884:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003888:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800388a:	2280      	movs	r2, #128	@ 0x80
 800388c:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8003890:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8003894:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8003898:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800389a:	f001 f935 	bl	8004b08 <HAL_DMA_Init>
 800389e:	b9f0      	cbnz	r0, 80038de <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80038a0:	4d14      	ldr	r5, [pc, #80]	@ (80038f4 <HAL_UART_MspInit+0xf0>)
 80038a2:	4915      	ldr	r1, [pc, #84]	@ (80038f8 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038a4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80038a6:	221b      	movs	r2, #27
 80038a8:	2300      	movs	r3, #0
 80038aa:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038ae:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80038b0:	2110      	movs	r1, #16
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80038b8:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80038bc:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038c0:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80038c2:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038c4:	f001 f920 	bl	8004b08 <HAL_DMA_Init>
 80038c8:	b930      	cbnz	r0, 80038d8 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038ca:	67a5      	str	r5, [r4, #120]	@ 0x78
 80038cc:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80038ce:	b018      	add	sp, #96	@ 0x60
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80038d2:	f7fd ff35 	bl	8001740 <Error_Handler>
 80038d6:	e7af      	b.n	8003838 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80038d8:	f7fd ff32 	bl	8001740 <Error_Handler>
 80038dc:	e7f5      	b.n	80038ca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80038de:	f7fd ff2f 	bl	8001740 <Error_Handler>
 80038e2:	e7dd      	b.n	80038a0 <HAL_UART_MspInit+0x9c>
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40021000 	.word	0x40021000
 80038ec:	200003f0 	.word	0x200003f0
 80038f0:	40020008 	.word	0x40020008
 80038f4:	20000390 	.word	0x20000390
 80038f8:	4002001c 	.word	0x4002001c

080038fc <ADC1_2_IRQHandler>:
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
 80038fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	0691      	lsls	r1, r2, #26
 8003904:	d508      	bpl.n	8003918 <ADC1_2_IRQHandler+0x1c>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_JEOC(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->IER, LL_ADC_IT_JEOC) == (LL_ADC_IT_JEOC)) ? 1UL : 0UL);
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	0692      	lsls	r2, r2, #26
 800390a:	d505      	bpl.n	8003918 <ADC1_2_IRQHandler+0x1c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800390c:	2220      	movs	r2, #32
  /* USER CODE END CURRENT_REGULATION_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOC(ADC1) && LL_ADC_IsEnabledIT_JEOC(ADC1))
  {
  /* Clear Flags */
    LL_ADC_ClearFlag_JEOC(ADC1);
    BADC_IsZcDetected(&Bemf_ADC_M1, &PWM_Handle_M1._Super);
 800390e:	4903      	ldr	r1, [pc, #12]	@ (800391c <ADC1_2_IRQHandler+0x20>)
 8003910:	4803      	ldr	r0, [pc, #12]	@ (8003920 <ADC1_2_IRQHandler+0x24>)
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f003 ba3a 	b.w	8006d8c <BADC_IsZcDetected>
  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000005c 	.word	0x2000005c
 8003920:	200000a8 	.word	0x200000a8

08003924 <TIM2_IRQHandler>:
  */
void PERIOD_COMM_IRQHandler(void)
{
  /* TIM Update event */

  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8003924:	480a      	ldr	r0, [pc, #40]	@ (8003950 <TIM2_IRQHandler+0x2c>)
{
 8003926:	b508      	push	{r3, lr}
  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8003928:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800392a:	681b      	ldr	r3, [r3, #0]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	07d1      	lsls	r1, r2, #31
 8003930:	d50d      	bpl.n	800394e <TIM2_IRQHandler+0x2a>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	07d2      	lsls	r2, r2, #31
 8003936:	d50a      	bpl.n	800394e <TIM2_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003938:	f06f 0101 	mvn.w	r1, #1
 800393c:	6119      	str	r1, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim);
    BADC_StepChangeEvent(&Bemf_ADC_M1, 0, &PWM_Handle_M1._Super);
 800393e:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <TIM2_IRQHandler+0x30>)
 8003940:	2100      	movs	r1, #0
 8003942:	f003 fbcf 	bl	80070e4 <BADC_StepChangeEvent>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)TSK_HighFrequencyTask();
 800394a:	f7fe ba47 	b.w	8001ddc <TSK_HighFrequencyTask>
}
 800394e:	bd08      	pop	{r3, pc}
 8003950:	200000a8 	.word	0x200000a8
 8003954:	2000005c 	.word	0x2000005c

08003958 <TIM1_UP_TIM16_IRQHandler>:
 8003958:	4b02      	ldr	r3, [pc, #8]	@ (8003964 <TIM1_UP_TIM16_IRQHandler+0xc>)
 800395a:	f06f 0201 	mvn.w	r2, #1
 800395e:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)TSK_HighFrequencyTask();
 8003960:	f7fe ba3c 	b.w	8001ddc <TSK_HighFrequencyTask>
 8003964:	40012c00 	.word	0x40012c00

08003968 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003968:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800396a:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	0611      	lsls	r1, r2, #24
 8003970:	d505      	bpl.n	800397e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003972:	f06f 0280 	mvn.w	r2, #128	@ 0x80
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);

    (void)ThreePwm_BRK_IRQHandler(&PWM_Handle_M1);
 8003976:	480a      	ldr	r0, [pc, #40]	@ (80039a0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003978:	611a      	str	r2, [r3, #16]
 800397a:	f004 f9bd 	bl	8007cf8 <ThreePwm_BRK_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	05d2      	lsls	r2, r2, #23
 8003984:	d505      	bpl.n	8003992 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003986:	f46f 7280 	mvn.w	r2, #256	@ 0x100
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);

    (void)ThreePwm_BRK_IRQHandler(&PWM_Handle_M1);
 800398a:	4805      	ldr	r0, [pc, #20]	@ (80039a0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	f004 f9b3 	bl	8007cf8 <ThreePwm_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003996:	f7fe b9db 	b.w	8001d50 <MC_Scheduler>
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	2000005c 	.word	0x2000005c

080039a4 <DMA1_Channel1_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80039a4:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <DMA1_Channel1_IRQHandler+0x14>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	0792      	lsls	r2, r2, #30
 80039aa:	d400      	bmi.n	80039ae <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 80039ac:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80039ae:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80039b0:	4802      	ldr	r0, [pc, #8]	@ (80039bc <DMA1_Channel1_IRQHandler+0x18>)
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	f7fd bbe0 	b.w	8001178 <ASPEP_HWDataReceivedIT>
 80039b8:	40020000 	.word	0x40020000
 80039bc:	200002dc 	.word	0x200002dc

080039c0 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80039c0:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <USART2_IRQHandler+0x108>)
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80039c6:	b510      	push	{r4, lr}
 80039c8:	d509      	bpl.n	80039de <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80039ca:	4940      	ldr	r1, [pc, #256]	@ (8003acc <USART2_IRQHandler+0x10c>)
    /* Disable the DMA channel to prepare the next chunck of data */
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART */
    /* Need to free the buffer, and to check pending transfer */
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80039cc:	4840      	ldr	r0, [pc, #256]	@ (8003ad0 <USART2_IRQHandler+0x110>)
 80039ce:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80039d0:	2440      	movs	r4, #64	@ 0x40
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	61ca      	str	r2, [r1, #28]
 80039d8:	621c      	str	r4, [r3, #32]
 80039da:	f7fd fa21 	bl	8000e20 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80039de:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <USART2_IRQHandler+0x108>)
 80039e0:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80039e2:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80039e4:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80039e6:	689c      	ldr	r4, [r3, #8]
 80039e8:	07e4      	lsls	r4, r4, #31
 80039ea:	d526      	bpl.n	8003a3a <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80039ec:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80039f0:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 80039f4:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80039f6:	f001 0104 	and.w	r1, r1, #4
 80039fa:	430a      	orrs	r2, r1
 80039fc:	d01d      	beq.n	8003a3a <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error */
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 80039fe:	220e      	movs	r2, #14
 8003a00:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a06:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003a16:	e840 3100 	strex	r1, r3, [r0]
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	d1f3      	bne.n	8003a06 <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a22:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8003a26:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8003a32:	e840 3100 	strex	r1, r3, [r0]
 8003a36:	2900      	cmp	r1, #0
 8003a38:	d1f3      	bne.n	8003a22 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003a3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <USART2_IRQHandler+0x108>)
 8003a3c:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003a3e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003a40:	06d2      	lsls	r2, r2, #27
 8003a42:	d540      	bpl.n	8003ac6 <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003a44:	06db      	lsls	r3, r3, #27
 8003a46:	d53e      	bpl.n	8003ac6 <USART2_IRQHandler+0x106>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a4c:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8003a50:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8003a5c:	e840 3100 	strex	r1, r3, [r0]
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d1f3      	bne.n	8003a4c <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a68:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003a70:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003a78:	e840 3100 	strex	r1, r3, [r0]
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d1f3      	bne.n	8003a68 <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a84:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003a88:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003a94:	e840 3100 	strex	r1, r3, [r0]
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d1f3      	bne.n	8003a84 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <USART2_IRQHandler+0x108>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003aa4:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003ab4:	e840 3100 	strex	r1, r3, [r0]
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d1f3      	bne.n	8003aa4 <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003ac0:	4803      	ldr	r0, [pc, #12]	@ (8003ad0 <USART2_IRQHandler+0x110>)
 8003ac2:	f7fd bba7 	b.w	8001214 <ASPEP_HWDMAReset>
}
 8003ac6:	bd10      	pop	{r4, pc}
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	200002dc 	.word	0x200002dc

08003ad4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003ad4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003ad6:	f7fe fa9b 	bl	8002010 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8003ada:	e7fe      	b.n	8003ada <HardFault_Handler+0x6>

08003adc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003adc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003ade:	4c0a      	ldr	r4, [pc, #40]	@ (8003b08 <SysTick_Handler+0x2c>)
 8003ae0:	7823      	ldrb	r3, [r4, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d006      	beq.n	8003af4 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003af0:	f7fe ba82 	b.w	8001ff8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003af4:	f000 f8ea 	bl	8003ccc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003af8:	f001 f802 	bl	8004b00 <HAL_SYSTICK_IRQHandler>
 8003afc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003afe:	7023      	strb	r3, [r4, #0]
}
 8003b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003b04:	f7fe ba78 	b.w	8001ff8 <MC_RunMotorControlTasks>
 8003b08:	20000364 	.word	0x20000364

08003b0c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <EXTI15_10_IRQHandler+0x14>)
 8003b0e:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8003b10:	0492      	lsls	r2, r2, #18
 8003b12:	d400      	bmi.n	8003b16 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    (void)UI_HandleStartStopButton_cb ();
  }

}
 8003b14:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003b16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b1a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb ();
 8003b1c:	f7fe ba88 	b.w	8002030 <UI_HandleStartStopButton_cb>
 8003b20:	40010400 	.word	0x40010400

08003b24 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003b24:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003b26:	2340      	movs	r3, #64	@ 0x40
{
 8003b28:	b470      	push	{r4, r5, r6}
 8003b2a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	e842 3100 	strex	r1, r3, [r2]
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d1f7      	bne.n	8003b2c <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003b3c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	e851 3f00 	ldrex	r3, [r1]
 8003b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	e841 3400 	strex	r4, r3, [r1]
 8003b4c:	2c00      	cmp	r4, #0
 8003b4e:	d1f7      	bne.n	8003b40 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003b50:	6901      	ldr	r1, [r0, #16]
 8003b52:	4e17      	ldr	r6, [pc, #92]	@ (8003bb0 <UASPEP_INIT+0x8c>)
 8003b54:	6883      	ldr	r3, [r0, #8]
 8003b56:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003b58:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003b5a:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003b5c:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8003b60:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003b62:	68c3      	ldr	r3, [r0, #12]
 8003b64:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003b66:	2340      	movs	r3, #64	@ 0x40
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	586b      	ldr	r3, [r5, r1]
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003b72:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	e851 3f00 	ldrex	r3, [r1]
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	e841 3400 	strex	r4, r3, [r1]
 8003b82:	2c00      	cmp	r4, #0
 8003b84:	d1f7      	bne.n	8003b76 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003b86:	68c3      	ldr	r3, [r0, #12]
 8003b88:	5cf0      	ldrb	r0, [r6, r3]
 8003b8a:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003b8c:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003b90:	2340      	movs	r3, #64	@ 0x40
 8003b92:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003b94:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003b98:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	e841 3200 	strex	r2, r3, [r1]
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d1f7      	bne.n	8003b9a <UASPEP_INIT+0x76>
}
 8003baa:	bc70      	pop	{r4, r5, r6}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	08008750 	.word	0x08008750

08003bb4 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003bb4:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003bb6:	6903      	ldr	r3, [r0, #16]
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003be8 <UASPEP_SEND_PACKET+0x34>)
 8003bba:	6884      	ldr	r4, [r0, #8]
 8003bbc:	5ceb      	ldrb	r3, [r5, r3]
 8003bbe:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003bc0:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003bc2:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003bc6:	d40b      	bmi.n	8003be0 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003bc8:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003bca:	6841      	ldr	r1, [r0, #4]
 8003bcc:	0c09      	lsrs	r1, r1, #16
 8003bce:	0409      	lsls	r1, r1, #16
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003bd4:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	4302      	orrs	r2, r0
 8003bda:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return (result);
}
 8003bdc:	bc30      	pop	{r4, r5}
 8003bde:	4770      	bx	lr
    result = false;
 8003be0:	2000      	movs	r0, #0
}
 8003be2:	bc30      	pop	{r4, r5}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	08008750 	.word	0x08008750

08003bec <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003bec:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003bee:	68c3      	ldr	r3, [r0, #12]
 8003bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003c20 <UASPEP_RECEIVE_BUFFER+0x34>)
 8003bf2:	6844      	ldr	r4, [r0, #4]
 8003bf4:	5ce8      	ldrb	r0, [r5, r3]
 8003bf6:	5823      	ldr	r3, [r4, r0]
 8003bf8:	eb04 0c00 	add.w	ip, r4, r0
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003c02:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003c06:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003c14:	5823      	ldr	r3, [r4, r0]
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003c1c:	bc30      	pop	{r4, r5}
 8003c1e:	4770      	bx	lr
 8003c20:	08008750 	.word	0x08008750

08003c24 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003c24:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003c26:	2310      	movs	r3, #16
 8003c28:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	e842 3100 	strex	r1, r3, [r2]
 8003c36:	2900      	cmp	r1, #0
 8003c38:	d1f7      	bne.n	8003c2a <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003c3a:	4770      	bx	lr

08003c3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c3c:	4a03      	ldr	r2, [pc, #12]	@ (8003c4c <SystemInit+0x10>)
 8003c3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003c52:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <HAL_InitTick+0x40>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b90b      	cbnz	r3, 8003c5c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c58:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c5c:	490d      	ldr	r1, [pc, #52]	@ (8003c94 <HAL_InitTick+0x44>)
 8003c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c62:	4605      	mov	r5, r0
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	6808      	ldr	r0, [r1, #0]
 8003c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c6e:	f000 ff2b 	bl	8004ac8 <HAL_SYSTICK_Config>
 8003c72:	4604      	mov	r4, r0
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d1ef      	bne.n	8003c58 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c78:	2d0f      	cmp	r5, #15
 8003c7a:	d8ed      	bhi.n	8003c58 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f000 fed6 	bl	8004a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c88:	4b03      	ldr	r3, [pc, #12]	@ (8003c98 <HAL_InitTick+0x48>)
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	601d      	str	r5, [r3, #0]
}
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	2000036c 	.word	0x2000036c
 8003c94:	20000368 	.word	0x20000368
 8003c98:	20000370 	.word	0x20000370

08003c9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <HAL_Init+0x2c>)
 8003c9e:	6813      	ldr	r3, [r2, #0]
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8003ca4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ca6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003caa:	f000 feb1 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cae:	2004      	movs	r0, #4
 8003cb0:	f7ff ffce 	bl	8003c50 <HAL_InitTick>
 8003cb4:	b110      	cbz	r0, 8003cbc <HAL_Init+0x20>
    status = HAL_ERROR;
 8003cb6:	2401      	movs	r4, #1
}
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd10      	pop	{r4, pc}
 8003cbc:	4604      	mov	r4, r0
    HAL_MspInit();
 8003cbe:	f7ff fc5f 	bl	8003580 <HAL_MspInit>
}
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40022000 	.word	0x40022000

08003ccc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ccc:	4a03      	ldr	r2, [pc, #12]	@ (8003cdc <HAL_IncTick+0x10>)
 8003cce:	4904      	ldr	r1, [pc, #16]	@ (8003ce0 <HAL_IncTick+0x14>)
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	6809      	ldr	r1, [r1, #0]
 8003cd4:	440b      	add	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20001878 	.word	0x20001878
 8003ce0:	2000036c 	.word	0x2000036c

08003ce4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ce4:	4b01      	ldr	r3, [pc, #4]	@ (8003cec <HAL_GetTick+0x8>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20001878 	.word	0x20001878

08003cf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b530      	push	{r4, r5, lr}
 8003cf2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	f000 808c 	beq.w	8003e16 <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cfe:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8003d00:	4604      	mov	r4, r0
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	f000 808c 	beq.w	8003e20 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d08:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d0a:	6893      	ldr	r3, [r2, #8]
 8003d0c:	0098      	lsls	r0, r3, #2
 8003d0e:	d505      	bpl.n	8003d1c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d10:	6893      	ldr	r3, [r2, #8]
 8003d12:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003d16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d1a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d1c:	6893      	ldr	r3, [r2, #8]
 8003d1e:	00d9      	lsls	r1, r3, #3
 8003d20:	d419      	bmi.n	8003d56 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d22:	4b6e      	ldr	r3, [pc, #440]	@ (8003edc <HAL_ADC_Init+0x1ec>)
 8003d24:	486e      	ldr	r0, [pc, #440]	@ (8003ee0 <HAL_ADC_Init+0x1f0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003d28:	6891      	ldr	r1, [r2, #8]
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	fba0 0303 	umull	r0, r3, r0, r3
 8003d30:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003d42:	6091      	str	r1, [r2, #8]
 8003d44:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	b12b      	cbz	r3, 8003d56 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f9      	bne.n	8003d4a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d56:	6893      	ldr	r3, [r2, #8]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	d45f      	bmi.n	8003e1c <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d64:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d68:	4303      	orrs	r3, r0
 8003d6a:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d6c:	6893      	ldr	r3, [r2, #8]
 8003d6e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d72:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d74:	d14b      	bne.n	8003e0e <HAL_ADC_Init+0x11e>
 8003d76:	06dd      	lsls	r5, r3, #27
 8003d78:	d449      	bmi.n	8003e0e <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d86:	6893      	ldr	r3, [r2, #8]
 8003d88:	07d9      	lsls	r1, r3, #31
 8003d8a:	d409      	bmi.n	8003da0 <HAL_ADC_Init+0xb0>
 8003d8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f013 0f01 	tst.w	r3, #1
 8003d96:	4b53      	ldr	r3, [pc, #332]	@ (8003ee4 <HAL_ADC_Init+0x1f4>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_Init+0xb0>
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d576      	bpl.n	8003e8e <HAL_ADC_Init+0x19e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003da0:	68e5      	ldr	r5, [r4, #12]
 8003da2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003da4:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 8003da8:	432b      	orrs	r3, r5
 8003daa:	68a5      	ldr	r5, [r4, #8]
 8003dac:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dae:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003db0:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003db2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dba:	d05b      	beq.n	8003e74 <HAL_ADC_Init+0x184>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dbc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003dbe:	b121      	cbz	r1, 8003dca <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003dc0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc2:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003dc6:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc8:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dca:	68d5      	ldr	r5, [r2, #12]
 8003dcc:	4946      	ldr	r1, [pc, #280]	@ (8003ee8 <HAL_ADC_Init+0x1f8>)
 8003dce:	4029      	ands	r1, r5
 8003dd0:	4319      	orrs	r1, r3
 8003dd2:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003dd4:	6913      	ldr	r3, [r2, #16]
 8003dd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dd8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de0:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003de2:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de4:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	430b      	orrs	r3, r1
 8003dee:	d01d      	beq.n	8003e2c <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df0:	6963      	ldr	r3, [r4, #20]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d043      	beq.n	8003e7e <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003df6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003df8:	f023 030f 	bic.w	r3, r3, #15
 8003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003dfe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e00:	f023 0303 	bic.w	r3, r3, #3
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003e0a:	b003      	add	sp, #12
 8003e0c:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
}
 8003e18:	b003      	add	sp, #12
 8003e1a:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e7a5      	b.n	8003d6c <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8003e20:	f7ff fbce 	bl	80035c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e24:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003e26:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8003e2a:	e76d      	b.n	8003d08 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e2c:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e2e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e32:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e34:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e38:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e3a:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e3e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e42:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003e44:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e46:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e48:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003e4a:	bb41      	cbnz	r1, 8003e9e <HAL_ADC_Init+0x1ae>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e50:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003e52:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003e56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003e62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d026      	beq.n	8003eb8 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e6a:	6913      	ldr	r3, [r2, #16]
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6113      	str	r3, [r2, #16]
 8003e72:	e7bd      	b.n	8003df0 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e74:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003e76:	3901      	subs	r1, #1
 8003e78:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003e7c:	e79e      	b.n	8003dbc <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e7e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003e80:	6a23      	ldr	r3, [r4, #32]
 8003e82:	f021 010f 	bic.w	r1, r1, #15
 8003e86:	3b01      	subs	r3, #1
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8c:	e7b7      	b.n	8003dfe <HAL_ADC_Init+0x10e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e8e:	4917      	ldr	r1, [pc, #92]	@ (8003eec <HAL_ADC_Init+0x1fc>)
 8003e90:	6865      	ldr	r5, [r4, #4]
 8003e92:	688b      	ldr	r3, [r1, #8]
 8003e94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003e98:	432b      	orrs	r3, r5
 8003e9a:	608b      	str	r3, [r1, #8]
}
 8003e9c:	e780      	b.n	8003da0 <HAL_ADC_Init+0xb0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ea4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003ea8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003eb6:	e7d4      	b.n	8003e62 <HAL_ADC_Init+0x172>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eb8:	6911      	ldr	r1, [r2, #16]
 8003eba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003ebc:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003ebe:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8003ec2:	f021 0104 	bic.w	r1, r1, #4
 8003ec6:	432b      	orrs	r3, r5
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6113      	str	r3, [r2, #16]
 8003ed8:	e78a      	b.n	8003df0 <HAL_ADC_Init+0x100>
 8003eda:	bf00      	nop
 8003edc:	20000368 	.word	0x20000368
 8003ee0:	053e2d63 	.word	0x053e2d63
 8003ee4:	50000100 	.word	0x50000100
 8003ee8:	fff04007 	.word	0xfff04007
 8003eec:	50000300 	.word	0x50000300

08003ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef4:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8003ef8:	b082      	sub	sp, #8
 8003efa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003efc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003efe:	f04f 0000 	mov.w	r0, #0
 8003f02:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003f04:	f000 812b 	beq.w	800415e <HAL_ADC_ConfigChannel+0x26e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f08:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f10:	6894      	ldr	r4, [r2, #8]
 8003f12:	0764      	lsls	r4, r4, #29
 8003f14:	d44f      	bmi.n	8003fb6 <HAL_ADC_ConfigChannel+0xc6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f16:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f18:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8003f1c:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f20:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8003f24:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f26:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8003f2a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003f2e:	f854 500e 	ldr.w	r5, [r4, lr]
 8003f32:	261f      	movs	r6, #31
 8003f34:	fa00 f00c 	lsl.w	r0, r0, ip
 8003f38:	fa06 fc0c 	lsl.w	ip, r6, ip
 8003f3c:	ea25 0c0c 	bic.w	ip, r5, ip
 8003f40:	ea40 000c 	orr.w	r0, r0, ip
 8003f44:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f48:	6890      	ldr	r0, [r2, #8]
 8003f4a:	0747      	lsls	r7, r0, #29
 8003f4c:	d53d      	bpl.n	8003fca <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f4e:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f50:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f52:	6894      	ldr	r4, [r2, #8]
 8003f54:	07e5      	lsls	r5, r4, #31
 8003f56:	d40c      	bmi.n	8003f72 <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003f58:	4dc0      	ldr	r5, [pc, #768]	@ (800425c <HAL_ADC_ConfigChannel+0x36c>)
 8003f5a:	68ce      	ldr	r6, [r1, #12]
 8003f5c:	42ae      	cmp	r6, r5
    SET_BIT(ADCx->DIFSEL,
 8003f5e:	f3c0 0412 	ubfx	r4, r0, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003f62:	f000 80a7 	beq.w	80040b4 <HAL_ADC_ConfigChannel+0x1c4>
    CLEAR_BIT(ADCx->DIFSEL,
 8003f66:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003f6a:	ea21 0104 	bic.w	r1, r1, r4
 8003f6e:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f72:	49bb      	ldr	r1, [pc, #748]	@ (8004260 <HAL_ADC_ConfigChannel+0x370>)
 8003f74:	4208      	tst	r0, r1
 8003f76:	d01c      	beq.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f78:	4cba      	ldr	r4, [pc, #744]	@ (8004264 <HAL_ADC_ConfigChannel+0x374>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f7a:	4dbb      	ldr	r5, [pc, #748]	@ (8004268 <HAL_ADC_ConfigChannel+0x378>)
 8003f7c:	68a1      	ldr	r1, [r4, #8]
 8003f7e:	42a8      	cmp	r0, r5
 8003f80:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8003f84:	d073      	beq.n	800406e <HAL_ADC_ConfigChannel+0x17e>
 8003f86:	4db9      	ldr	r5, [pc, #740]	@ (800426c <HAL_ADC_ConfigChannel+0x37c>)
 8003f88:	42a8      	cmp	r0, r5
 8003f8a:	d070      	beq.n	800406e <HAL_ADC_ConfigChannel+0x17e>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f8c:	4db8      	ldr	r5, [pc, #736]	@ (8004270 <HAL_ADC_ConfigChannel+0x380>)
 8003f8e:	42a8      	cmp	r0, r5
 8003f90:	f000 80e9 	beq.w	8004166 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f94:	4db7      	ldr	r5, [pc, #732]	@ (8004274 <HAL_ADC_ConfigChannel+0x384>)
 8003f96:	42a8      	cmp	r0, r5
 8003f98:	d10b      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f9a:	0249      	lsls	r1, r1, #9
 8003f9c:	d409      	bmi.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f9e:	49b6      	ldr	r1, [pc, #728]	@ (8004278 <HAL_ADC_ConfigChannel+0x388>)
 8003fa0:	428a      	cmp	r2, r1
 8003fa2:	d006      	beq.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fa4:	68a2      	ldr	r2, [r4, #8]
 8003fa6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003faa:	4332      	orrs	r2, r6
 8003fac:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003fb0:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e003      	b.n	8003fbe <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fb8:	f042 0220 	orr.w	r2, r2, #32
 8003fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003fc4:	b002      	add	sp, #8
 8003fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fca:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fcc:	6808      	ldr	r0, [r1, #0]
 8003fce:	0726      	lsls	r6, r4, #28
 8003fd0:	d4bf      	bmi.n	8003f52 <HAL_ADC_ConfigChannel+0x62>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fd2:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003fd4:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8003fd8:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fda:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8003fdc:	40b4      	lsls	r4, r6
 8003fde:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fe2:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003fe6:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fea:	f102 0714 	add.w	r7, r2, #20
 8003fee:	f000 8105 	beq.w	80041fc <HAL_ADC_ConfigChannel+0x30c>
  MODIFY_REG(*preg,
 8003ff2:	40b5      	lsls	r5, r6
 8003ff4:	583e      	ldr	r6, [r7, r0]
 8003ff6:	4034      	ands	r4, r6
 8003ff8:	432c      	orrs	r4, r5
 8003ffa:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ffc:	6950      	ldr	r0, [r2, #20]
 8003ffe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004002:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004004:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004008:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800400a:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800400c:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800400e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004012:	4684      	mov	ip, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004014:	f000 80ca 	beq.w	80041ac <HAL_ADC_ConfigChannel+0x2bc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004018:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 800401c:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 800401e:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004022:	40b5      	lsls	r5, r6
 8004024:	4e95      	ldr	r6, [pc, #596]	@ (800427c <HAL_ADC_ConfigChannel+0x38c>)
 8004026:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800402a:	ea0c 0606 	and.w	r6, ip, r6
 800402e:	4306      	orrs	r6, r0
 8004030:	4335      	orrs	r5, r6
 8004032:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8004036:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800403a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800403c:	698e      	ldr	r6, [r1, #24]
 800403e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004042:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8004046:	4330      	orrs	r0, r6
 8004048:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800404e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004050:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004054:	f1a5 0501 	sub.w	r5, r5, #1
 8004058:	fab5 f585 	clz	r5, r5
 800405c:	096d      	lsrs	r5, r5, #5
 800405e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004062:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004066:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800406a:	6808      	ldr	r0, [r1, #0]
}
 800406c:	e771      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800406e:	020c      	lsls	r4, r1, #8
 8004070:	d49f      	bmi.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004072:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004076:	d19c      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004078:	497a      	ldr	r1, [pc, #488]	@ (8004264 <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800407a:	4881      	ldr	r0, [pc, #516]	@ (8004280 <HAL_ADC_ConfigChannel+0x390>)
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004082:	4332      	orrs	r2, r6
 8004084:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004088:	608a      	str	r2, [r1, #8]
 800408a:	6802      	ldr	r2, [r0, #0]
 800408c:	497d      	ldr	r1, [pc, #500]	@ (8004284 <HAL_ADC_ConfigChannel+0x394>)
 800408e:	0992      	lsrs	r2, r2, #6
 8004090:	fba1 1202 	umull	r1, r2, r1, r2
 8004094:	0992      	lsrs	r2, r2, #6
 8004096:	3201      	adds	r2, #1
 8004098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800409c:	0092      	lsls	r2, r2, #2
 800409e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80040a0:	9a01      	ldr	r2, [sp, #4]
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	d085      	beq.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 80040a6:	9a01      	ldr	r2, [sp, #4]
 80040a8:	3a01      	subs	r2, #1
 80040aa:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80040ac:	9a01      	ldr	r2, [sp, #4]
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d1f9      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x1b6>
 80040b2:	e77e      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
    SET_BIT(ADCx->DIFSEL,
 80040b4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 80040b8:	4325      	orrs	r5, r4
 80040ba:	f8c2 50b0 	str.w	r5, [r2, #176]	@ 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040be:	2c00      	cmp	r4, #0
 80040c0:	d060      	beq.n	8004184 <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80040c6:	2c00      	cmp	r4, #0
 80040c8:	f000 80a0 	beq.w	800420c <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 80040cc:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d0:	3401      	adds	r4, #1
 80040d2:	f004 041f 	and.w	r4, r4, #31
 80040d6:	2c09      	cmp	r4, #9
 80040d8:	f240 8098 	bls.w	800420c <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80040e0:	2c00      	cmp	r4, #0
 80040e2:	f000 8147 	beq.w	8004374 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80040e6:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040ea:	3401      	adds	r4, #1
 80040ec:	06a4      	lsls	r4, r4, #26
 80040ee:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	f000 8141 	beq.w	800437e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80040fc:	fab5 f585 	clz	r5, r5
 8004100:	3501      	adds	r5, #1
 8004102:	f005 051f 	and.w	r5, r5, #31
 8004106:	2601      	movs	r6, #1
 8004108:	fa06 f505 	lsl.w	r5, r6, r5
 800410c:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004112:	2800      	cmp	r0, #0
 8004114:	f000 8131 	beq.w	800437a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004118:	fab0 f080 	clz	r0, r0
 800411c:	1c45      	adds	r5, r0, #1
 800411e:	f005 051f 	and.w	r5, r5, #31
 8004122:	2003      	movs	r0, #3
 8004124:	f06f 061d 	mvn.w	r6, #29
 8004128:	fb10 6005 	smlabb	r0, r0, r5, r6
 800412c:	0500      	lsls	r0, r0, #20
 800412e:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004132:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004134:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8004136:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004138:	f005 0504 	and.w	r5, r5, #4
 800413c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004140:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004144:	fa04 f700 	lsl.w	r7, r4, r0
 8004148:	f04f 0c07 	mov.w	ip, #7
 800414c:	5974      	ldr	r4, [r6, r5]
 800414e:	fa0c f000 	lsl.w	r0, ip, r0
 8004152:	ea24 0000 	bic.w	r0, r4, r0
 8004156:	4338      	orrs	r0, r7
 8004158:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800415a:	6808      	ldr	r0, [r1, #0]
}
 800415c:	e709      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 800415e:	2002      	movs	r0, #2
}
 8004160:	b002      	add	sp, #8
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004166:	01c8      	lsls	r0, r1, #7
 8004168:	f53f af23 	bmi.w	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800416c:	4942      	ldr	r1, [pc, #264]	@ (8004278 <HAL_ADC_ConfigChannel+0x388>)
 800416e:	428a      	cmp	r2, r1
 8004170:	f43f af1f 	beq.w	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004174:	68a2      	ldr	r2, [r4, #8]
 8004176:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800417a:	4332      	orrs	r2, r6
 800417c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004180:	60a2      	str	r2, [r4, #8]
}
 8004182:	e716      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004184:	0e80      	lsrs	r0, r0, #26
 8004186:	3001      	adds	r0, #1
 8004188:	f000 061f 	and.w	r6, r0, #31
 800418c:	0680      	lsls	r0, r0, #26
 800418e:	f000 45f8 	and.w	r5, r0, #2080374784	@ 0x7c000000
 8004192:	2001      	movs	r0, #1
 8004194:	40b0      	lsls	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004196:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004198:	ea45 0400 	orr.w	r4, r5, r0
 800419c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a0:	d959      	bls.n	8004256 <HAL_ADC_ConfigChannel+0x366>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041a2:	381e      	subs	r0, #30
 80041a4:	0500      	lsls	r0, r0, #20
 80041a6:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80041aa:	e7c2      	b.n	8004132 <HAL_ADC_ConfigChannel+0x242>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ac:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80041ae:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b0:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041b4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b8:	2e00      	cmp	r6, #0
 80041ba:	d165      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x398>
 80041bc:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041c0:	4285      	cmp	r5, r0
 80041c2:	f000 80a7 	beq.w	8004314 <HAL_ADC_ConfigChannel+0x424>
 80041c6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80041c8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041ca:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80041ce:	4285      	cmp	r5, r0
 80041d0:	f000 808b 	beq.w	80042ea <HAL_ADC_ConfigChannel+0x3fa>
 80041d4:	68a5      	ldr	r5, [r4, #8]
 80041d6:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041dc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80041e0:	4285      	cmp	r5, r0
 80041e2:	f000 80a9 	beq.w	8004338 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041e6:	68e5      	ldr	r5, [r4, #12]
 80041e8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ea:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ee:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80041f2:	42a0      	cmp	r0, r4
 80041f4:	f000 80b5 	beq.w	8004362 <HAL_ADC_ConfigChannel+0x472>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041f8:	4660      	mov	r0, ip
 80041fa:	e6aa      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x62>
  MODIFY_REG(*preg,
 80041fc:	583d      	ldr	r5, [r7, r0]
 80041fe:	402c      	ands	r4, r5
 8004200:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004202:	6950      	ldr	r0, [r2, #20]
 8004204:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004208:	6150      	str	r0, [r2, #20]
}
 800420a:	e6fb      	b.n	8004004 <HAL_ADC_ConfigChannel+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004210:	2c00      	cmp	r4, #0
 8004212:	f000 80b8 	beq.w	8004386 <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8004216:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800421a:	3401      	adds	r4, #1
 800421c:	06a4      	lsls	r4, r4, #26
 800421e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004226:	2d00      	cmp	r5, #0
 8004228:	f000 80ab 	beq.w	8004382 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800422c:	fab5 f585 	clz	r5, r5
 8004230:	3501      	adds	r5, #1
 8004232:	f005 051f 	and.w	r5, r5, #31
 8004236:	2601      	movs	r6, #1
 8004238:	fa06 f505 	lsl.w	r5, r6, r5
 800423c:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004242:	2800      	cmp	r0, #0
 8004244:	f000 8093 	beq.w	800436e <HAL_ADC_ConfigChannel+0x47e>
  return __builtin_clz(value);
 8004248:	fab0 f080 	clz	r0, r0
 800424c:	3001      	adds	r0, #1
 800424e:	f000 001f 	and.w	r0, r0, #31
 8004252:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004256:	0500      	lsls	r0, r0, #20
 8004258:	e76b      	b.n	8004132 <HAL_ADC_ConfigChannel+0x242>
 800425a:	bf00      	nop
 800425c:	407f0000 	.word	0x407f0000
 8004260:	80080000 	.word	0x80080000
 8004264:	50000300 	.word	0x50000300
 8004268:	c3210000 	.word	0xc3210000
 800426c:	90c00010 	.word	0x90c00010
 8004270:	c7520000 	.word	0xc7520000
 8004274:	cb840000 	.word	0xcb840000
 8004278:	50000100 	.word	0x50000100
 800427c:	03fff000 	.word	0x03fff000
 8004280:	20000368 	.word	0x20000368
 8004284:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 800428c:	b11e      	cbz	r6, 8004296 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800428e:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004292:	42b5      	cmp	r5, r6
 8004294:	d03e      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x424>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004296:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004298:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800429a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a2:	f104 0708 	add.w	r7, r4, #8
 80042a6:	46be      	mov	lr, r7
  if (value == 0U)
 80042a8:	b11e      	cbz	r6, 80042b2 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80042aa:	fab6 f686 	clz	r6, r6
 80042ae:	42ae      	cmp	r6, r5
 80042b0:	d01d      	beq.n	80042ee <HAL_ADC_ConfigChannel+0x3fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b2:	68a5      	ldr	r5, [r4, #8]
 80042b4:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042b6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042be:	f104 060c 	add.w	r6, r4, #12
 80042c2:	46b0      	mov	r8, r6
  if (value == 0U)
 80042c4:	f1be 0f00 	cmp.w	lr, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 80042ca:	fabe fe8e 	clz	lr, lr
 80042ce:	45ae      	cmp	lr, r5
 80042d0:	d034      	beq.n	800433c <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042d2:	68e5      	ldr	r5, [r4, #12]
 80042d4:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d6:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 80042de:	2d00      	cmp	r5, #0
 80042e0:	f43f ae37 	beq.w	8003f52 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 80042e4:	fab5 f085 	clz	r0, r5
 80042e8:	e783      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x302>
 80042ea:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 80042ee:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80042f0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80042f4:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042f6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042fa:	68a0      	ldr	r0, [r4, #8]
 80042fc:	68a5      	ldr	r5, [r4, #8]
 80042fe:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004302:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004304:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004308:	4660      	mov	r0, ip
 800430a:	2e00      	cmp	r6, #0
 800430c:	d1d5      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x3ca>
 800430e:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004312:	e765      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x2f0>
  MODIFY_REG(*preg,
 8004314:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004316:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800431a:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800431c:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004320:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004322:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004324:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004328:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800432c:	4660      	mov	r0, ip
 800432e:	2e00      	cmp	r6, #0
 8004330:	d1b5      	bne.n	800429e <HAL_ADC_ConfigChannel+0x3ae>
 8004332:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004336:	e74a      	b.n	80041ce <HAL_ADC_ConfigChannel+0x2de>
 8004338:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 800433c:	6838      	ldr	r0, [r7, #0]
 800433e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004342:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004344:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004348:	68e0      	ldr	r0, [r4, #12]
 800434a:	68e4      	ldr	r4, [r4, #12]
 800434c:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004350:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004352:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004356:	4660      	mov	r0, ip
 8004358:	2d00      	cmp	r5, #0
 800435a:	d1be      	bne.n	80042da <HAL_ADC_ConfigChannel+0x3ea>
 800435c:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8004360:	e747      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8004362:	6830      	ldr	r0, [r6, #0]
 8004364:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004368:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800436a:	6808      	ldr	r0, [r1, #0]
}
 800436c:	e5f1      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x62>
 800436e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004372:	e6de      	b.n	8004132 <HAL_ADC_ConfigChannel+0x242>
 8004374:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004378:	e6bb      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x202>
 800437a:	4804      	ldr	r0, [pc, #16]	@ (800438c <HAL_ADC_ConfigChannel+0x49c>)
 800437c:	e6d9      	b.n	8004132 <HAL_ADC_ConfigChannel+0x242>
 800437e:	2502      	movs	r5, #2
 8004380:	e6c4      	b.n	800410c <HAL_ADC_ConfigChannel+0x21c>
 8004382:	2502      	movs	r5, #2
 8004384:	e75a      	b.n	800423c <HAL_ADC_ConfigChannel+0x34c>
 8004386:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800438a:	e74a      	b.n	8004222 <HAL_ADC_ConfigChannel+0x332>
 800438c:	fe500000 	.word	0xfe500000

08004390 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004394:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004398:	4602      	mov	r2, r0
 800439a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800439c:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800439e:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043a0:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 80043a2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80043a4:	f000 8170 	beq.w	8004688 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 80043a8:	2301      	movs	r3, #1
 80043aa:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80043ae:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80043b2:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d06a      	beq.n	800448e <HAL_ADCEx_InjectedConfigChannel+0xfe>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80043b8:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80043ba:	2d01      	cmp	r5, #1
 80043bc:	d067      	beq.n	800448e <HAL_ADCEx_InjectedConfigChannel+0xfe>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043be:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80043c0:	f000 001f 	and.w	r0, r0, #31
 80043c4:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80043c8:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80043ca:	2f00      	cmp	r7, #0
 80043cc:	f040 8112 	bne.w	80045f4 <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80043d0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80043d2:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80043d4:	2800      	cmp	r0, #0
 80043d6:	f000 8211 	beq.w	80047fc <HAL_ADCEx_InjectedConfigChannel+0x46c>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80043da:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80043dc:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80043e0:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80043e2:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80043e4:	4330      	orrs	r0, r6
 80043e6:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	0700      	lsls	r0, r0, #28
 80043ee:	d410      	bmi.n	8004412 <HAL_ADCEx_InjectedConfigChannel+0x82>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80043f0:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80043f4:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80043f8:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	f040 80ef 	bne.w	80045de <HAL_ADCEx_InjectedConfigChannel+0x24e>
      MODIFY_REG(hadc->Instance->CFGR,
 8004400:	68dd      	ldr	r5, [r3, #12]
 8004402:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004406:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 800440a:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 800440e:	4328      	orrs	r0, r5
 8004410:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004412:	6898      	ldr	r0, [r3, #8]
 8004414:	f010 0004 	ands.w	r0, r0, #4
 8004418:	d04f      	beq.n	80044ba <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800441a:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441c:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800441e:	689d      	ldr	r5, [r3, #8]
 8004420:	07ee      	lsls	r6, r5, #31
 8004422:	d40c      	bmi.n	800443e <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004424:	4ea2      	ldr	r6, [pc, #648]	@ (80046b0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8004426:	68cf      	ldr	r7, [r1, #12]
 8004428:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 800442a:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800442e:	f000 80fc 	beq.w	800462a <HAL_ADCEx_InjectedConfigChannel+0x29a>
    CLEAR_BIT(ADCx->DIFSEL,
 8004432:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004436:	ea21 0105 	bic.w	r1, r1, r5
 800443a:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800443e:	499d      	ldr	r1, [pc, #628]	@ (80046b4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004440:	420c      	tst	r4, r1
 8004442:	d01e      	beq.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004444:	4e9c      	ldr	r6, [pc, #624]	@ (80046b8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004446:	4d9d      	ldr	r5, [pc, #628]	@ (80046bc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004448:	68b1      	ldr	r1, [r6, #8]
 800444a:	42ac      	cmp	r4, r5
 800444c:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8004450:	f000 809f 	beq.w	8004592 <HAL_ADCEx_InjectedConfigChannel+0x202>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004454:	4d9a      	ldr	r5, [pc, #616]	@ (80046c0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004456:	42ac      	cmp	r4, r5
 8004458:	f000 809b 	beq.w	8004592 <HAL_ADCEx_InjectedConfigChannel+0x202>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800445c:	4d99      	ldr	r5, [pc, #612]	@ (80046c4 <HAL_ADCEx_InjectedConfigChannel+0x334>)
 800445e:	42ac      	cmp	r4, r5
 8004460:	f000 8116 	beq.w	8004690 <HAL_ADCEx_InjectedConfigChannel+0x300>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004464:	4d98      	ldr	r5, [pc, #608]	@ (80046c8 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8004466:	42ac      	cmp	r4, r5
 8004468:	d10b      	bne.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800446a:	0249      	lsls	r1, r1, #9
 800446c:	d409      	bmi.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800446e:	4997      	ldr	r1, [pc, #604]	@ (80046cc <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8004470:	428b      	cmp	r3, r1
 8004472:	d006      	beq.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004474:	68b3      	ldr	r3, [r6, #8]
 8004476:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800447a:	433b      	orrs	r3, r7
 800447c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004480:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004482:	2300      	movs	r3, #0
 8004484:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004488:	b003      	add	sp, #12
 800448a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800448e:	2809      	cmp	r0, #9
 8004490:	d1ab      	bne.n	80043ea <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004492:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004494:	0c65      	lsrs	r5, r4, #17
 8004496:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800449a:	b120      	cbz	r0, 80044a6 <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800449c:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800449e:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80044a2:	4330      	orrs	r0, r6
 80044a4:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80044a6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80044a8:	4e89      	ldr	r6, [pc, #548]	@ (80046d0 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80044aa:	4030      	ands	r0, r6
 80044ac:	4328      	orrs	r0, r5
 80044ae:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044b0:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80044b2:	6655      	str	r5, [r2, #100]	@ 0x64
 80044b4:	0700      	lsls	r0, r0, #28
 80044b6:	d4ac      	bmi.n	8004412 <HAL_ADCEx_InjectedConfigChannel+0x82>
 80044b8:	e79a      	b.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x60>
 80044ba:	689d      	ldr	r5, [r3, #8]
 80044bc:	072f      	lsls	r7, r5, #28
 80044be:	d4ae      	bmi.n	800441e <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80044c0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80044c2:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	f040 80a6 	bne.w	8004618 <HAL_ADCEx_InjectedConfigChannel+0x288>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80044cc:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044ce:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80044d0:	f000 8196 	beq.w	8004800 <HAL_ADCEx_InjectedConfigChannel+0x470>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044d4:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80044d8:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044da:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80044dc:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80044e0:	2d01      	cmp	r5, #1
 80044e2:	f000 8180 	beq.w	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x456>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80044e6:	691d      	ldr	r5, [r3, #16]
 80044e8:	f025 0502 	bic.w	r5, r5, #2
 80044ec:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80044ee:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80044f0:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80044f4:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044f6:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80044f8:	40bd      	lsls	r5, r7
 80044fa:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044fe:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8004502:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004506:	f103 0c14 	add.w	ip, r3, #20
 800450a:	f000 8162 	beq.w	80047d2 <HAL_ADCEx_InjectedConfigChannel+0x442>
  MODIFY_REG(*preg,
 800450e:	40be      	lsls	r6, r7
 8004510:	f85c 7004 	ldr.w	r7, [ip, r4]
 8004514:	403d      	ands	r5, r7
 8004516:	4335      	orrs	r5, r6
 8004518:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800451c:	695c      	ldr	r4, [r3, #20]
 800451e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004522:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004524:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004528:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800452a:	694e      	ldr	r6, [r1, #20]
 800452c:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800452e:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004532:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004534:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004538:	f000 810b 	beq.w	8004752 <HAL_ADCEx_InjectedConfigChannel+0x3c2>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800453c:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8004540:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 8004542:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 8004546:	40be      	lsls	r6, r7
 8004548:	4f62      	ldr	r7, [pc, #392]	@ (80046d4 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 800454a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800454e:	ea0e 0707 	and.w	r7, lr, r7
 8004552:	4327      	orrs	r7, r4
 8004554:	433e      	orrs	r6, r7
 8004556:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 800455a:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800455e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004560:	698e      	ldr	r6, [r1, #24]
 8004562:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004566:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800456a:	4334      	orrs	r4, r6
 800456c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004570:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004572:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004574:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004578:	f1a6 0601 	sub.w	r6, r6, #1
 800457c:	fab6 f686 	clz	r6, r6
 8004580:	0976      	lsrs	r6, r6, #5
 8004582:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8004586:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800458a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800458e:	680c      	ldr	r4, [r1, #0]
}
 8004590:	e745      	b.n	800441e <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004592:	020d      	lsls	r5, r1, #8
 8004594:	f53f af75 	bmi.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459c:	f47f af71 	bne.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045a0:	4945      	ldr	r1, [pc, #276]	@ (80046b8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80045a2:	4c4d      	ldr	r4, [pc, #308]	@ (80046d8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80045a4:	688b      	ldr	r3, [r1, #8]
 80045a6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80045aa:	433b      	orrs	r3, r7
 80045ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045b0:	608b      	str	r3, [r1, #8]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4949      	ldr	r1, [pc, #292]	@ (80046dc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	fba1 1303 	umull	r1, r3, r1, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3318      	adds	r3, #24
 80045c6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80045c8:	9b01      	ldr	r3, [sp, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f43f af59 	beq.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80045d6:	9b01      	ldr	r3, [sp, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x240>
 80045dc:	e751      	b.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR,
 80045de:	68dd      	ldr	r5, [r3, #12]
 80045e0:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80045e4:	4328      	orrs	r0, r5
 80045e6:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045e8:	6898      	ldr	r0, [r3, #8]
 80045ea:	f010 0004 	ands.w	r0, r0, #4
 80045ee:	f43f af64 	beq.w	80044ba <HAL_ADCEx_InjectedConfigChannel+0x12a>
 80045f2:	e712      	b.n	800441a <HAL_ADCEx_InjectedConfigChannel+0x8a>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80045f4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80045f6:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80045f8:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80045fa:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80045fc:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045fe:	2f00      	cmp	r7, #0
 8004600:	f47f aef3 	bne.w	80043ea <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004604:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004606:	4e32      	ldr	r6, [pc, #200]	@ (80046d0 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004608:	4030      	ands	r0, r6
 800460a:	4328      	orrs	r0, r5
 800460c:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800460e:	6898      	ldr	r0, [r3, #8]
 8004610:	0700      	lsls	r0, r0, #28
 8004612:	f53f aefe 	bmi.w	8004412 <HAL_ADCEx_InjectedConfigChannel+0x82>
 8004616:	e6eb      	b.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004618:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800461a:	2d00      	cmp	r5, #0
 800461c:	f43f af56 	beq.w	80044cc <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004620:	2801      	cmp	r0, #1
 8004622:	f000 810f 	beq.w	8004844 <HAL_ADCEx_InjectedConfigChannel+0x4b4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004626:	68d8      	ldr	r0, [r3, #12]
 8004628:	e754      	b.n	80044d4 <HAL_ADCEx_InjectedConfigChannel+0x144>
    SET_BIT(ADCx->DIFSEL,
 800462a:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800462e:	432e      	orrs	r6, r5
 8004630:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004634:	2d00      	cmp	r5, #0
 8004636:	d153      	bne.n	80046e0 <HAL_ADCEx_InjectedConfigChannel+0x350>
 8004638:	0ea4      	lsrs	r4, r4, #26
 800463a:	3401      	adds	r4, #1
 800463c:	f004 061f 	and.w	r6, r4, #31
 8004640:	2501      	movs	r5, #1
 8004642:	06a4      	lsls	r4, r4, #26
 8004644:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8004648:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800464a:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800464c:	ea45 0504 	orr.w	r5, r5, r4
 8004650:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004654:	f200 80f1 	bhi.w	800483a <HAL_ADCEx_InjectedConfigChannel+0x4aa>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004658:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800465a:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800465c:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 800465e:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004660:	f006 0604 	and.w	r6, r6, #4
 8004664:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004668:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800466c:	fa05 fc04 	lsl.w	ip, r5, r4
 8004670:	f04f 0e07 	mov.w	lr, #7
 8004674:	59bd      	ldr	r5, [r7, r6]
 8004676:	fa0e f404 	lsl.w	r4, lr, r4
 800467a:	ea25 0404 	bic.w	r4, r5, r4
 800467e:	ea44 040c 	orr.w	r4, r4, ip
 8004682:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004684:	680c      	ldr	r4, [r1, #0]
}
 8004686:	e6da      	b.n	800443e <HAL_ADCEx_InjectedConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8004688:	2002      	movs	r0, #2
}
 800468a:	b003      	add	sp, #12
 800468c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004690:	01cc      	lsls	r4, r1, #7
 8004692:	f53f aef6 	bmi.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004696:	490d      	ldr	r1, [pc, #52]	@ (80046cc <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8004698:	428b      	cmp	r3, r1
 800469a:	f43f aef2 	beq.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800469e:	68b3      	ldr	r3, [r6, #8]
 80046a0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80046a4:	433b      	orrs	r3, r7
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046aa:	60b3      	str	r3, [r6, #8]
}
 80046ac:	e6e9      	b.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 80046ae:	bf00      	nop
 80046b0:	407f0000 	.word	0x407f0000
 80046b4:	80080000 	.word	0x80080000
 80046b8:	50000300 	.word	0x50000300
 80046bc:	c3210000 	.word	0xc3210000
 80046c0:	90c00010 	.word	0x90c00010
 80046c4:	c7520000 	.word	0xc7520000
 80046c8:	cb840000 	.word	0xcb840000
 80046cc:	50000100 	.word	0x50000100
 80046d0:	04104000 	.word	0x04104000
 80046d4:	03fff000 	.word	0x03fff000
 80046d8:	20000368 	.word	0x20000368
 80046dc:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	f000 80b2 	beq.w	800484e <HAL_ADCEx_InjectedConfigChannel+0x4be>
  return __builtin_clz(value);
 80046ea:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ee:	3501      	adds	r5, #1
 80046f0:	f005 051f 	and.w	r5, r5, #31
 80046f4:	2d09      	cmp	r5, #9
 80046f6:	f240 80aa 	bls.w	800484e <HAL_ADCEx_InjectedConfigChannel+0x4be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80046fe:	2d00      	cmp	r5, #0
 8004700:	f000 8111 	beq.w	8004926 <HAL_ADCEx_InjectedConfigChannel+0x596>
  return __builtin_clz(value);
 8004704:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004708:	3501      	adds	r5, #1
 800470a:	06ad      	lsls	r5, r5, #26
 800470c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004714:	2e00      	cmp	r6, #0
 8004716:	f000 8104 	beq.w	8004922 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return __builtin_clz(value);
 800471a:	fab6 f686 	clz	r6, r6
 800471e:	3601      	adds	r6, #1
 8004720:	f006 061f 	and.w	r6, r6, #31
 8004724:	2701      	movs	r7, #1
 8004726:	fa07 f606 	lsl.w	r6, r7, r6
 800472a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004730:	2c00      	cmp	r4, #0
 8004732:	f000 80fe 	beq.w	8004932 <HAL_ADCEx_InjectedConfigChannel+0x5a2>
  return __builtin_clz(value);
 8004736:	fab4 f484 	clz	r4, r4
 800473a:	1c66      	adds	r6, r4, #1
 800473c:	f006 061f 	and.w	r6, r6, #31
 8004740:	2403      	movs	r4, #3
 8004742:	f06f 071d 	mvn.w	r7, #29
 8004746:	fb14 7406 	smlabb	r4, r4, r6, r7
 800474a:	0524      	lsls	r4, r4, #20
 800474c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004750:	e783      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004752:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8004754:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004756:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800475a:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800475e:	2f00      	cmp	r7, #0
 8004760:	d052      	beq.n	8004808 <HAL_ADCEx_InjectedConfigChannel+0x478>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8004766:	b127      	cbz	r7, 8004772 <HAL_ADCEx_InjectedConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004768:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800476c:	42be      	cmp	r6, r7
 800476e:	f000 80a7 	beq.w	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x530>
 8004772:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8004774:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004776:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800477e:	f105 0c08 	add.w	ip, r5, #8
 8004782:	46e0      	mov	r8, ip
  if (value == 0U)
 8004784:	b127      	cbz	r7, 8004790 <HAL_ADCEx_InjectedConfigChannel+0x400>
  return __builtin_clz(value);
 8004786:	fab7 f787 	clz	r7, r7
 800478a:	42b7      	cmp	r7, r6
 800478c:	f000 8084 	beq.w	8004898 <HAL_ADCEx_InjectedConfigChannel+0x508>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004790:	68ae      	ldr	r6, [r5, #8]
 8004792:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004794:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479c:	f105 070c 	add.w	r7, r5, #12
 80047a0:	46b9      	mov	r9, r7
  if (value == 0U)
 80047a2:	f1b8 0f00 	cmp.w	r8, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_ADCEx_InjectedConfigChannel+0x422>
  return __builtin_clz(value);
 80047a8:	fab8 f888 	clz	r8, r8
 80047ac:	45b0      	cmp	r8, r6
 80047ae:	f000 809c 	beq.w	80048ea <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047b2:	68ee      	ldr	r6, [r5, #12]
 80047b4:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047b6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 80047be:	2e00      	cmp	r6, #0
 80047c0:	f43f ae2d 	beq.w	800441e <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 80047c4:	fab6 f486 	clz	r4, r6
 80047c8:	42ac      	cmp	r4, r5
 80047ca:	f000 80a4 	beq.w	8004916 <HAL_ADCEx_InjectedConfigChannel+0x586>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80047ce:	4674      	mov	r4, lr
 80047d0:	e625      	b.n	800441e <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80047d2:	f85c 6004 	ldr.w	r6, [ip, r4]
 80047d6:	4035      	ands	r5, r6
 80047d8:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047dc:	695c      	ldr	r4, [r3, #20]
 80047de:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80047e2:	615c      	str	r4, [r3, #20]
}
 80047e4:	e69e      	b.n	8004524 <HAL_ADCEx_InjectedConfigChannel+0x194>
      MODIFY_REG(hadc->Instance->CFGR2,
 80047e6:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80047ea:	691e      	ldr	r6, [r3, #16]
 80047ec:	433d      	orrs	r5, r7
 80047ee:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80047f2:	4335      	orrs	r5, r6
 80047f4:	f045 0502 	orr.w	r5, r5, #2
 80047f8:	611d      	str	r5, [r3, #16]
 80047fa:	e678      	b.n	80044ee <HAL_ADCEx_InjectedConfigChannel+0x15e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80047fc:	4628      	mov	r0, r5
 80047fe:	e5f1      	b.n	80043e4 <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004800:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004804:	60d8      	str	r0, [r3, #12]
 8004806:	e668      	b.n	80044da <HAL_ADCEx_InjectedConfigChannel+0x14a>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004808:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800480c:	42a6      	cmp	r6, r4
 800480e:	d057      	beq.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x530>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004810:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8004812:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004814:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004818:	42a6      	cmp	r6, r4
 800481a:	d03b      	beq.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x504>
 800481c:	68ae      	ldr	r6, [r5, #8]
 800481e:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004820:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004824:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004828:	42a6      	cmp	r6, r4
 800482a:	d05c      	beq.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800482c:	68ee      	ldr	r6, [r5, #12]
 800482e:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004830:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004834:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8004838:	e7c6      	b.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x438>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800483a:	3c1e      	subs	r4, #30
 800483c:	0524      	lsls	r4, r4, #20
 800483e:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004842:	e70a      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004844:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8004846:	f045 0520 	orr.w	r5, r5, #32
 800484a:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 800484c:	e646      	b.n	80044dc <HAL_ADCEx_InjectedConfigChannel+0x14c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004852:	2d00      	cmp	r5, #0
 8004854:	d071      	beq.n	800493a <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return __builtin_clz(value);
 8004856:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800485a:	3501      	adds	r5, #1
 800485c:	06ad      	lsls	r5, r5, #26
 800485e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004866:	2e00      	cmp	r6, #0
 8004868:	d065      	beq.n	8004936 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
  return __builtin_clz(value);
 800486a:	fab6 f686 	clz	r6, r6
 800486e:	3601      	adds	r6, #1
 8004870:	f006 061f 	and.w	r6, r6, #31
 8004874:	2701      	movs	r7, #1
 8004876:	fa07 f606 	lsl.w	r6, r7, r6
 800487a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004880:	2c00      	cmp	r4, #0
 8004882:	d053      	beq.n	800492c <HAL_ADCEx_InjectedConfigChannel+0x59c>
  return __builtin_clz(value);
 8004884:	fab4 f484 	clz	r4, r4
 8004888:	3401      	adds	r4, #1
 800488a:	f004 041f 	and.w	r4, r4, #31
 800488e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004892:	e6e1      	b.n	8004658 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
 8004894:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 8004898:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800489a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800489e:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048a0:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048a4:	68ac      	ldr	r4, [r5, #8]
 80048a6:	68ae      	ldr	r6, [r5, #8]
 80048a8:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ac:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ae:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048b2:	4674      	mov	r4, lr
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	f47f af6f 	bne.w	8004798 <HAL_ADCEx_InjectedConfigChannel+0x408>
 80048ba:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80048be:	e7b3      	b.n	8004828 <HAL_ADCEx_InjectedConfigChannel+0x498>
  MODIFY_REG(*preg,
 80048c0:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80048c2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80048c6:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048c8:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048cc:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80048ce:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80048d0:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048d4:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048d8:	4674      	mov	r4, lr
 80048da:	2f00      	cmp	r7, #0
 80048dc:	f47f af4d 	bne.w	800477a <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80048e0:	f3ce 6484 	ubfx	r4, lr, #26, #5
 80048e4:	e798      	b.n	8004818 <HAL_ADCEx_InjectedConfigChannel+0x488>
 80048e6:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80048ea:	f8dc 4000 	ldr.w	r4, [ip]
 80048ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80048f2:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048f6:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048fa:	68ec      	ldr	r4, [r5, #12]
 80048fc:	68ed      	ldr	r5, [r5, #12]
 80048fe:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004902:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004904:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004908:	4674      	mov	r4, lr
 800490a:	2e00      	cmp	r6, #0
 800490c:	f47f af55 	bne.w	80047ba <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8004910:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8004914:	e758      	b.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 8004916:	683c      	ldr	r4, [r7, #0]
 8004918:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800491c:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800491e:	680c      	ldr	r4, [r1, #0]
}
 8004920:	e57d      	b.n	800441e <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8004922:	2602      	movs	r6, #2
 8004924:	e701      	b.n	800472a <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8004926:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800492a:	e6f1      	b.n	8004710 <HAL_ADCEx_InjectedConfigChannel+0x380>
 800492c:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8004930:	e693      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 8004932:	4c03      	ldr	r4, [pc, #12]	@ (8004940 <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 8004934:	e691      	b.n	800465a <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 8004936:	2602      	movs	r6, #2
 8004938:	e79f      	b.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 800493a:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800493e:	e790      	b.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8004940:	fe500000 	.word	0xfe500000

08004944 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004944:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004946:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800494a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800494c:	2a01      	cmp	r2, #1
{
 800494e:	b09c      	sub	sp, #112	@ 0x70
  __HAL_LOCK(hadc);
 8004950:	d042      	beq.n	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x94>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004952:	6804      	ldr	r4, [r0, #0]
 8004954:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004956:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004958:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800495a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800495e:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8004960:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004964:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004966:	d008      	beq.n	800497a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004968:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800496a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800496e:	f041 0120 	orr.w	r1, r1, #32
 8004972:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004974:	b01c      	add	sp, #112	@ 0x70
 8004976:	bcf0      	pop	{r4, r5, r6, r7}
 8004978:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800497a:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800497c:	6890      	ldr	r0, [r2, #8]
 800497e:	0740      	lsls	r0, r0, #29
 8004980:	d50b      	bpl.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004982:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004986:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800498a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800498c:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8004994:	b01c      	add	sp, #112	@ 0x70
 8004996:	bcf0      	pop	{r4, r5, r6, r7}
 8004998:	4770      	bx	lr
 800499a:	68a0      	ldr	r0, [r4, #8]
 800499c:	0746      	lsls	r6, r0, #29
 800499e:	d4f1      	bmi.n	8004984 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a0:	b1f5      	cbz	r5, 80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049a2:	4e1a      	ldr	r6, [pc, #104]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80049a4:	684f      	ldr	r7, [r1, #4]
 80049a6:	68b0      	ldr	r0, [r6, #8]
 80049a8:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80049ac:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80049b0:	4338      	orrs	r0, r7
 80049b2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80049b6:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b8:	68a0      	ldr	r0, [r4, #8]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	07c0      	lsls	r0, r0, #31
 80049be:	d420      	bmi.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80049c0:	07d7      	lsls	r7, r2, #31
 80049c2:	d41e      	bmi.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        MODIFY_REG(tmpADC_Common->CCR,
 80049c4:	68b0      	ldr	r0, [r6, #8]
 80049c6:	688a      	ldr	r2, [r1, #8]
 80049c8:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80049cc:	432a      	orrs	r2, r5
 80049ce:	f021 010f 	bic.w	r1, r1, #15
 80049d2:	430a      	orrs	r2, r1
 80049d4:	60b2      	str	r2, [r6, #8]
 80049d6:	e014      	b.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 80049d8:	2002      	movs	r0, #2
}
 80049da:	b01c      	add	sp, #112	@ 0x70
 80049dc:	bcf0      	pop	{r4, r5, r6, r7}
 80049de:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049e0:	480a      	ldr	r0, [pc, #40]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80049e2:	6881      	ldr	r1, [r0, #8]
 80049e4:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80049e8:	6081      	str	r1, [r0, #8]
 80049ea:	68a1      	ldr	r1, [r4, #8]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	07cd      	lsls	r5, r1, #31
 80049f0:	d407      	bmi.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80049f2:	07d4      	lsls	r4, r2, #31
 80049f4:	d405      	bmi.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049f6:	6882      	ldr	r2, [r0, #8]
 80049f8:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80049fc:	f022 020f 	bic.w	r2, r2, #15
 8004a00:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7c3      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004a06:	bf00      	nop
 8004a08:	50000100 	.word	0x50000100
 8004a0c:	50000300 	.word	0x50000300

08004a10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a10:	4907      	ldr	r1, [pc, #28]	@ (8004a30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004a12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a16:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a20:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a22:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004a2a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_NVIC_SetPriority+0x70>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a3e:	f1c3 0e07 	rsb	lr, r3, #7
 8004a42:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a4a:	bf28      	it	cs
 8004a4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a50:	f1bc 0f06 	cmp.w	ip, #6
 8004a54:	d91c      	bls.n	8004a90 <HAL_NVIC_SetPriority+0x5c>
 8004a56:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a62:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	fa03 f30e 	lsl.w	r3, r3, lr
 8004a6e:	ea21 0303 	bic.w	r3, r1, r3
 8004a72:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a76:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a78:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004a7e:	db0a      	blt.n	8004a96 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004a84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004a88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a90:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a92:	4694      	mov	ip, r2
 8004a94:	e7e7      	b.n	8004a66 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	4a04      	ldr	r2, [pc, #16]	@ (8004aa8 <HAL_NVIC_SetPriority+0x74>)
 8004a98:	f000 000f 	and.w	r0, r0, #15
 8004a9c:	4402      	add	r2, r0
 8004a9e:	7613      	strb	r3, [r2, #24]
 8004aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aa4:	e000ed00 	.word	0xe000ed00
 8004aa8:	e000ecfc 	.word	0xe000ecfc

08004aac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004aac:	2800      	cmp	r0, #0
 8004aae:	db07      	blt.n	8004ac0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_NVIC_EnableIRQ+0x18>)
 8004ab2:	0941      	lsrs	r1, r0, #5
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f000 001f 	and.w	r0, r0, #31
 8004aba:	4083      	lsls	r3, r0
 8004abc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	e000e100 	.word	0xe000e100

08004ac8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac8:	3801      	subs	r0, #1
 8004aca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004ace:	d301      	bcc.n	8004ad4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004ad2:	4770      	bx	lr
{
 8004ad4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ada:	4c07      	ldr	r4, [pc, #28]	@ (8004af8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004adc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ade:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004ae2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aec:	619a      	str	r2, [r3, #24]
}
 8004aee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af2:	6119      	str	r1, [r3, #16]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop

08004b00 <HAL_SYSTICK_IRQHandler>:
{
 8004b00:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004b02:	f7ff fffb 	bl	8004afc <HAL_SYSTICK_Callback>
}
 8004b06:	bd08      	pop	{r3, pc}

08004b08 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d076      	beq.n	8004bfa <HAL_DMA_Init+0xf2>
{
 8004b0c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c00 <HAL_DMA_Init+0xf8>)
 8004b10:	6804      	ldr	r4, [r0, #0]
 8004b12:	4294      	cmp	r4, r2
 8004b14:	4603      	mov	r3, r0
 8004b16:	d95c      	bls.n	8004bd2 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b18:	493a      	ldr	r1, [pc, #232]	@ (8004c04 <HAL_DMA_Init+0xfc>)
 8004b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004c08 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8004b1c:	483b      	ldr	r0, [pc, #236]	@ (8004c0c <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b1e:	4421      	add	r1, r4
 8004b20:	fba2 2101 	umull	r2, r1, r2, r1
 8004b24:	0909      	lsrs	r1, r1, #4
 8004b26:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b28:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b2a:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8004b30:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b32:	4e35      	ldr	r6, [pc, #212]	@ (8004c08 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b34:	4f36      	ldr	r7, [pc, #216]	@ (8004c10 <HAL_DMA_Init+0x108>)
 8004b36:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8004b3c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3e:	4302      	orrs	r2, r0
 8004b40:	6958      	ldr	r0, [r3, #20]
 8004b42:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b44:	6998      	ldr	r0, [r3, #24]
 8004b46:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8004b48:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b4a:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4e:	69d8      	ldr	r0, [r3, #28]
 8004b50:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b52:	b2e0      	uxtb	r0, r4
 8004b54:	3808      	subs	r0, #8
 8004b56:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b5a:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b5c:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b60:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8004b62:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8004b66:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b68:	4e25      	ldr	r6, [pc, #148]	@ (8004c00 <HAL_DMA_Init+0xf8>)
 8004b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c14 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b6c:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b70:	42b4      	cmp	r4, r6
 8004b72:	bf98      	it	ls
 8004b74:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b76:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b7a:	2401      	movs	r4, #1
 8004b7c:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b80:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b82:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b86:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b8a:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b8c:	649e      	str	r6, [r3, #72]	@ 0x48
 8004b8e:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b94:	685e      	ldr	r6, [r3, #4]
 8004b96:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b98:	3e01      	subs	r6, #1
 8004b9a:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b9c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ba4:	d824      	bhi.n	8004bf0 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ba8:	481c      	ldr	r0, [pc, #112]	@ (8004c1c <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004baa:	442a      	add	r2, r5
 8004bac:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004bae:	3d01      	subs	r5, #1
 8004bb0:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bb2:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bb4:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004bb8:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bbc:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <HAL_DMA_Init+0x118>)
 8004bbe:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc0:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8004bc2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc4:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8004bc6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8004bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8004bce:	bcf0      	pop	{r4, r5, r6, r7}
 8004bd0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bd2:	4914      	ldr	r1, [pc, #80]	@ (8004c24 <HAL_DMA_Init+0x11c>)
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004c08 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8004bd6:	4814      	ldr	r0, [pc, #80]	@ (8004c28 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bd8:	4421      	add	r1, r4
 8004bda:	fba2 2101 	umull	r2, r1, r2, r1
 8004bde:	0909      	lsrs	r1, r1, #4
 8004be0:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8004be2:	e7a1      	b.n	8004b28 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004be4:	2400      	movs	r4, #0
 8004be6:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004be8:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bec:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bf8:	e7e2      	b.n	8004bc0 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8004bfa:	2001      	movs	r0, #1
}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40020407 	.word	0x40020407
 8004c04:	bffdfbf8 	.word	0xbffdfbf8
 8004c08:	cccccccd 	.word	0xcccccccd
 8004c0c:	40020400 	.word	0x40020400
 8004c10:	40020800 	.word	0x40020800
 8004c14:	40020820 	.word	0x40020820
 8004c18:	1000823f 	.word	0x1000823f
 8004c1c:	40020940 	.word	0x40020940
 8004c20:	40020900 	.word	0x40020900
 8004c24:	bffdfff8 	.word	0xbffdfff8
 8004c28:	40020000 	.word	0x40020000

08004c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c30:	680c      	ldr	r4, [r1, #0]
{
 8004c32:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	f000 8089 	beq.w	8004d4c <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8004c3a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c3c:	f04f 0b01 	mov.w	fp, #1
 8004c40:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8004c44:	ea1e 0a04 	ands.w	sl, lr, r4
 8004c48:	d07b      	beq.n	8004d42 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c4a:	684d      	ldr	r5, [r1, #4]
 8004c4c:	f005 0203 	and.w	r2, r5, #3
 8004c50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c54:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c56:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c5a:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c5e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c62:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c66:	d974      	bls.n	8004d52 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c68:	2a03      	cmp	r2, #3
 8004c6a:	f040 80b0 	bne.w	8004dce <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8004c72:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c76:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c7a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c7c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004c80:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c82:	d05e      	beq.n	8004d42 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c84:	4f66      	ldr	r7, [pc, #408]	@ (8004e20 <HAL_GPIO_Init+0x1f4>)
 8004c86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	663a      	str	r2, [r7, #96]	@ 0x60
 8004c8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c90:	f002 0201 	and.w	r2, r2, #1
 8004c94:	9203      	str	r2, [sp, #12]
 8004c96:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c98:	f023 0203 	bic.w	r2, r3, #3
 8004c9c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004ca0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ca4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ca8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004caa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004cae:	260f      	movs	r6, #15
 8004cb0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cb4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cb8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cbc:	d01d      	beq.n	8004cfa <HAL_GPIO_Init+0xce>
 8004cbe:	4e59      	ldr	r6, [pc, #356]	@ (8004e24 <HAL_GPIO_Init+0x1f8>)
 8004cc0:	42b0      	cmp	r0, r6
 8004cc2:	f000 8097 	beq.w	8004df4 <HAL_GPIO_Init+0x1c8>
 8004cc6:	4e58      	ldr	r6, [pc, #352]	@ (8004e28 <HAL_GPIO_Init+0x1fc>)
 8004cc8:	42b0      	cmp	r0, r6
 8004cca:	f000 809a 	beq.w	8004e02 <HAL_GPIO_Init+0x1d6>
 8004cce:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8004e30 <HAL_GPIO_Init+0x204>
 8004cd2:	4570      	cmp	r0, lr
 8004cd4:	f000 8087 	beq.w	8004de6 <HAL_GPIO_Init+0x1ba>
 8004cd8:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8004e34 <HAL_GPIO_Init+0x208>
 8004cdc:	4570      	cmp	r0, lr
 8004cde:	f000 8097 	beq.w	8004e10 <HAL_GPIO_Init+0x1e4>
 8004ce2:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8004e38 <HAL_GPIO_Init+0x20c>
 8004ce6:	4570      	cmp	r0, lr
 8004ce8:	bf0c      	ite	eq
 8004cea:	f04f 0e05 	moveq.w	lr, #5
 8004cee:	f04f 0e06 	movne.w	lr, #6
 8004cf2:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004cf6:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cfa:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8004e2c <HAL_GPIO_Init+0x200>)
 8004cfe:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d00:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8004d02:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004d06:	4e49      	ldr	r6, [pc, #292]	@ (8004e2c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004d08:	bf54      	ite	pl
 8004d0a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004d0c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8004d10:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8004d12:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d14:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004d16:	4e45      	ldr	r6, [pc, #276]	@ (8004e2c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004d18:	bf54      	ite	pl
 8004d1a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004d1c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8004d20:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8004d22:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d24:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004d26:	4e41      	ldr	r6, [pc, #260]	@ (8004e2c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004d28:	bf54      	ite	pl
 8004d2a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004d2c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8004d30:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d32:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d34:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004d36:	4d3d      	ldr	r5, [pc, #244]	@ (8004e2c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004d38:	bf54      	ite	pl
 8004d3a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004d3c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8004d40:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8004d42:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d44:	fa34 f203 	lsrs.w	r2, r4, r3
 8004d48:	f47f af7a 	bne.w	8004c40 <HAL_GPIO_Init+0x14>
  }
}
 8004d4c:	b005      	add	sp, #20
 8004d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004d52:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d56:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d58:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5c:	fa06 f80c 	lsl.w	r8, r6, ip
 8004d60:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8004d64:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d68:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d6c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d6e:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d72:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8004d76:	fa0e fe03 	lsl.w	lr, lr, r3
 8004d7a:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8004d7e:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d82:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d86:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d8a:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8e:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d92:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004d94:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d98:	f47f af69 	bne.w	8004c6e <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d9c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004d9e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004da2:	f003 0e07 	and.w	lr, r3, #7
 8004da6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004daa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dae:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8004db2:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004db6:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004db8:	260f      	movs	r6, #15
 8004dba:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dbe:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dc0:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dc4:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8004dc8:	f8c8 e020 	str.w	lr, [r8, #32]
 8004dcc:	e74f      	b.n	8004c6e <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8004dce:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd2:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dd4:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004ddc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8004de0:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de4:	e743      	b.n	8004c6e <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004de6:	f04f 0e03 	mov.w	lr, #3
 8004dea:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004dee:	ea47 070c 	orr.w	r7, r7, ip
 8004df2:	e782      	b.n	8004cfa <HAL_GPIO_Init+0xce>
 8004df4:	f04f 0e01 	mov.w	lr, #1
 8004df8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004dfc:	ea47 070c 	orr.w	r7, r7, ip
 8004e00:	e77b      	b.n	8004cfa <HAL_GPIO_Init+0xce>
 8004e02:	f04f 0e02 	mov.w	lr, #2
 8004e06:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004e0a:	ea47 070c 	orr.w	r7, r7, ip
 8004e0e:	e774      	b.n	8004cfa <HAL_GPIO_Init+0xce>
 8004e10:	f04f 0e04 	mov.w	lr, #4
 8004e14:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004e18:	ea47 070c 	orr.w	r7, r7, ip
 8004e1c:	e76d      	b.n	8004cfa <HAL_GPIO_Init+0xce>
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	48000400 	.word	0x48000400
 8004e28:	48000800 	.word	0x48000800
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	48000c00 	.word	0x48000c00
 8004e34:	48001000 	.word	0x48001000
 8004e38:	48001400 	.word	0x48001400

08004e3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e3c:	b10a      	cbz	r2, 8004e42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3e:	6181      	str	r1, [r0, #24]
 8004e40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e42:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e48:	4a35      	ldr	r2, [pc, #212]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004e4a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e4c:	b960      	cbnz	r0, 8004e68 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e56:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e5a:	d01b      	beq.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
}
 8004e66:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e68:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004e6c:	d006      	beq.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e76:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004e78:	2000      	movs	r0, #0
}
 8004e7a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e84:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e88:	d029      	beq.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e92:	e7f1      	b.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e9c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e9e:	4821      	ldr	r0, [pc, #132]	@ (8004f24 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004ea0:	4921      	ldr	r1, [pc, #132]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eaa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eac:	6803      	ldr	r3, [r0, #0]
 8004eae:	2032      	movs	r0, #50	@ 0x32
 8004eb0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eb6:	fba1 1303 	umull	r1, r3, r1, r3
 8004eba:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ebc:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ebe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec2:	d506      	bpl.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004ec4:	e000      	b.n	8004ec8 <HAL_PWREx_ControlVoltageScaling+0x80>
 8004ec6:	b123      	cbz	r3, 8004ed2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004ec8:	6951      	ldr	r1, [r2, #20]
 8004eca:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004ecc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed0:	d4f9      	bmi.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ed2:	4b13      	ldr	r3, [pc, #76]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	055b      	lsls	r3, r3, #21
 8004ed8:	d5ce      	bpl.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8004eda:	2003      	movs	r0, #3
 8004edc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ee6:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ee8:	480e      	ldr	r0, [pc, #56]	@ (8004f24 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004eea:	490f      	ldr	r1, [pc, #60]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ef4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	2032      	movs	r0, #50	@ 0x32
 8004efa:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efe:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f00:	fba1 1303 	umull	r1, r3, r1, r3
 8004f04:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f06:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f08:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0c:	d5e1      	bpl.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004f0e:	e001      	b.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0de      	beq.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004f14:	6951      	ldr	r1, [r2, #20]
 8004f16:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004f18:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1c:	d5d9      	bpl.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004f1e:	e7f7      	b.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8004f20:	40007000 	.word	0x40007000
 8004f24:	20000368 	.word	0x20000368
 8004f28:	431bde83 	.word	0x431bde83

08004f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f2c:	4a02      	ldr	r2, [pc, #8]	@ (8004f38 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004f2e:	6893      	ldr	r3, [r2, #8]
 8004f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f34:	6093      	str	r3, [r2, #8]
}
 8004f36:	4770      	bx	lr
 8004f38:	40007000 	.word	0x40007000

08004f3c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f000 8239 	beq.w	80053b4 <HAL_RCC_OscConfig+0x478>
{
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	07d9      	lsls	r1, r3, #31
{
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4e:	d512      	bpl.n	8004f76 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f50:	49a3      	ldr	r1, [pc, #652]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f52:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f54:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f56:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f5a:	2a0c      	cmp	r2, #12
 8004f5c:	f000 80d6 	beq.w	800510c <HAL_RCC_OscConfig+0x1d0>
 8004f60:	2a08      	cmp	r2, #8
 8004f62:	f040 80d8 	bne.w	8005116 <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f66:	4a9e      	ldr	r2, [pc, #632]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	0392      	lsls	r2, r2, #14
 8004f6c:	d503      	bpl.n	8004f76 <HAL_RCC_OscConfig+0x3a>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	f000 81a4 	beq.w	80052be <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	079a      	lsls	r2, r3, #30
 8004f78:	d522      	bpl.n	8004fc0 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7a:	4a99      	ldr	r2, [pc, #612]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f7c:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f7e:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f80:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	f000 80fe 	beq.w	8005186 <HAL_RCC_OscConfig+0x24a>
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	f040 8100 	bne.w	8005190 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f90:	4b93      	ldr	r3, [pc, #588]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	055b      	lsls	r3, r3, #21
 8004f96:	d503      	bpl.n	8004fa0 <HAL_RCC_OscConfig+0x64>
 8004f98:	68e3      	ldr	r3, [r4, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 818f 	beq.w	80052be <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	4a8f      	ldr	r2, [pc, #572]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fa2:	6920      	ldr	r0, [r4, #16]
 8004fa4:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fa6:	498f      	ldr	r1, [pc, #572]	@ (80051e4 <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004fac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004fb0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fb2:	6808      	ldr	r0, [r1, #0]
 8004fb4:	f7fe fe4c 	bl	8003c50 <HAL_InitTick>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f040 8180 	bne.w	80052be <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	071a      	lsls	r2, r3, #28
 8004fc2:	d519      	bpl.n	8004ff8 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fc4:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4d86      	ldr	r5, [pc, #536]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80c8 	beq.w	800515e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 8004fce:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fe fe83 	bl	8003ce4 <HAL_GetTick>
 8004fde:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe0:	e005      	b.n	8004fee <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fe fe7f 	bl	8003ce4 <HAL_GetTick>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	2802      	cmp	r0, #2
 8004fea:	f200 8118 	bhi.w	800521e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fee:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004ff2:	079b      	lsls	r3, r3, #30
 8004ff4:	d5f5      	bpl.n	8004fe2 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	075d      	lsls	r5, r3, #29
 8004ffa:	d541      	bpl.n	8005080 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffc:	4b78      	ldr	r3, [pc, #480]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004ffe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005000:	00d0      	lsls	r0, r2, #3
 8005002:	f100 8110 	bmi.w	8005226 <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005008:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800500c:	659a      	str	r2, [r3, #88]	@ 0x58
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005018:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501a:	4e73      	ldr	r6, [pc, #460]	@ (80051e8 <HAL_RCC_OscConfig+0x2ac>)
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	05d9      	lsls	r1, r3, #23
 8005020:	f140 812f 	bpl.w	8005282 <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	2b01      	cmp	r3, #1
 8005028:	f000 80ff 	beq.w	800522a <HAL_RCC_OscConfig+0x2ee>
 800502c:	2b05      	cmp	r3, #5
 800502e:	f000 8185 	beq.w	800533c <HAL_RCC_OscConfig+0x400>
 8005032:	4e6b      	ldr	r6, [pc, #428]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005034:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005040:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005044:	f022 0204 	bic.w	r2, r2, #4
 8005048:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 80f3 	bne.w	8005238 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fe fe47 	bl	8003ce4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800505a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800505c:	e005      	b.n	800506a <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fe fe41 	bl	8003ce4 <HAL_GetTick>
 8005062:	1bc0      	subs	r0, r0, r7
 8005064:	4540      	cmp	r0, r8
 8005066:	f200 80da 	bhi.w	800521e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800506a:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800506e:	0799      	lsls	r1, r3, #30
 8005070:	d4f5      	bmi.n	800505e <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005072:	b125      	cbz	r5, 800507e <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005074:	4a5a      	ldr	r2, [pc, #360]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005076:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800507c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	069a      	lsls	r2, r3, #26
 8005082:	d518      	bpl.n	80050b6 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005084:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005086:	4d56      	ldr	r5, [pc, #344]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80e6 	beq.w	800525a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 800508e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fe fe23 	bl	8003ce4 <HAL_GetTick>
 800509e:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050a0:	e005      	b.n	80050ae <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a2:	f7fe fe1f 	bl	8003ce4 <HAL_GetTick>
 80050a6:	1b80      	subs	r0, r0, r6
 80050a8:	2802      	cmp	r0, #2
 80050aa:	f200 80b8 	bhi.w	800521e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ae:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d5f5      	bpl.n	80050a2 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050b6:	69e3      	ldr	r3, [r4, #28]
 80050b8:	b323      	cbz	r3, 8005104 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ba:	4d49      	ldr	r5, [pc, #292]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80050bc:	68aa      	ldr	r2, [r5, #8]
 80050be:	f002 020c 	and.w	r2, r2, #12
 80050c2:	2a0c      	cmp	r2, #12
 80050c4:	f000 8148 	beq.w	8005358 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050c8:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d2:	f000 80f6 	beq.w	80052c2 <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050d6:	68eb      	ldr	r3, [r5, #12]
 80050d8:	f023 0303 	bic.w	r3, r3, #3
 80050dc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050de:	68eb      	ldr	r3, [r5, #12]
 80050e0:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80050e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e8:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fe fdfb 	bl	8003ce4 <HAL_GetTick>
 80050ee:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f0:	e005      	b.n	80050fe <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fe fdf7 	bl	8003ce4 <HAL_GetTick>
 80050f6:	1b00      	subs	r0, r0, r4
 80050f8:	2802      	cmp	r0, #2
 80050fa:	f200 8090 	bhi.w	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fe:	682b      	ldr	r3, [r5, #0]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	d4f6      	bmi.n	80050f2 <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 8005104:	2000      	movs	r0, #0
}
 8005106:	b002      	add	sp, #8
 8005108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800510c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005110:	2903      	cmp	r1, #3
 8005112:	f43f af28 	beq.w	8004f66 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d055      	beq.n	80051ca <HAL_RCC_OscConfig+0x28e>
 800511e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005122:	f000 80bf 	beq.w	80052a4 <HAL_RCC_OscConfig+0x368>
 8005126:	4d2e      	ldr	r5, [pc, #184]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005128:	682a      	ldr	r2, [r5, #0]
 800512a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	682a      	ldr	r2, [r5, #0]
 8005132:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005136:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005138:	2b00      	cmp	r3, #0
 800513a:	d14b      	bne.n	80051d4 <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 800513c:	f7fe fdd2 	bl	8003ce4 <HAL_GetTick>
 8005140:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005142:	e004      	b.n	800514e <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fe fdce 	bl	8003ce4 <HAL_GetTick>
 8005148:	1b80      	subs	r0, r0, r6
 800514a:	2864      	cmp	r0, #100	@ 0x64
 800514c:	d867      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	0399      	lsls	r1, r3, #14
 8005152:	d4f7      	bmi.n	8005144 <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	079a      	lsls	r2, r3, #30
 8005158:	f57f af32 	bpl.w	8004fc0 <HAL_RCC_OscConfig+0x84>
 800515c:	e70d      	b.n	8004f7a <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800515e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800516a:	f7fe fdbb 	bl	8003ce4 <HAL_GetTick>
 800516e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005170:	e004      	b.n	800517c <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005172:	f7fe fdb7 	bl	8003ce4 <HAL_GetTick>
 8005176:	1b80      	subs	r0, r0, r6
 8005178:	2802      	cmp	r0, #2
 800517a:	d850      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800517c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005180:	079f      	lsls	r7, r3, #30
 8005182:	d4f6      	bmi.n	8005172 <HAL_RCC_OscConfig+0x236>
 8005184:	e737      	b.n	8004ff6 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005186:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800518a:	2a02      	cmp	r2, #2
 800518c:	f43f af00 	beq.w	8004f90 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005190:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005192:	4d13      	ldr	r5, [pc, #76]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005194:	2b00      	cmp	r3, #0
 8005196:	d032      	beq.n	80051fe <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80051a0:	f7fe fda0 	bl	8003ce4 <HAL_GetTick>
 80051a4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a6:	e004      	b.n	80051b2 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fe fd9c 	bl	8003ce4 <HAL_GetTick>
 80051ac:	1b80      	subs	r0, r0, r6
 80051ae:	2802      	cmp	r0, #2
 80051b0:	d835      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	055f      	lsls	r7, r3, #21
 80051b6:	d5f7      	bpl.n	80051a8 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	686b      	ldr	r3, [r5, #4]
 80051ba:	6922      	ldr	r2, [r4, #16]
 80051bc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80051c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80051c4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	e6fa      	b.n	8004fc0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	4a05      	ldr	r2, [pc, #20]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80051d4:	f7fe fd86 	bl	8003ce4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d8:	4e01      	ldr	r6, [pc, #4]	@ (80051e0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80051da:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051dc:	e00b      	b.n	80051f6 <HAL_RCC_OscConfig+0x2ba>
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000
 80051e4:	20000370 	.word	0x20000370
 80051e8:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fe fd7a 	bl	8003ce4 <HAL_GetTick>
 80051f0:	1b40      	subs	r0, r0, r5
 80051f2:	2864      	cmp	r0, #100	@ 0x64
 80051f4:	d813      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f6:	6833      	ldr	r3, [r6, #0]
 80051f8:	039f      	lsls	r7, r3, #14
 80051fa:	d5f7      	bpl.n	80051ec <HAL_RCC_OscConfig+0x2b0>
 80051fc:	e7aa      	b.n	8005154 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005204:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005206:	f7fe fd6d 	bl	8003ce4 <HAL_GetTick>
 800520a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	0559      	lsls	r1, r3, #21
 8005210:	f57f aed5 	bpl.w	8004fbe <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fe fd66 	bl	8003ce4 <HAL_GetTick>
 8005218:	1b80      	subs	r0, r0, r6
 800521a:	2802      	cmp	r0, #2
 800521c:	d9f6      	bls.n	800520c <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 800521e:	2003      	movs	r0, #3
}
 8005220:	b002      	add	sp, #8
 8005222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2500      	movs	r5, #0
 8005228:	e6f7      	b.n	800501a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800522a:	4a63      	ldr	r2, [pc, #396]	@ (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800522c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005238:	f7fe fd54 	bl	8003ce4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	4f5e      	ldr	r7, [pc, #376]	@ (80053b8 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 800523e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005244:	e004      	b.n	8005250 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fe fd4d 	bl	8003ce4 <HAL_GetTick>
 800524a:	1b80      	subs	r0, r0, r6
 800524c:	4540      	cmp	r0, r8
 800524e:	d8e6      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005250:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005254:	079b      	lsls	r3, r3, #30
 8005256:	d5f6      	bpl.n	8005246 <HAL_RCC_OscConfig+0x30a>
 8005258:	e70b      	b.n	8005072 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 800525a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005266:	f7fe fd3d 	bl	8003ce4 <HAL_GetTick>
 800526a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800526c:	e004      	b.n	8005278 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526e:	f7fe fd39 	bl	8003ce4 <HAL_GetTick>
 8005272:	1b80      	subs	r0, r0, r6
 8005274:	2802      	cmp	r0, #2
 8005276:	d8d2      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005278:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800527c:	079f      	lsls	r7, r3, #30
 800527e:	d4f6      	bmi.n	800526e <HAL_RCC_OscConfig+0x332>
 8005280:	e719      	b.n	80050b6 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005282:	6833      	ldr	r3, [r6, #0]
 8005284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005288:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800528a:	f7fe fd2b 	bl	8003ce4 <HAL_GetTick>
 800528e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	05da      	lsls	r2, r3, #23
 8005294:	f53f aec6 	bmi.w	8005024 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fe fd24 	bl	8003ce4 <HAL_GetTick>
 800529c:	1bc0      	subs	r0, r0, r7
 800529e:	2802      	cmp	r0, #2
 80052a0:	d9f6      	bls.n	8005290 <HAL_RCC_OscConfig+0x354>
 80052a2:	e7bc      	b.n	800521e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052a8:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80052ba:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052bc:	e78a      	b.n	80051d4 <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 80052be:	2001      	movs	r0, #1
 80052c0:	e721      	b.n	8005106 <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 80052c2:	f7fe fd0f 	bl	8003ce4 <HAL_GetTick>
 80052c6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c8:	e004      	b.n	80052d4 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ca:	f7fe fd0b 	bl	8003ce4 <HAL_GetTick>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	2802      	cmp	r0, #2
 80052d2:	d8a4      	bhi.n	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	0199      	lsls	r1, r3, #6
 80052d8:	d4f7      	bmi.n	80052ca <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052da:	68e9      	ldr	r1, [r5, #12]
 80052dc:	4b37      	ldr	r3, [pc, #220]	@ (80053bc <HAL_RCC_OscConfig+0x480>)
 80052de:	6a22      	ldr	r2, [r4, #32]
 80052e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e2:	4e35      	ldr	r6, [pc, #212]	@ (80053b8 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e4:	400b      	ands	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 80052ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052f0:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80052f4:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 80052f8:	3801      	subs	r0, #1
 80052fa:	0849      	lsrs	r1, r1, #1
 80052fc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005300:	3901      	subs	r1, #1
 8005302:	0852      	lsrs	r2, r2, #1
 8005304:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005308:	3a01      	subs	r2, #1
 800530a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800530e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005316:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005318:	68eb      	ldr	r3, [r5, #12]
 800531a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800531e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005320:	f7fe fce0 	bl	8003ce4 <HAL_GetTick>
 8005324:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	e005      	b.n	8005334 <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fe fcdc 	bl	8003ce4 <HAL_GetTick>
 800532c:	1b00      	subs	r0, r0, r4
 800532e:	2802      	cmp	r0, #2
 8005330:	f63f af75 	bhi.w	800521e <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	d5f6      	bpl.n	8005328 <HAL_RCC_OscConfig+0x3ec>
 800533a:	e6e3      	b.n	8005104 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800533e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005342:	f042 0204 	orr.w	r2, r2, #4
 8005346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800534a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005356:	e76f      	b.n	8005238 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005358:	2b01      	cmp	r3, #1
 800535a:	d0b0      	beq.n	80052be <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 800535c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	6a22      	ldr	r2, [r4, #32]
 8005360:	f003 0103 	and.w	r1, r3, #3
 8005364:	4291      	cmp	r1, r2
 8005366:	d1aa      	bne.n	80052be <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005368:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800536a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800536e:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005370:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005374:	d1a3      	bne.n	80052be <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005376:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005378:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800537c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005380:	d19d      	bne.n	80052be <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005382:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005384:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005388:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800538c:	d197      	bne.n	80052be <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005390:	0852      	lsrs	r2, r2, #1
 8005392:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005396:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005398:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800539c:	d18f      	bne.n	80052be <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800539e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80053a0:	0852      	lsrs	r2, r2, #1
 80053a2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80053a6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80053ac:	bf14      	ite	ne
 80053ae:	2001      	movne	r0, #1
 80053b0:	2000      	moveq	r0, #0
 80053b2:	e6a8      	b.n	8005106 <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 80053b4:	2001      	movs	r0, #1
}
 80053b6:	4770      	bx	lr
 80053b8:	40021000 	.word	0x40021000
 80053bc:	019f800c 	.word	0x019f800c

080053c0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053c0:	4b18      	ldr	r3, [pc, #96]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x64>)
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	f002 020c 	and.w	r2, r2, #12
 80053c8:	2a04      	cmp	r2, #4
 80053ca:	d026      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	f002 020c 	and.w	r2, r2, #12
 80053d2:	2a08      	cmp	r2, #8
 80053d4:	d023      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	f002 020c 	and.w	r2, r2, #12
 80053dc:	2a0c      	cmp	r2, #12
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80053e0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80053e2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e6:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e8:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ea:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80053ee:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f4:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f8:	bf0c      	ite	eq
 80053fa:	4b0b      	ldreq	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053fc:	4b0b      	ldrne	r3, [pc, #44]	@ (800542c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053fe:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005400:	fbb3 f3f2 	udiv	r3, r3, r2
 8005404:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x64>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005410:	3301      	adds	r3, #1
 8005412:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005414:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005418:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800541a:	4804      	ldr	r0, [pc, #16]	@ (800542c <HAL_RCC_GetSysClockFreq+0x6c>)
 800541c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800541e:	4802      	ldr	r0, [pc, #8]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x68>)
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	016e3600 	.word	0x016e3600
 800542c:	00f42400 	.word	0x00f42400

08005430 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005430:	2800      	cmp	r0, #0
 8005432:	f000 80ee 	beq.w	8005612 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005436:	4a78      	ldr	r2, [pc, #480]	@ (8005618 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	428b      	cmp	r3, r1
 8005444:	460d      	mov	r5, r1
 8005446:	4604      	mov	r4, r0
 8005448:	d20c      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	f023 030f 	bic.w	r3, r3, #15
 8005450:	430b      	orrs	r3, r1
 8005452:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	428b      	cmp	r3, r1
 800545c:	d002      	beq.n	8005464 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800545e:	2001      	movs	r0, #1
}
 8005460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	07df      	lsls	r7, r3, #31
 8005468:	d569      	bpl.n	800553e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546a:	6867      	ldr	r7, [r4, #4]
 800546c:	2f03      	cmp	r7, #3
 800546e:	f000 80a0 	beq.w	80055b2 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005472:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005474:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005476:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005478:	f000 8097 	beq.w	80055aa <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800547c:	055b      	lsls	r3, r3, #21
 800547e:	d5ee      	bpl.n	800545e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005480:	f7ff ff9e 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005484:	4b66      	ldr	r3, [pc, #408]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	4298      	cmp	r0, r3
 8005488:	f240 80c0 	bls.w	800560c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800548c:	4a63      	ldr	r2, [pc, #396]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 800548e:	6893      	ldr	r3, [r2, #8]
 8005490:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005498:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800549a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800549e:	4e5f      	ldr	r6, [pc, #380]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 80054a0:	68b3      	ldr	r3, [r6, #8]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	433b      	orrs	r3, r7
 80054a8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80054aa:	f7fe fc1b 	bl	8003ce4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ae:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80054b2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b4:	e004      	b.n	80054c0 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b6:	f7fe fc15 	bl	8003ce4 <HAL_GetTick>
 80054ba:	1bc0      	subs	r0, r0, r7
 80054bc:	4540      	cmp	r0, r8
 80054be:	d871      	bhi.n	80055a4 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c0:	68b3      	ldr	r3, [r6, #8]
 80054c2:	6862      	ldr	r2, [r4, #4]
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054cc:	d1f3      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	079f      	lsls	r7, r3, #30
 80054d2:	d436      	bmi.n	8005542 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054da:	68b3      	ldr	r3, [r6, #8]
 80054dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e2:	4e4d      	ldr	r6, [pc, #308]	@ (8005618 <HAL_RCC_ClockConfig+0x1e8>)
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	d846      	bhi.n	800557c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	075a      	lsls	r2, r3, #29
 80054f2:	d506      	bpl.n	8005502 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f4:	4949      	ldr	r1, [pc, #292]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 80054f6:	68e0      	ldr	r0, [r4, #12]
 80054f8:	688a      	ldr	r2, [r1, #8]
 80054fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054fe:	4302      	orrs	r2, r0
 8005500:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005502:	071b      	lsls	r3, r3, #28
 8005504:	d507      	bpl.n	8005516 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005506:	4a45      	ldr	r2, [pc, #276]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 8005508:	6921      	ldr	r1, [r4, #16]
 800550a:	6893      	ldr	r3, [r2, #8]
 800550c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005510:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005514:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005516:	f7ff ff53 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
 800551a:	4a40      	ldr	r2, [pc, #256]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 800551c:	4c41      	ldr	r4, [pc, #260]	@ (8005624 <HAL_RCC_ClockConfig+0x1f4>)
 800551e:	6892      	ldr	r2, [r2, #8]
 8005520:	4941      	ldr	r1, [pc, #260]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 8005522:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005526:	4603      	mov	r3, r0
 8005528:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800552a:	4840      	ldr	r0, [pc, #256]	@ (800562c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800552c:	f002 021f 	and.w	r2, r2, #31
 8005530:	40d3      	lsrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005534:	6800      	ldr	r0, [r0, #0]
}
 8005536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800553a:	f7fe bb89 	b.w	8003c50 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553e:	079e      	lsls	r6, r3, #30
 8005540:	d5cf      	bpl.n	80054e2 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005542:	0758      	lsls	r0, r3, #29
 8005544:	d504      	bpl.n	8005550 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005546:	4935      	ldr	r1, [pc, #212]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800554e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	0719      	lsls	r1, r3, #28
 8005552:	d506      	bpl.n	8005562 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005554:	4a31      	ldr	r2, [pc, #196]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 8005556:	6893      	ldr	r3, [r2, #8]
 8005558:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800555c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005560:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005562:	4a2e      	ldr	r2, [pc, #184]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4e2b      	ldr	r6, [pc, #172]	@ (8005618 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556e:	430b      	orrs	r3, r1
 8005570:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005572:	6833      	ldr	r3, [r6, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	42ab      	cmp	r3, r5
 800557a:	d9b8      	bls.n	80054ee <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	f023 030f 	bic.w	r3, r3, #15
 8005582:	432b      	orrs	r3, r5
 8005584:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005586:	f7fe fbad 	bl	8003ce4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800558e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	42ab      	cmp	r3, r5
 8005598:	d0a9      	beq.n	80054ee <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559a:	f7fe fba3 	bl	8003ce4 <HAL_GetTick>
 800559e:	1bc0      	subs	r0, r0, r7
 80055a0:	4540      	cmp	r0, r8
 80055a2:	d9f5      	bls.n	8005590 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80055a4:	2003      	movs	r0, #3
}
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055aa:	039a      	lsls	r2, r3, #14
 80055ac:	f53f af68 	bmi.w	8005480 <HAL_RCC_ClockConfig+0x50>
 80055b0:	e755      	b.n	800545e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	0188      	lsls	r0, r1, #6
 80055b8:	f57f af51 	bpl.w	800545e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055bc:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055be:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055c0:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80055c2:	4e17      	ldr	r6, [pc, #92]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055c4:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80055c8:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ca:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055ce:	bf0c      	ite	eq
 80055d0:	4817      	ldreq	r0, [pc, #92]	@ (8005630 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d2:	4818      	ldrne	r0, [pc, #96]	@ (8005634 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d4:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d6:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055da:	4810      	ldr	r0, [pc, #64]	@ (800561c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055dc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80055e0:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055e4:	68c1      	ldr	r1, [r0, #12]
 80055e6:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80055ea:	3101      	adds	r1, #1
 80055ec:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80055ee:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80055f2:	42b2      	cmp	r2, r6
 80055f4:	d90a      	bls.n	800560c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055f6:	6882      	ldr	r2, [r0, #8]
 80055f8:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80055fc:	f43f af46 	beq.w	800548c <HAL_RCC_ClockConfig+0x5c>
 8005600:	0799      	lsls	r1, r3, #30
 8005602:	d503      	bpl.n	800560c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005604:	68a3      	ldr	r3, [r4, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f43f af40 	beq.w	800548c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800560c:	f04f 0900 	mov.w	r9, #0
 8005610:	e745      	b.n	800549e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005612:	2001      	movs	r0, #1
}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40022000 	.word	0x40022000
 800561c:	40021000 	.word	0x40021000
 8005620:	04c4b400 	.word	0x04c4b400
 8005624:	08008760 	.word	0x08008760
 8005628:	20000368 	.word	0x20000368
 800562c:	20000370 	.word	0x20000370
 8005630:	016e3600 	.word	0x016e3600
 8005634:	00f42400 	.word	0x00f42400

08005638 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005638:	4b01      	ldr	r3, [pc, #4]	@ (8005640 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000368 	.word	0x20000368

08005644 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005646:	4a06      	ldr	r2, [pc, #24]	@ (8005660 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005648:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800564a:	4906      	ldr	r1, [pc, #24]	@ (8005664 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800564c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	f003 031f 	and.w	r3, r3, #31
}
 8005658:	40d8      	lsrs	r0, r3
 800565a:	4770      	bx	lr
 800565c:	40021000 	.word	0x40021000
 8005660:	08008758 	.word	0x08008758
 8005664:	20000368 	.word	0x20000368

08005668 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <HAL_RCC_GetPCLK2Freq+0x18>)
 800566a:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800566c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800566e:	4906      	ldr	r1, [pc, #24]	@ (8005688 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005670:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
}
 800567c:	40d8      	lsrs	r0, r3
 800567e:	4770      	bx	lr
 8005680:	40021000 	.word	0x40021000
 8005684:	08008758 	.word	0x08008758
 8005688:	20000368 	.word	0x20000368

0800568c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800568c:	4a02      	ldr	r2, [pc, #8]	@ (8005698 <HAL_RCC_EnableCSS+0xc>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	4770      	bx	lr
 8005698:	40021000 	.word	0x40021000

0800569c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a0:	6803      	ldr	r3, [r0, #0]
{
 80056a2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a4:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 80056a8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056aa:	d052      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ac:	4ba1      	ldr	r3, [pc, #644]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80056ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056b0:	00d5      	lsls	r5, r2, #3
 80056b2:	f140 8108 	bpl.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b8:	4d9f      	ldr	r5, [pc, #636]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c2:	f7fe fb0f 	bl	8003ce4 <HAL_GetTick>
 80056c6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056c8:	e005      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7fe fb0b 	bl	8003ce4 <HAL_GetTick>
 80056ce:	1b83      	subs	r3, r0, r6
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f200 8103 	bhi.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	05d8      	lsls	r0, r3, #23
 80056da:	d5f6      	bpl.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056dc:	4d95      	ldr	r5, [pc, #596]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056e4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80056e8:	d026      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d024      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ee:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056f2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fa:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056fe:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005706:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800570a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800570e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005710:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005714:	d510      	bpl.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005716:	f7fe fae5 	bl	8003ce4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800571e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005720:	e005      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fe fadf 	bl	8003ce4 <HAL_GetTick>
 8005726:	1b80      	subs	r0, r0, r6
 8005728:	4540      	cmp	r0, r8
 800572a:	f200 80d7 	bhi.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005732:	079b      	lsls	r3, r3, #30
 8005734:	d5f5      	bpl.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005736:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005738:	497e      	ldr	r1, [pc, #504]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800573a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800573e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005748:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800574a:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 800574c:	2f00      	cmp	r7, #0
 800574e:	f040 80ca 	bne.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005752:	07de      	lsls	r6, r3, #31
 8005754:	d508      	bpl.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005756:	4977      	ldr	r1, [pc, #476]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005758:	6865      	ldr	r5, [r4, #4]
 800575a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800575e:	f022 0203 	bic.w	r2, r2, #3
 8005762:	432a      	orrs	r2, r5
 8005764:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005768:	079d      	lsls	r5, r3, #30
 800576a:	d508      	bpl.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800576c:	4971      	ldr	r1, [pc, #452]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800576e:	68a5      	ldr	r5, [r4, #8]
 8005770:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005774:	f022 020c 	bic.w	r2, r2, #12
 8005778:	432a      	orrs	r2, r5
 800577a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800577e:	0759      	lsls	r1, r3, #29
 8005780:	d508      	bpl.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005782:	496c      	ldr	r1, [pc, #432]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005784:	68e5      	ldr	r5, [r4, #12]
 8005786:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800578a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800578e:	432a      	orrs	r2, r5
 8005790:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005794:	071a      	lsls	r2, r3, #28
 8005796:	d508      	bpl.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005798:	4966      	ldr	r1, [pc, #408]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800579a:	6925      	ldr	r5, [r4, #16]
 800579c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057a0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80057a4:	432a      	orrs	r2, r5
 80057a6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057aa:	069f      	lsls	r7, r3, #26
 80057ac:	d508      	bpl.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ae:	4961      	ldr	r1, [pc, #388]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80057b0:	6965      	ldr	r5, [r4, #20]
 80057b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057ba:	432a      	orrs	r2, r5
 80057bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057c0:	065e      	lsls	r6, r3, #25
 80057c2:	d508      	bpl.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c4:	495b      	ldr	r1, [pc, #364]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80057c6:	69a5      	ldr	r5, [r4, #24]
 80057c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057cc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80057d0:	432a      	orrs	r2, r5
 80057d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d6:	061d      	lsls	r5, r3, #24
 80057d8:	d508      	bpl.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057da:	4956      	ldr	r1, [pc, #344]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80057dc:	69e5      	ldr	r5, [r4, #28]
 80057de:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80057e6:	432a      	orrs	r2, r5
 80057e8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ec:	05d9      	lsls	r1, r3, #23
 80057ee:	d508      	bpl.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057f0:	4950      	ldr	r1, [pc, #320]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80057f2:	6a25      	ldr	r5, [r4, #32]
 80057f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057f8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80057fc:	432a      	orrs	r2, r5
 80057fe:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005802:	059a      	lsls	r2, r3, #22
 8005804:	d508      	bpl.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005806:	494b      	ldr	r1, [pc, #300]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005808:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800580a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800580e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005812:	432a      	orrs	r2, r5
 8005814:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005818:	055f      	lsls	r7, r3, #21
 800581a:	d50b      	bpl.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800581c:	4945      	ldr	r1, [pc, #276]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800581e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005820:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005824:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005828:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800582a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800582e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005832:	d05e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005834:	051e      	lsls	r6, r3, #20
 8005836:	d50b      	bpl.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005838:	493e      	ldr	r1, [pc, #248]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800583a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800583c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005840:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005844:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005846:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800584a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800584e:	d055      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005850:	04dd      	lsls	r5, r3, #19
 8005852:	d50b      	bpl.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005854:	4937      	ldr	r1, [pc, #220]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005856:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8005858:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800585c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005860:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005862:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005866:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800586a:	d04c      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800586c:	0499      	lsls	r1, r3, #18
 800586e:	d50b      	bpl.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005870:	4930      	ldr	r1, [pc, #192]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005872:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8005874:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005878:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800587c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800587e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005882:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005886:	d043      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005888:	045a      	lsls	r2, r3, #17
 800588a:	d50b      	bpl.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800588c:	4929      	ldr	r1, [pc, #164]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800588e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005890:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005894:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005898:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589a:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800589e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058a2:	d03a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	d50b      	bpl.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058a8:	4a22      	ldr	r2, [pc, #136]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80058aa:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80058ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80058b0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80058b4:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058b6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058be:	d031      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 80058c0:	b002      	add	sp, #8
 80058c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80058cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80058ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058d8:	2701      	movs	r7, #1
 80058da:	e6ed      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058dc:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80058de:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f43f af36 	beq.w	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4913      	ldr	r1, [pc, #76]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80058e8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80058ea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80058ee:	658a      	str	r2, [r1, #88]	@ 0x58
 80058f0:	e72f      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f2:	68ca      	ldr	r2, [r1, #12]
 80058f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80058f8:	60ca      	str	r2, [r1, #12]
 80058fa:	e79b      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	68ca      	ldr	r2, [r1, #12]
 80058fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005902:	60ca      	str	r2, [r1, #12]
 8005904:	e7a4      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005906:	68ca      	ldr	r2, [r1, #12]
 8005908:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800590c:	60ca      	str	r2, [r1, #12]
 800590e:	e7ad      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	68ca      	ldr	r2, [r1, #12]
 8005912:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005916:	60ca      	str	r2, [r1, #12]
 8005918:	e7b6      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591a:	68ca      	ldr	r2, [r1, #12]
 800591c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005920:	60ca      	str	r2, [r1, #12]
 8005922:	e7bf      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005924:	68d3      	ldr	r3, [r2, #12]
 8005926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592a:	60d3      	str	r3, [r2, #12]
}
 800592c:	b002      	add	sp, #8
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	40007000 	.word	0x40007000

0800593c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593c:	6a03      	ldr	r3, [r0, #32]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005944:	6a03      	ldr	r3, [r0, #32]
{
 8005946:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800594e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005952:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005956:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005958:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800595a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800595e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005960:	4d13      	ldr	r5, [pc, #76]	@ (80059b0 <TIM_OC1_SetConfig+0x74>)
 8005962:	42a8      	cmp	r0, r5
 8005964:	d00f      	beq.n	8005986 <TIM_OC1_SetConfig+0x4a>
 8005966:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800596a:	42a8      	cmp	r0, r5
 800596c:	d00b      	beq.n	8005986 <TIM_OC1_SetConfig+0x4a>
 800596e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005972:	42a8      	cmp	r0, r5
 8005974:	d007      	beq.n	8005986 <TIM_OC1_SetConfig+0x4a>
 8005976:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800597a:	42a8      	cmp	r0, r5
 800597c:	d003      	beq.n	8005986 <TIM_OC1_SetConfig+0x4a>
 800597e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005982:	42a8      	cmp	r0, r5
 8005984:	d10d      	bne.n	80059a2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005986:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005988:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800598c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800598e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005992:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005996:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800599a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800599e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80059a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80059a6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80059a8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80059aa:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80059ac:	6203      	str	r3, [r0, #32]
}
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00

080059b4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b4:	6a03      	ldr	r3, [r0, #32]
 80059b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059bc:	6a03      	ldr	r3, [r0, #32]
{
 80059be:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80059ca:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80059ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80059d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059da:	4d14      	ldr	r5, [pc, #80]	@ (8005a2c <TIM_OC3_SetConfig+0x78>)
 80059dc:	42a8      	cmp	r0, r5
 80059de:	d00f      	beq.n	8005a00 <TIM_OC3_SetConfig+0x4c>
 80059e0:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80059e4:	42a8      	cmp	r0, r5
 80059e6:	d00b      	beq.n	8005a00 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	4d11      	ldr	r5, [pc, #68]	@ (8005a30 <TIM_OC3_SetConfig+0x7c>)
 80059ea:	42a8      	cmp	r0, r5
 80059ec:	d00f      	beq.n	8005a0e <TIM_OC3_SetConfig+0x5a>
 80059ee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80059f2:	42a8      	cmp	r0, r5
 80059f4:	d00b      	beq.n	8005a0e <TIM_OC3_SetConfig+0x5a>
 80059f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80059fa:	42a8      	cmp	r0, r5
 80059fc:	d10f      	bne.n	8005a1e <TIM_OC3_SetConfig+0x6a>
 80059fe:	e006      	b.n	8005a0e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a00:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a12:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a16:	ea46 0c05 	orr.w	ip, r6, r5
 8005a1a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005a20:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005a24:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005a26:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005a28:	6203      	str	r3, [r0, #32]
}
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40014000 	.word	0x40014000

08005a34 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a34:	6a03      	ldr	r3, [r0, #32]
 8005a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3c:	6a03      	ldr	r3, [r0, #32]
{
 8005a3e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a46:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005a4a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a58:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a5c:	4d14      	ldr	r5, [pc, #80]	@ (8005ab0 <TIM_OC4_SetConfig+0x7c>)
 8005a5e:	42a8      	cmp	r0, r5
 8005a60:	d00f      	beq.n	8005a82 <TIM_OC4_SetConfig+0x4e>
 8005a62:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005a66:	42a8      	cmp	r0, r5
 8005a68:	d00b      	beq.n	8005a82 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	4d12      	ldr	r5, [pc, #72]	@ (8005ab4 <TIM_OC4_SetConfig+0x80>)
 8005a6c:	42a8      	cmp	r0, r5
 8005a6e:	d00f      	beq.n	8005a90 <TIM_OC4_SetConfig+0x5c>
 8005a70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005a74:	42a8      	cmp	r0, r5
 8005a76:	d00b      	beq.n	8005a90 <TIM_OC4_SetConfig+0x5c>
 8005a78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005a7c:	42a8      	cmp	r0, r5
 8005a7e:	d10f      	bne.n	8005aa0 <TIM_OC4_SetConfig+0x6c>
 8005a80:	e006      	b.n	8005a90 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a88:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a90:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a94:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a98:	ea46 0c05 	orr.w	ip, r6, r5
 8005a9c:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aa0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005aa2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005aa4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005aa6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8005aa8:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005aaa:	6203      	str	r3, [r0, #32]
}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40014000 	.word	0x40014000

08005ab8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d06d      	beq.n	8005b98 <HAL_TIM_Base_Init+0xe0>
{
 8005abc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005abe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d060      	beq.n	8005b8e <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005acc:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ace:	4e33      	ldr	r6, [pc, #204]	@ (8005b9c <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad4:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005adc:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005ade:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	d044      	beq.n	8005b6c <HAL_TIM_Base_Init+0xb4>
 8005ae2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005ae6:	d017      	beq.n	8005b18 <HAL_TIM_Base_Init+0x60>
 8005ae8:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005aec:	42b2      	cmp	r2, r6
 8005aee:	d013      	beq.n	8005b18 <HAL_TIM_Base_Init+0x60>
 8005af0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005af4:	42b2      	cmp	r2, r6
 8005af6:	d00f      	beq.n	8005b18 <HAL_TIM_Base_Init+0x60>
 8005af8:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005afc:	42b2      	cmp	r2, r6
 8005afe:	d035      	beq.n	8005b6c <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b00:	4e27      	ldr	r6, [pc, #156]	@ (8005ba0 <HAL_TIM_Base_Init+0xe8>)
 8005b02:	42b2      	cmp	r2, r6
 8005b04:	d036      	beq.n	8005b74 <HAL_TIM_Base_Init+0xbc>
 8005b06:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005b0a:	42b2      	cmp	r2, r6
 8005b0c:	d032      	beq.n	8005b74 <HAL_TIM_Base_Init+0xbc>
 8005b0e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005b12:	42b2      	cmp	r2, r6
 8005b14:	d108      	bne.n	8005b28 <HAL_TIM_Base_Init+0x70>
 8005b16:	e02d      	b.n	8005b74 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8005b18:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b1e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b20:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b26:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005b2e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b32:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	2301      	movs	r3, #1
 8005b36:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b38:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b40:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b44:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b48:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005b4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b54:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005b5c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005b60:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005b68:	2000      	movs	r0, #0
}
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b72:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b74:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b80:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005b82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b84:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b86:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b88:	6963      	ldr	r3, [r4, #20]
 8005b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b8c:	e7d2      	b.n	8005b34 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005b92:	f7fd fdb1 	bl	80036f8 <HAL_TIM_Base_MspInit>
 8005b96:	e799      	b.n	8005acc <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8005b98:	2001      	movs	r0, #1
}
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40014000 	.word	0x40014000

08005ba4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop

08005ba8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d06d      	beq.n	8005c88 <HAL_TIM_PWM_Init+0xe0>
{
 8005bac:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d060      	beq.n	8005c7e <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbc:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bbe:	4e33      	ldr	r6, [pc, #204]	@ (8005c8c <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005bc0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005bce:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	d044      	beq.n	8005c5c <HAL_TIM_PWM_Init+0xb4>
 8005bd2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005bd6:	d017      	beq.n	8005c08 <HAL_TIM_PWM_Init+0x60>
 8005bd8:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005bdc:	42b2      	cmp	r2, r6
 8005bde:	d013      	beq.n	8005c08 <HAL_TIM_PWM_Init+0x60>
 8005be0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005be4:	42b2      	cmp	r2, r6
 8005be6:	d00f      	beq.n	8005c08 <HAL_TIM_PWM_Init+0x60>
 8005be8:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005bec:	42b2      	cmp	r2, r6
 8005bee:	d035      	beq.n	8005c5c <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bf0:	4e27      	ldr	r6, [pc, #156]	@ (8005c90 <HAL_TIM_PWM_Init+0xe8>)
 8005bf2:	42b2      	cmp	r2, r6
 8005bf4:	d036      	beq.n	8005c64 <HAL_TIM_PWM_Init+0xbc>
 8005bf6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005bfa:	42b2      	cmp	r2, r6
 8005bfc:	d032      	beq.n	8005c64 <HAL_TIM_PWM_Init+0xbc>
 8005bfe:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005c02:	42b2      	cmp	r2, r6
 8005c04:	d108      	bne.n	8005c18 <HAL_TIM_PWM_Init+0x70>
 8005c06:	e02d      	b.n	8005c64 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8005c08:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c0e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c10:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c1c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005c1e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c20:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c22:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	2301      	movs	r3, #1
 8005c26:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005c30:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005c34:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005c38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005c3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005c48:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005c4c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005c50:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005c58:	2000      	movs	r0, #0
}
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c62:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c64:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c70:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005c72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c74:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c76:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	6963      	ldr	r3, [r4, #20]
 8005c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c7c:	e7d2      	b.n	8005c24 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005c82:	f7ff ff8f 	bl	8005ba4 <HAL_TIM_PWM_MspInit>
 8005c86:	e799      	b.n	8005bbc <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8005c88:	2001      	movs	r0, #1
}
 8005c8a:	4770      	bx	lr
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40014000 	.word	0x40014000

08005c94 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005c94:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f000 8086 	beq.w	8005daa <HAL_TIM_ConfigClockSource+0x116>
 8005c9e:	4602      	mov	r2, r0
{
 8005ca0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca2:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005caa:	2001      	movs	r0, #1
 8005cac:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e24 <HAL_TIM_ConfigClockSource+0x190>)
 8005cb4:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005cb6:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005cb8:	680b      	ldr	r3, [r1, #0]
 8005cba:	2b70      	cmp	r3, #112	@ 0x70
 8005cbc:	f000 80a1 	beq.w	8005e02 <HAL_TIM_ConfigClockSource+0x16e>
 8005cc0:	d827      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x7e>
 8005cc2:	2b50      	cmp	r3, #80	@ 0x50
 8005cc4:	d073      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x11a>
 8005cc6:	d93c      	bls.n	8005d42 <HAL_TIM_ConfigClockSource+0xae>
 8005cc8:	2b60      	cmp	r3, #96	@ 0x60
 8005cca:	d11a      	bne.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ccc:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cce:	6848      	ldr	r0, [r1, #4]
 8005cd0:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd8:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005cda:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cdc:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cec:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005cee:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf0:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfa:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfe:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d02:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005d04:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005d0a:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005d0e:	bc30      	pop	{r4, r5}
 8005d10:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d16:	d064      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x14e>
 8005d18:	d936      	bls.n	8005d88 <HAL_TIM_ConfigClockSource+0xf4>
 8005d1a:	4943      	ldr	r1, [pc, #268]	@ (8005e28 <HAL_TIM_ConfigClockSource+0x194>)
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	d006      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
 8005d20:	d92b      	bls.n	8005d7a <HAL_TIM_ConfigClockSource+0xe6>
 8005d22:	4942      	ldr	r1, [pc, #264]	@ (8005e2c <HAL_TIM_ConfigClockSource+0x198>)
 8005d24:	428b      	cmp	r3, r1
 8005d26:	d002      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
 8005d28:	3130      	adds	r1, #48	@ 0x30
 8005d2a:	428b      	cmp	r3, r1
 8005d2c:	d1e9      	bne.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8005d2e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d30:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005d34:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d38:	4319      	orrs	r1, r3
 8005d3a:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005d3e:	60a1      	str	r1, [r4, #8]
}
 8005d40:	e025      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d125      	bne.n	8005d92 <HAL_TIM_ConfigClockSource+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	684b      	ldr	r3, [r1, #4]
 8005d48:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d4a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d4c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005d50:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	6a23      	ldr	r3, [r4, #32]
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d60:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005d64:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d66:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d68:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d72:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005d76:	60a3      	str	r3, [r4, #8]
}
 8005d78:	e009      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 8005d7a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d7e:	d0d6      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
 8005d80:	3910      	subs	r1, #16
 8005d82:	428b      	cmp	r3, r1
 8005d84:	d0d3      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
 8005d86:	e7bc      	b.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8c:	d1b9      	bne.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e7b7      	b.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005d92:	d8b6      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d0ca      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
 8005d98:	d903      	bls.n	8005da2 <HAL_TIM_ConfigClockSource+0x10e>
 8005d9a:	2b30      	cmp	r3, #48	@ 0x30
 8005d9c:	d0c7      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e7af      	b.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005da2:	f033 0110 	bics.w	r1, r3, #16
 8005da6:	d1ac      	bne.n	8005d02 <HAL_TIM_ConfigClockSource+0x6e>
 8005da8:	e7c1      	b.n	8005d2e <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8005daa:	2002      	movs	r0, #2
}
 8005dac:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	684b      	ldr	r3, [r1, #4]
 8005db0:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005db2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005db8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dba:	6a23      	ldr	r3, [r4, #32]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005dcc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005dce:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005dd0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dda:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005dde:	60a3      	str	r3, [r4, #8]
}
 8005de0:	e7d5      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005de6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de8:	432b      	orrs	r3, r5
 8005dea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005df4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df6:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	68a3      	ldr	r3, [r4, #8]
 8005dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dfe:	60a3      	str	r3, [r4, #8]
      break;
 8005e00:	e7c5      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e02:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e06:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e08:	432b      	orrs	r3, r5
 8005e0a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e10:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e14:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005e16:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005e18:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e1a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005e1e:	60a3      	str	r3, [r4, #8]
      break;
 8005e20:	e7b5      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
 8005e22:	bf00      	nop
 8005e24:	ffce0088 	.word	0xffce0088
 8005e28:	00100030 	.word	0x00100030
 8005e2c:	00100040 	.word	0x00100040

08005e30 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e30:	6a03      	ldr	r3, [r0, #32]
 8005e32:	f023 0310 	bic.w	r3, r3, #16
 8005e36:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005e38:	6a03      	ldr	r3, [r0, #32]
{
 8005e3a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005e3c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e3e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e42:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005e46:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e4e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005e50:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e58:	4d14      	ldr	r5, [pc, #80]	@ (8005eac <TIM_OC2_SetConfig+0x7c>)
 8005e5a:	42a8      	cmp	r0, r5
 8005e5c:	d00f      	beq.n	8005e7e <TIM_OC2_SetConfig+0x4e>
 8005e5e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005e62:	42a8      	cmp	r0, r5
 8005e64:	d00b      	beq.n	8005e7e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	4d12      	ldr	r5, [pc, #72]	@ (8005eb0 <TIM_OC2_SetConfig+0x80>)
 8005e68:	42a8      	cmp	r0, r5
 8005e6a:	d00f      	beq.n	8005e8c <TIM_OC2_SetConfig+0x5c>
 8005e6c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005e70:	42a8      	cmp	r0, r5
 8005e72:	d00b      	beq.n	8005e8c <TIM_OC2_SetConfig+0x5c>
 8005e74:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005e78:	42a8      	cmp	r0, r5
 8005e7a:	d10f      	bne.n	8005e9c <TIM_OC2_SetConfig+0x6c>
 8005e7c:	e006      	b.n	8005e8c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e8c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e90:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e94:	ea46 0c05 	orr.w	ip, r6, r5
 8005e98:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005e9c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e9e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ea0:	6182      	str	r2, [r0, #24]
}
 8005ea2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea4:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005ea6:	6203      	str	r3, [r0, #32]
}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40014000 	.word	0x40014000

08005eb4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005eb4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	f000 80dc 	beq.w	8006076 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8005ebe:	2301      	movs	r3, #1
{
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005ec6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005eca:	2a14      	cmp	r2, #20
 8005ecc:	d80c      	bhi.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005ece:	e8df f002 	tbb	[pc, r2]
 8005ed2:	0b4f      	.short	0x0b4f
 8005ed4:	0b630b0b 	.word	0x0b630b0b
 8005ed8:	0b740b0b 	.word	0x0b740b0b
 8005edc:	0b840b0b 	.word	0x0b840b0b
 8005ee0:	0b950b0b 	.word	0x0b950b0b
 8005ee4:	0b0b      	.short	0x0b0b
 8005ee6:	10          	.byte	0x10
 8005ee7:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8005eee:	2001      	movs	r0, #1
}
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ef2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005efe:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005f00:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005f02:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f04:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005f08:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f10:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f12:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f16:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1a:	4e58      	ldr	r6, [pc, #352]	@ (800607c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005f1c:	42b3      	cmp	r3, r6
 8005f1e:	d00f      	beq.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005f20:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005f24:	42b3      	cmp	r3, r6
 8005f26:	d00b      	beq.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005f28:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8005f2c:	42b3      	cmp	r3, r6
 8005f2e:	d007      	beq.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005f30:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f34:	42b3      	cmp	r3, r6
 8005f36:	d003      	beq.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005f38:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f3c:	42b3      	cmp	r3, r6
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f40:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f42:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f46:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005f4a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f4c:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005f4e:	6869      	ldr	r1, [r5, #4]
 8005f50:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8005f52:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f56:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f5c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f64:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f6c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f6e:	e00e      	b.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	f7ff fce3 	bl	800593c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f76:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f78:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f7a:	f043 0308 	orr.w	r3, r3, #8
 8005f7e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f80:	6983      	ldr	r3, [r0, #24]
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f88:	6983      	ldr	r3, [r0, #24]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2000      	movs	r0, #0
}
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f7ff ff49 	bl	8005e30 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f9e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fa0:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fa6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa8:	6983      	ldr	r3, [r0, #24]
 8005faa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fae:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fb0:	6983      	ldr	r3, [r0, #24]
 8005fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fb6:	6183      	str	r3, [r0, #24]
      break;
 8005fb8:	e7e9      	b.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	f7ff fcfa 	bl	80059b4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fc0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fc4:	f043 0308 	orr.w	r3, r3, #8
 8005fc8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fca:	69c3      	ldr	r3, [r0, #28]
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fd2:	69c3      	ldr	r3, [r0, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61c3      	str	r3, [r0, #28]
      break;
 8005fd8:	e7d9      	b.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	f7ff fd2a 	bl	8005a34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fe2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fe8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	69c3      	ldr	r3, [r0, #28]
 8005fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ff0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ff2:	69c3      	ldr	r3, [r0, #28]
 8005ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ff8:	61c3      	str	r3, [r0, #28]
      break;
 8005ffa:	e7c8      	b.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ffc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005ffe:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006006:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006008:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800600a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800600c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800600e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006012:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006016:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006018:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800601a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800601e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	4e16      	ldr	r6, [pc, #88]	@ (800607c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8006024:	42b3      	cmp	r3, r6
 8006026:	d00f      	beq.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006028:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800602c:	42b3      	cmp	r3, r6
 800602e:	d00b      	beq.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006030:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8006034:	42b3      	cmp	r3, r6
 8006036:	d007      	beq.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006038:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800603c:	42b3      	cmp	r3, r6
 800603e:	d003      	beq.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006040:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006044:	42b3      	cmp	r3, r6
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006048:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800604a:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800604e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006052:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006054:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006056:	6869      	ldr	r1, [r5, #4]
 8006058:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800605a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800605c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800605e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800606e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006070:	430a      	orrs	r2, r1
 8006072:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006074:	e78b      	b.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8006076:	2002      	movs	r0, #2
}
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006080:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d046      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8006088:	b470      	push	{r4, r5, r6}
 800608a:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800608c:	4e23      	ldr	r6, [pc, #140]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 800608e:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006090:	2302      	movs	r3, #2
 8006092:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006096:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8006098:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800609c:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800609e:	d024      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80060a0:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80060a4:	42b0      	cmp	r0, r6
 80060a6:	d02b      	beq.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80060b6:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b8:	d00a      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80060ba:	4b19      	ldr	r3, [pc, #100]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80060bc:	4298      	cmp	r0, r3
 80060be:	d007      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80060c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060c4:	4298      	cmp	r0, r3
 80060c6:	d003      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80060c8:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80060cc:	4298      	cmp	r0, r3
 80060ce:	d104      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d0:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d2:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d6:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d8:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	2301      	movs	r3, #1
 80060de:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060e2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80060e6:	bc70      	pop	{r4, r5, r6}
 80060e8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ea:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060f0:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060fa:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80060fc:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fe:	e7e7      	b.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006100:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006102:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006106:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006108:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800610c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006110:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8006112:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006114:	e7dc      	b.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8006116:	2002      	movs	r0, #2
}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40000400 	.word	0x40000400

08006124 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006124:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d045      	beq.n	80061b8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 800612c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800612e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006136:	4602      	mov	r2, r0
 8006138:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800613a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800613c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800613e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006142:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006148:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800614a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800614c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006150:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006152:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006154:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006158:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800615a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800615c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006160:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006162:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006164:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006168:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800616a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800616e:	4c13      	ldr	r4, [pc, #76]	@ (80061bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006170:	42a0      	cmp	r0, r4
 8006172:	d00b      	beq.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006174:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006178:	42a0      	cmp	r0, r4
 800617a:	d007      	beq.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800617c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800617e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006180:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006184:	4608      	mov	r0, r1
}
 8006186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800618a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800618c:	69cc      	ldr	r4, [r1, #28]
 800618e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006192:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006194:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006196:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800619a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800619e:	6a0c      	ldr	r4, [r1, #32]
 80061a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a6:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061a8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80061ae:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061b4:	430b      	orrs	r3, r1
 80061b6:	e7e1      	b.n	800617c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80061b8:	2002      	movs	r0, #2
}
 80061ba:	4770      	bx	lr
 80061bc:	40012c00 	.word	0x40012c00

080061c0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80061c0:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80061c6:	2801      	cmp	r0, #1
 80061c8:	d047      	beq.n	800625a <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 80061ca:	6810      	ldr	r0, [r2, #0]
 80061cc:	3801      	subs	r0, #1
 80061ce:	280f      	cmp	r0, #15
{
 80061d0:	b4f0      	push	{r4, r5, r6, r7}
 80061d2:	d825      	bhi.n	8006220 <HAL_TIMEx_ConfigBreakInput+0x60>
 80061d4:	4c22      	ldr	r4, [pc, #136]	@ (8006260 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 80061d6:	4e23      	ldr	r6, [pc, #140]	@ (8006264 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 80061d8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80061dc:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 80061e0:	4c21      	ldr	r4, [pc, #132]	@ (8006268 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 80061e2:	4e22      	ldr	r6, [pc, #136]	@ (800626c <HAL_TIMEx_ConfigBreakInput+0xac>)
 80061e4:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80061e8:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80061ec:	2901      	cmp	r1, #1
 80061ee:	d01d      	beq.n	800622c <HAL_TIMEx_ConfigBreakInput+0x6c>
 80061f0:	2902      	cmp	r1, #2
 80061f2:	d12c      	bne.n	800624e <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061f4:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80061f6:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061f8:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061fa:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80061fc:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061fe:	fa01 f10c 	lsl.w	r1, r1, ip
 8006202:	ea81 0207 	eor.w	r2, r1, r7
 8006206:	402a      	ands	r2, r5
 8006208:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800620a:	ea80 0102 	eor.w	r1, r0, r2
 800620e:	4021      	ands	r1, r4
 8006210:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006212:	6672      	str	r2, [r6, #100]	@ 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2000      	movs	r0, #0

  return status;
}
 800621c:	bcf0      	pop	{r4, r5, r6, r7}
 800621e:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006220:	2700      	movs	r7, #0
  switch (BreakInput)
 8006222:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006224:	46bc      	mov	ip, r7
 8006226:	463c      	mov	r4, r7
 8006228:	463d      	mov	r5, r7
  switch (BreakInput)
 800622a:	d1e1      	bne.n	80061f0 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800622c:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 800622e:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006230:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006232:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8006234:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006236:	fa01 f10c 	lsl.w	r1, r1, ip
 800623a:	ea81 0207 	eor.w	r2, r1, r7
 800623e:	402a      	ands	r2, r5
 8006240:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006242:	ea80 0102 	eor.w	r1, r0, r2
 8006246:	4021      	ands	r1, r4
 8006248:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 800624a:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 800624c:	e7e2      	b.n	8006214 <HAL_TIMEx_ConfigBreakInput+0x54>
  __HAL_UNLOCK(htim);
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8006254:	2001      	movs	r0, #1
}
 8006256:	bcf0      	pop	{r4, r5, r6, r7}
 8006258:	4770      	bx	lr
  __HAL_LOCK(htim);
 800625a:	2002      	movs	r0, #2
}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	08008830 	.word	0x08008830
 8006264:	080087b0 	.word	0x080087b0
 8006268:	080087f0 	.word	0x080087f0
 800626c:	08008770 	.word	0x08008770

08006270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006274:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006276:	6882      	ldr	r2, [r0, #8]
 8006278:	6900      	ldr	r0, [r0, #16]
 800627a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800627c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627e:	4302      	orrs	r2, r0
 8006280:	430a      	orrs	r2, r1
 8006282:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006284:	4995      	ldr	r1, [pc, #596]	@ (80064dc <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006286:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006288:	4029      	ands	r1, r5
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006292:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006294:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006298:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800629a:	4991      	ldr	r1, [pc, #580]	@ (80064e0 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800629c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800629e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062a0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062a4:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80062a8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062ac:	f000 80bb 	beq.w	8006426 <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 80062b0:	6a26      	ldr	r6, [r4, #32]
 80062b2:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ba:	f022 020f 	bic.w	r2, r2, #15
 80062be:	432a      	orrs	r2, r5
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c2:	4a88      	ldr	r2, [pc, #544]	@ (80064e4 <UART_SetConfig+0x274>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d035      	beq.n	8006334 <UART_SetConfig+0xc4>
 80062c8:	4a87      	ldr	r2, [pc, #540]	@ (80064e8 <UART_SetConfig+0x278>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <UART_SetConfig+0x7c>
 80062ce:	4a87      	ldr	r2, [pc, #540]	@ (80064ec <UART_SetConfig+0x27c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f000 8098 	beq.w	8006406 <UART_SetConfig+0x196>
 80062d6:	4a86      	ldr	r2, [pc, #536]	@ (80064f0 <UART_SetConfig+0x280>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d03f      	beq.n	800635c <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062de:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80062e0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 80062e4:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 80062e8:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ec:	4b81      	ldr	r3, [pc, #516]	@ (80064f4 <UART_SetConfig+0x284>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d8f0      	bhi.n	80062dc <UART_SetConfig+0x6c>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x90>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	080063fb 	.word	0x080063fb
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	080062dd 	.word	0x080062dd
 8006310:	08006375 	.word	0x08006375
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	080063bd 	.word	0x080063bd
 8006324:	080062dd 	.word	0x080062dd
 8006328:	080062dd 	.word	0x080062dd
 800632c:	080062dd 	.word	0x080062dd
 8006330:	0800638d 	.word	0x0800638d
 8006334:	4b6f      	ldr	r3, [pc, #444]	@ (80064f4 <UART_SetConfig+0x284>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d03c      	beq.n	80063bc <UART_SetConfig+0x14c>
 8006342:	2b03      	cmp	r3, #3
 8006344:	d022      	beq.n	800638c <UART_SetConfig+0x11c>
 8006346:	2b01      	cmp	r3, #1
 8006348:	d014      	beq.n	8006374 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800634a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800634e:	f000 80bc 	beq.w	80064ca <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006352:	f7ff f989 	bl	8005668 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006356:	b9a8      	cbnz	r0, 8006384 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8006358:	2000      	movs	r0, #0
 800635a:	e7c0      	b.n	80062de <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635c:	4b65      	ldr	r3, [pc, #404]	@ (80064f4 <UART_SetConfig+0x284>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d028      	beq.n	80063bc <UART_SetConfig+0x14c>
 800636a:	d859      	bhi.n	8006420 <UART_SetConfig+0x1b0>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d044      	beq.n	80063fa <UART_SetConfig+0x18a>
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d1b3      	bne.n	80062dc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006374:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006378:	f000 80aa 	beq.w	80064d0 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 800637c:	f7ff f820 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006380:	2800      	cmp	r0, #0
 8006382:	d0e9      	beq.n	8006358 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006384:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006386:	e006      	b.n	8006396 <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006388:	2b30      	cmp	r3, #48	@ 0x30
 800638a:	d1a7      	bne.n	80062dc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006390:	d018      	beq.n	80063c4 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	4a57      	ldr	r2, [pc, #348]	@ (80064f8 <UART_SetConfig+0x288>)
 800639a:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 800639e:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80063aa:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	f1a0 0310 	sub.w	r3, r0, #16
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d892      	bhi.n	80062dc <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	60d8      	str	r0, [r3, #12]
 80063ba:	e7cd      	b.n	8006358 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063bc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80063c0:	484e      	ldr	r0, [pc, #312]	@ (80064fc <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c2:	d1e8      	bne.n	8006396 <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c4:	6862      	ldr	r2, [r4, #4]
 80063c6:	4b4c      	ldr	r3, [pc, #304]	@ (80064f8 <UART_SetConfig+0x288>)
 80063c8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80063cc:	fbb0 f0f1 	udiv	r0, r0, r1
 80063d0:	0853      	lsrs	r3, r2, #1
 80063d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d6:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063da:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063de:	f1a3 0210 	sub.w	r2, r3, #16
 80063e2:	428a      	cmp	r2, r1
 80063e4:	f63f af7a 	bhi.w	80062dc <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80063ec:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ee:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60cb      	str	r3, [r1, #12]
 80063f8:	e7ae      	b.n	8006358 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80063fe:	d05d      	beq.n	80064bc <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7ff f920 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
        break;
 8006404:	e7a7      	b.n	8006356 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006406:	4b3b      	ldr	r3, [pc, #236]	@ (80064f4 <UART_SetConfig+0x284>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006410:	2b20      	cmp	r3, #32
 8006412:	d0d3      	beq.n	80063bc <UART_SetConfig+0x14c>
 8006414:	d8b8      	bhi.n	8006388 <UART_SetConfig+0x118>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0ef      	beq.n	80063fa <UART_SetConfig+0x18a>
 800641a:	2b10      	cmp	r3, #16
 800641c:	d0aa      	beq.n	8006374 <UART_SetConfig+0x104>
 800641e:	e75d      	b.n	80062dc <UART_SetConfig+0x6c>
 8006420:	2bc0      	cmp	r3, #192	@ 0xc0
 8006422:	d0b3      	beq.n	800638c <UART_SetConfig+0x11c>
 8006424:	e75a      	b.n	80062dc <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006426:	4311      	orrs	r1, r2
 8006428:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800642a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800642c:	4931      	ldr	r1, [pc, #196]	@ (80064f4 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800642e:	f022 020f 	bic.w	r2, r2, #15
 8006432:	432a      	orrs	r2, r5
 8006434:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800643a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800643e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006442:	d048      	beq.n	80064d6 <UART_SetConfig+0x266>
 8006444:	d833      	bhi.n	80064ae <UART_SetConfig+0x23e>
 8006446:	b37b      	cbz	r3, 80064a8 <UART_SetConfig+0x238>
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644c:	f47f af46 	bne.w	80062dc <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006450:	f7fe ffb6 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006454:	2800      	cmp	r0, #0
 8006456:	f43f af7f 	beq.w	8006358 <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800645a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800645c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800645e:	4b26      	ldr	r3, [pc, #152]	@ (80064f8 <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006460:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006464:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006468:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646c:	4299      	cmp	r1, r3
 800646e:	f63f af35 	bhi.w	80062dc <UART_SetConfig+0x6c>
 8006472:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006476:	f63f af31 	bhi.w	80062dc <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647a:	2300      	movs	r3, #0
 800647c:	4619      	mov	r1, r3
 800647e:	f7fa f9d1 	bl	8000824 <__aeabi_uldivmod>
 8006482:	0872      	lsrs	r2, r6, #1
 8006484:	0203      	lsls	r3, r0, #8
 8006486:	0209      	lsls	r1, r1, #8
 8006488:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800648c:	1898      	adds	r0, r3, r2
 800648e:	f141 0100 	adc.w	r1, r1, #0
 8006492:	4632      	mov	r2, r6
 8006494:	2300      	movs	r3, #0
 8006496:	f7fa f9c5 	bl	8000824 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800649a:	4b19      	ldr	r3, [pc, #100]	@ (8006500 <UART_SetConfig+0x290>)
 800649c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80064a0:	429a      	cmp	r2, r3
 80064a2:	f63f af1b 	bhi.w	80062dc <UART_SetConfig+0x6c>
 80064a6:	e786      	b.n	80063b6 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7ff f8cc 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
        break;
 80064ac:	e7d2      	b.n	8006454 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064b2:	f47f af13 	bne.w	80062dc <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80064b6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80064ba:	e7cf      	b.n	800645c <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7ff f8c2 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f43f af49 	beq.w	8006358 <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80064c8:	e77c      	b.n	80063c4 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ca:	f7ff f8cd 	bl	8005668 <HAL_RCC_GetPCLK2Freq>
        break;
 80064ce:	e7f7      	b.n	80064c0 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 80064d0:	f7fe ff76 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
        break;
 80064d4:	e7f4      	b.n	80064c0 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 80064d6:	4809      	ldr	r0, [pc, #36]	@ (80064fc <UART_SetConfig+0x28c>)
 80064d8:	e7c0      	b.n	800645c <UART_SetConfig+0x1ec>
 80064da:	bf00      	nop
 80064dc:	cfff69f3 	.word	0xcfff69f3
 80064e0:	40008000 	.word	0x40008000
 80064e4:	40013800 	.word	0x40013800
 80064e8:	40004400 	.word	0x40004400
 80064ec:	40004800 	.word	0x40004800
 80064f0:	40004c00 	.word	0x40004c00
 80064f4:	40021000 	.word	0x40021000
 80064f8:	08008870 	.word	0x08008870
 80064fc:	00f42400 	.word	0x00f42400
 8006500:	000ffcff 	.word	0x000ffcff

08006504 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006504:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006506:	07da      	lsls	r2, r3, #31
{
 8006508:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800650a:	d506      	bpl.n	800651a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800650c:	6801      	ldr	r1, [r0, #0]
 800650e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006510:	684a      	ldr	r2, [r1, #4]
 8006512:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006516:	4322      	orrs	r2, r4
 8006518:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651a:	079c      	lsls	r4, r3, #30
 800651c:	d506      	bpl.n	800652c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651e:	6801      	ldr	r1, [r0, #0]
 8006520:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006522:	684a      	ldr	r2, [r1, #4]
 8006524:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006528:	4322      	orrs	r2, r4
 800652a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800652c:	0759      	lsls	r1, r3, #29
 800652e:	d506      	bpl.n	800653e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006530:	6801      	ldr	r1, [r0, #0]
 8006532:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006534:	684a      	ldr	r2, [r1, #4]
 8006536:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800653a:	4322      	orrs	r2, r4
 800653c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800653e:	071a      	lsls	r2, r3, #28
 8006540:	d506      	bpl.n	8006550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006542:	6801      	ldr	r1, [r0, #0]
 8006544:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006546:	684a      	ldr	r2, [r1, #4]
 8006548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800654c:	4322      	orrs	r2, r4
 800654e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006550:	06dc      	lsls	r4, r3, #27
 8006552:	d506      	bpl.n	8006562 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006554:	6801      	ldr	r1, [r0, #0]
 8006556:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006558:	688a      	ldr	r2, [r1, #8]
 800655a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800655e:	4322      	orrs	r2, r4
 8006560:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	0699      	lsls	r1, r3, #26
 8006564:	d506      	bpl.n	8006574 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006566:	6801      	ldr	r1, [r0, #0]
 8006568:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800656a:	688a      	ldr	r2, [r1, #8]
 800656c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006570:	4322      	orrs	r2, r4
 8006572:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006574:	065a      	lsls	r2, r3, #25
 8006576:	d509      	bpl.n	800658c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006578:	6801      	ldr	r1, [r0, #0]
 800657a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800657c:	684a      	ldr	r2, [r1, #4]
 800657e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006582:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006584:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006588:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658a:	d00b      	beq.n	80065a4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	d506      	bpl.n	800659e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006590:	6802      	ldr	r2, [r0, #0]
 8006592:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006594:	6853      	ldr	r3, [r2, #4]
 8006596:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800659a:	430b      	orrs	r3, r1
 800659c:	6053      	str	r3, [r2, #4]
  }
}
 800659e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a4:	684a      	ldr	r2, [r1, #4]
 80065a6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80065a8:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80065ac:	4322      	orrs	r2, r4
 80065ae:	604a      	str	r2, [r1, #4]
 80065b0:	e7ec      	b.n	800658c <UART_AdvFeatureConfig+0x88>
 80065b2:	bf00      	nop

080065b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065bc:	6804      	ldr	r4, [r0, #0]
 80065be:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 80065c2:	460d      	mov	r5, r1
 80065c4:	4616      	mov	r6, r2
 80065c6:	d10a      	bne.n	80065de <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c8:	69e3      	ldr	r3, [r4, #28]
 80065ca:	ea35 0303 	bics.w	r3, r5, r3
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	429e      	cmp	r6, r3
 80065d6:	d0f7      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80065d8:	2000      	movs	r0, #0
}
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	4607      	mov	r7, r0
 80065e0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e2:	69e2      	ldr	r2, [r4, #28]
 80065e4:	ea35 0202 	bics.w	r2, r5, r2
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	42b3      	cmp	r3, r6
 80065f0:	d1f2      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fd fb77 	bl	8003ce4 <HAL_GetTick>
 80065f6:	eba0 0009 	sub.w	r0, r0, r9
 80065fa:	4540      	cmp	r0, r8
 80065fc:	d830      	bhi.n	8006660 <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fe:	683c      	ldr	r4, [r7, #0]
 8006600:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f1b8 0f00 	cmp.w	r8, #0
 8006606:	d02c      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	0758      	lsls	r0, r3, #29
 800660c:	d5e9      	bpl.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660e:	69e3      	ldr	r3, [r4, #28]
 8006610:	0519      	lsls	r1, r3, #20
 8006612:	d5e6      	bpl.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006614:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006618:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800661e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	e844 3100 	strex	r1, r3, [r4]
 8006626:	b139      	cbz	r1, 8006638 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	e852 3f00 	ldrex	r3, [r2]
 800662c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	e842 3100 	strex	r1, r3, [r2]
 8006634:	2900      	cmp	r1, #0
 8006636:	d1f7      	bne.n	8006628 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f102 0308 	add.w	r3, r2, #8
 800663c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006640:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	f102 0008 	add.w	r0, r2, #8
 8006648:	e840 3100 	strex	r1, r3, [r0]
 800664c:	2900      	cmp	r1, #0
 800664e:	d1f3      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8006650:	2320      	movs	r3, #32
 8006652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          return HAL_TIMEOUT;
 800665e:	e019      	b.n	8006694 <UART_WaitOnFlagUntilTimeout+0xe0>
 8006660:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006666:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	e842 3100 	strex	r1, r3, [r2]
 800666e:	2900      	cmp	r1, #0
 8006670:	d1f7      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	f102 0308 	add.w	r3, r2, #8
 8006676:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	f102 0008 	add.w	r0, r2, #8
 8006682:	e840 3100 	strex	r1, r3, [r0]
 8006686:	2900      	cmp	r1, #0
 8006688:	d1f3      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 800668a:	2320      	movs	r3, #32
 800668c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8006694:	2300      	movs	r3, #0
 8006696:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800669a:	2003      	movs	r0, #3
 800669c:	e79d      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0x26>
 800669e:	bf00      	nop

080066a0 <HAL_UART_Init>:
  if (huart == NULL)
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d066      	beq.n	8006772 <HAL_UART_Init+0xd2>
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80066aa:	b082      	sub	sp, #8
 80066ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d04c      	beq.n	800674c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80066b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80066b4:	2324      	movs	r3, #36	@ 0x24
 80066b6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80066c2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c4:	f7ff fdd4 	bl	8006270 <UART_SetConfig>
 80066c8:	2801      	cmp	r0, #1
 80066ca:	d03c      	beq.n	8006746 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d135      	bne.n	800673e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 80066da:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066dc:	6899      	ldr	r1, [r3, #8]
 80066de:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 80066e2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80066e4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80066e8:	f041 0101 	orr.w	r1, r1, #1
 80066ec:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ee:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 80066f2:	f7fd faf7 	bl	8003ce4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80066fc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fe:	d40e      	bmi.n	800671e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	075b      	lsls	r3, r3, #29
 8006704:	d427      	bmi.n	8006756 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006708:	2220      	movs	r2, #32
 800670a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800670e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006712:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8006716:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006718:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800671a:	b002      	add	sp, #8
 800671c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	462a      	mov	r2, r5
 8006726:	4603      	mov	r3, r0
 8006728:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff ff41 	bl	80065b4 <UART_WaitOnFlagUntilTimeout>
 8006732:	b9e0      	cbnz	r0, 800676e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	075b      	lsls	r3, r3, #29
 800673a:	d40c      	bmi.n	8006756 <HAL_UART_Init+0xb6>
 800673c:	e7e3      	b.n	8006706 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff fee0 	bl	8006504 <UART_AdvFeatureConfig>
 8006744:	e7c5      	b.n	80066d2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006746:	2001      	movs	r0, #1
}
 8006748:	b002      	add	sp, #8
 800674a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800674c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8006750:	f7fd f858 	bl	8003804 <HAL_UART_MspInit>
 8006754:	e7ad      	b.n	80066b2 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	4633      	mov	r3, r6
 8006760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff ff25 	bl	80065b4 <UART_WaitOnFlagUntilTimeout>
 800676a:	2800      	cmp	r0, #0
 800676c:	d0cb      	beq.n	8006706 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800676e:	2003      	movs	r0, #3
 8006770:	e7d3      	b.n	800671a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8006772:	2001      	movs	r0, #1
}
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop

08006778 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006778:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800677c:	2b01      	cmp	r3, #1
 800677e:	d017      	beq.n	80067b0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006780:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006782:	2324      	movs	r3, #36	@ 0x24
{
 8006784:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8006786:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800678a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800678c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800678e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8006790:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006794:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8006798:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800679a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800679c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 80067a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80067ac:	4618      	mov	r0, r3
}
 80067ae:	4770      	bx	lr
  __HAL_LOCK(huart);
 80067b0:	2002      	movs	r0, #2
}
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b4:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 80067b8:	2a01      	cmp	r2, #1
 80067ba:	d037      	beq.n	800682c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067be:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80067c0:	2024      	movs	r0, #36	@ 0x24
{
 80067c2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80067c4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ca:	6810      	ldr	r0, [r2, #0]
 80067cc:	f020 0001 	bic.w	r0, r0, #1
 80067d0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067d2:	6890      	ldr	r0, [r2, #8]
 80067d4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80067d8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067da:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067dc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067de:	b310      	cbz	r0, 8006826 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067e0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067e2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80067e4:	4d12      	ldr	r5, [pc, #72]	@ (8006830 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067e6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ea:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ee:	4911      	ldr	r1, [pc, #68]	@ (8006834 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80067f0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067f4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80067f8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80067fc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006800:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006802:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006804:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006808:	fbb1 f1f5 	udiv	r1, r1, r5
 800680c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006810:	2100      	movs	r1, #0
 8006812:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006816:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006818:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800681a:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800681e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006820:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8006824:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006826:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006828:	4608      	mov	r0, r1
 800682a:	e7ef      	b.n	800680c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800682c:	2002      	movs	r0, #2
}
 800682e:	4770      	bx	lr
 8006830:	08008888 	.word	0x08008888
 8006834:	08008890 	.word	0x08008890

08006838 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006838:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800683c:	2a01      	cmp	r2, #1
 800683e:	d037      	beq.n	80068b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8006840:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006842:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	2024      	movs	r0, #36	@ 0x24
{
 8006846:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006848:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800684e:	6810      	ldr	r0, [r2, #0]
 8006850:	f020 0001 	bic.w	r0, r0, #1
 8006854:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006856:	6890      	ldr	r0, [r2, #8]
 8006858:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800685c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800685e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006860:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006862:	b310      	cbz	r0, 80068aa <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006864:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006866:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006868:	4d12      	ldr	r5, [pc, #72]	@ (80068b4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800686e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006872:	4911      	ldr	r1, [pc, #68]	@ (80068b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006874:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006878:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800687c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006880:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006884:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006886:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006888:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800688c:	fbb1 f1f5 	udiv	r1, r1, r5
 8006890:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006894:	2100      	movs	r1, #0
 8006896:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800689a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800689c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800689e:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 80068a2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80068a4:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 80068a8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80068aa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80068ac:	4608      	mov	r0, r1
 80068ae:	e7ef      	b.n	8006890 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80068b0:	2002      	movs	r0, #2
}
 80068b2:	4770      	bx	lr
 80068b4:	08008888 	.word	0x08008888
 80068b8:	08008890 	.word	0x08008890

080068bc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80068bc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80068be:	8840      	ldrh	r0, [r0, #2]
 80068c0:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80068c4:	0c00      	lsrs	r0, r0, #16
 80068c6:	4770      	bx	lr

080068c8 <BADC_Init>:
/**
  * @brief  Initializes ADC and NVIC for three bemf voltages reading
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Init( Bemf_ADC_Handle_t *pHandle)
{
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 80068cc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068ce:	4e9a      	ldr	r6, [pc, #616]	@ (8006b38 <BADC_Init+0x270>)
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 80068d0:	692a      	ldr	r2, [r5, #16]
  MODIFY_REG(ADCx->CR,
 80068d2:	4f9a      	ldr	r7, [pc, #616]	@ (8006b3c <BADC_Init+0x274>)
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 80068d4:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80068d8:	685c      	ldr	r4, [r3, #4]
 80068da:	f024 0404 	bic.w	r4, r4, #4
 80068de:	605c      	str	r4, [r3, #4]
 80068e0:	684c      	ldr	r4, [r1, #4]
 80068e2:	f024 0404 	bic.w	r4, r4, #4
 80068e6:	604c      	str	r4, [r1, #4]
 80068e8:	6854      	ldr	r4, [r2, #4]
 80068ea:	f024 0404 	bic.w	r4, r4, #4
 80068ee:	6054      	str	r4, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80068f0:	2404      	movs	r4, #4
 80068f2:	601c      	str	r4, [r3, #0]
 80068f4:	600c      	str	r4, [r1, #0]
 80068f6:	6014      	str	r4, [r2, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80068f8:	685c      	ldr	r4, [r3, #4]
 80068fa:	f024 0420 	bic.w	r4, r4, #32
 80068fe:	605c      	str	r4, [r3, #4]
 8006900:	684c      	ldr	r4, [r1, #4]
 8006902:	f024 0420 	bic.w	r4, r4, #32
 8006906:	604c      	str	r4, [r1, #4]
 8006908:	6854      	ldr	r4, [r2, #4]
 800690a:	f024 0420 	bic.w	r4, r4, #32
 800690e:	6054      	str	r4, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006910:	2420      	movs	r4, #32
 8006912:	601c      	str	r4, [r3, #0]
 8006914:	600c      	str	r4, [r1, #0]
 8006916:	6014      	str	r4, [r2, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006918:	689c      	ldr	r4, [r3, #8]
 800691a:	4034      	ands	r4, r6
 800691c:	609c      	str	r4, [r3, #8]
 800691e:	688c      	ldr	r4, [r1, #8]
 8006920:	4034      	ands	r4, r6
 8006922:	608c      	str	r4, [r1, #8]
 8006924:	6894      	ldr	r4, [r2, #8]
 8006926:	4034      	ands	r4, r6
 8006928:	6094      	str	r4, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800692a:	689c      	ldr	r4, [r3, #8]
 800692c:	403c      	ands	r4, r7
 800692e:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8006932:	609c      	str	r4, [r3, #8]
 8006934:	688c      	ldr	r4, [r1, #8]
 8006936:	403c      	ands	r4, r7
 8006938:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 800693c:	608c      	str	r4, [r1, #8]
 800693e:	6896      	ldr	r6, [r2, #8]
    LL_ADC_DisableDeepPowerDown(ADCx_w);
    
    LL_ADC_EnableInternalRegulator( ADCx_u );
    LL_ADC_EnableInternalRegulator( ADCx_v );
    LL_ADC_EnableInternalRegulator( ADCx_w );
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006940:	4c7f      	ldr	r4, [pc, #508]	@ (8006b40 <BADC_Init+0x278>)
 8006942:	403e      	ands	r6, r7
 8006944:	f046 5680 	orr.w	r6, r6, #268435456	@ 0x10000000
 8006948:	6824      	ldr	r4, [r4, #0]
 800694a:	6096      	str	r6, [r2, #8]
 800694c:	4e7d      	ldr	r6, [pc, #500]	@ (8006b44 <BADC_Init+0x27c>)
 800694e:	09a4      	lsrs	r4, r4, #6
 8006950:	fba6 6404 	umull	r6, r4, r6, r4
{
 8006954:	b082      	sub	sp, #8
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006956:	09a4      	lsrs	r4, r4, #6
 8006958:	0064      	lsls	r4, r4, #1
 800695a:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 800695c:	9c01      	ldr	r4, [sp, #4]
 800695e:	b12c      	cbz	r4, 800696c <BADC_Init+0xa4>
    {
      wait_loop_index--;
 8006960:	9c01      	ldr	r4, [sp, #4]
 8006962:	3c01      	subs	r4, #1
 8006964:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006966:	9c01      	ldr	r4, [sp, #4]
 8006968:	2c00      	cmp	r4, #0
 800696a:	d1f9      	bne.n	8006960 <BADC_Init+0x98>
  MODIFY_REG(ADCx->CR,
 800696c:	689c      	ldr	r4, [r3, #8]
 800696e:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 8006972:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8006976:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800697a:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800697c:	689c      	ldr	r4, [r3, #8]
 800697e:	2c00      	cmp	r4, #0
 8006980:	dbfc      	blt.n	800697c <BADC_Init+0xb4>

    LL_ADC_StartCalibration( ADCx_u, LL_ADC_SINGLE_ENDED );
    while ( LL_ADC_IsCalibrationOnGoing( ADCx_u ) )
    {
    }
    if (ADCx_u != ADCx_v)
 8006982:	428b      	cmp	r3, r1
 8006984:	d00a      	beq.n	800699c <BADC_Init+0xd4>
  MODIFY_REG(ADCx->CR,
 8006986:	688c      	ldr	r4, [r1, #8]
 8006988:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 800698c:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8006990:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006994:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006996:	688c      	ldr	r4, [r1, #8]
 8006998:	2c00      	cmp	r4, #0
 800699a:	dbfc      	blt.n	8006996 <BADC_Init+0xce>
      LL_ADC_StartCalibration( ADCx_v, LL_ADC_SINGLE_ENDED );
      while ( LL_ADC_IsCalibrationOnGoing( ADCx_v ) )
      {
      }
    }
    if ((ADCx_w != ADCx_u) && (ADCx_w != ADCx_v))
 800699c:	4293      	cmp	r3, r2
 800699e:	d00c      	beq.n	80069ba <BADC_Init+0xf2>
 80069a0:	4291      	cmp	r1, r2
 80069a2:	d00a      	beq.n	80069ba <BADC_Init+0xf2>
  MODIFY_REG(ADCx->CR,
 80069a4:	6894      	ldr	r4, [r2, #8]
 80069a6:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 80069aa:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80069ae:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80069b2:	6094      	str	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80069b4:	6894      	ldr	r4, [r2, #8]
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	dbfc      	blt.n	80069b4 <BADC_Init+0xec>
    /* ADC Enable (must be done after calibration) */
    /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
    * following a calibration phase, could have no effect on ADC
    * within certain AHB/ADC clock ratio.
    */
    LL_ADC_SetChannelSamplingTime (ADCx_u, pHandle->pParams_str->AdcChannel[0], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 80069ba:	696c      	ldr	r4, [r5, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069bc:	0de6      	lsrs	r6, r4, #23
 80069be:	f103 0714 	add.w	r7, r3, #20
 80069c2:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80069c6:	f04f 0c07 	mov.w	ip, #7
 80069ca:	f857 e006 	ldr.w	lr, [r7, r6]
 80069ce:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80069d2:	fa0c f404 	lsl.w	r4, ip, r4
 80069d6:	ea2e 0404 	bic.w	r4, lr, r4
 80069da:	51bc      	str	r4, [r7, r6]
    LL_ADC_SetChannelSamplingTime (ADCx_v, pHandle->pParams_str->AdcChannel[1], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 80069dc:	69ac      	ldr	r4, [r5, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069de:	0de7      	lsrs	r7, r4, #23
 80069e0:	f007 0704 	and.w	r7, r7, #4
 80069e4:	f101 0e14 	add.w	lr, r1, #20
  MODIFY_REG(*preg,
 80069e8:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80069ec:	f85e 8007 	ldr.w	r8, [lr, r7]
 80069f0:	fa0c f404 	lsl.w	r4, ip, r4
 80069f4:	ea28 0404 	bic.w	r4, r8, r4
 80069f8:	f84e 4007 	str.w	r4, [lr, r7]
    LL_ADC_SetChannelSamplingTime (ADCx_w, pHandle->pParams_str->AdcChannel[2], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 80069fc:	69ef      	ldr	r7, [r5, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069fe:	0dfc      	lsrs	r4, r7, #23
 8006a00:	f004 0404 	and.w	r4, r4, #4
 8006a04:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006a08:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8006a0c:	fa0c fc07 	lsl.w	ip, ip, r7
 8006a10:	5937      	ldr	r7, [r6, r4]
 8006a12:	ea27 070c 	bic.w	r7, r7, ip
 8006a16:	5137      	str	r7, [r6, r4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006a18:	681c      	ldr	r4, [r3, #0]
 8006a1a:	07e7      	lsls	r7, r4, #31
 8006a1c:	d57e      	bpl.n	8006b1c <BADC_Init+0x254>
 8006a1e:	680b      	ldr	r3, [r1, #0]
 8006a20:	07de      	lsls	r6, r3, #31
 8006a22:	d408      	bmi.n	8006a36 <BADC_Init+0x16e>
  MODIFY_REG(ADCx->CR,
 8006a24:	4c48      	ldr	r4, [pc, #288]	@ (8006b48 <BADC_Init+0x280>)
 8006a26:	688b      	ldr	r3, [r1, #8]
 8006a28:	4023      	ands	r3, r4
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006a30:	680b      	ldr	r3, [r1, #0]
 8006a32:	07de      	lsls	r6, r3, #31
 8006a34:	d5f7      	bpl.n	8006a26 <BADC_Init+0x15e>
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	07df      	lsls	r7, r3, #31
 8006a3a:	d408      	bmi.n	8006a4e <BADC_Init+0x186>
  MODIFY_REG(ADCx->CR,
 8006a3c:	4942      	ldr	r1, [pc, #264]	@ (8006b48 <BADC_Init+0x280>)
 8006a3e:	6893      	ldr	r3, [r2, #8]
 8006a40:	400b      	ands	r3, r1
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006a48:	6813      	ldr	r3, [r2, #0]
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d5f7      	bpl.n	8006a3e <BADC_Init+0x176>
      LL_ADC_Enable(  ADCx_w );
    } 

    pHandle->ADCRegularLocked=false;
	
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006a4e:	7842      	ldrb	r2, [r0, #1]
 8006a50:	8ac3      	ldrh	r3, [r0, #22]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8006a52:	8a84      	ldrh	r4, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006a54:	fb13 f302 	smulbb	r3, r3, r2
    hMaxReliableElSpeedUnit *= 2U;
 8006a58:	fb14 f402 	smulbb	r4, r4, r2

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006a5c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    pHandle->ADCRegularLocked=false;
 8006a5e:	2100      	movs	r1, #0
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006a60:	b29b      	uxth	r3, r3
    pHandle->ADCRegularLocked=false;
 8006a62:	f880 1050 	strb.w	r1, [r0, #80]	@ 0x50
    hMaxReliableElSpeedUnit *= 2U;
 8006a66:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006a68:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8006a6a:	2b03      	cmp	r3, #3
    hMaxReliableElSpeedUnit *= 2U;
 8006a6c:	b2a4      	uxth	r4, r4
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006a6e:	f8a0 10d2 	strh.w	r1, [r0, #210]	@ 0xd2
    if (0U == hMinReliableElSpeedUnit)
 8006a72:	d95e      	bls.n	8006b32 <BADC_Init+0x26a>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->BemfTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8006a74:	089b      	lsrs	r3, r3, #2
 8006a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a7a:	f242 7610 	movw	r6, #10000	@ 0x2710
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	fbb6 f3f3 	udiv	r3, r6, r3
 8006a84:	b29e      	uxth	r6, r3
    }

    /* Align MaxPeriod and MinPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	4930      	ldr	r1, [pc, #192]	@ (8006b4c <BADC_Init+0x284>)
 8006a8c:	f8a0 60d0 	strh.w	r6, [r0, #208]	@ 0xd0
 8006a90:	fba1 1303 	umull	r1, r3, r1, r3
    MinBemfTime = ((1000U * (uint16_t)SPEED_UNIT) << 8) / (6U * hMaxReliableElSpeedUnit);
    pHandle->MinPeriod = ((MinBemfTime * pHandle->OvfFreq) >> 8) / 1000U * 65536UL;
	
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;

    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006a94:	492e      	ldr	r1, [pc, #184]	@ (8006b50 <BADC_Init+0x288>)
                              * pHandle->_Super.DPPConvFactor;
 8006a96:	69c6      	ldr	r6, [r0, #28]
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006a98:	8b47      	ldrh	r7, [r0, #26]
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8006a9a:	f8a0 40c0 	strh.w	r4, [r0, #192]	@ 0xc0
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006a9e:	fba1 1202 	umull	r1, r2, r1, r2
 8006aa2:	0892      	lsrs	r2, r2, #2
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006aa4:	099b      	lsrs	r3, r3, #6

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8006aa6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006aaa:	041b      	lsls	r3, r3, #16
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006aac:	fbb2 f2f7 	udiv	r2, r2, r7
                              * pHandle->_Super.DPPConvFactor;
 8006ab0:	fb06 f202 	mul.w	r2, r6, r2
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006ab4:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006ab8:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8006abc:	0049      	lsls	r1, r1, #1
    if (0U == hMaxReliableElSpeedUnit)
 8006abe:	b10c      	cbz	r4, 8006ac4 <BADC_Init+0x1fc>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8006ac0:	fbb1 f1f4 	udiv	r1, r1, r4
    }
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006ac4:	f890 20d6 	ldrb.w	r2, [r0, #214]	@ 0xd6
 8006ac8:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
 8006acc:	fb07 f202 	mul.w	r2, r7, r2
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8006ad0:	f8b0 1048 	ldrh.w	r1, [r0, #72]	@ 0x48
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006ad4:	fbb2 f2f1 	udiv	r2, r2, r1
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8006ad8:	3a01      	subs	r2, #1

    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
    pHandle->IsOnSensingEnabled = false;
 8006ada:	2100      	movs	r1, #0
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006adc:	f8a0 20d4 	strh.w	r2, [r0, #212]	@ 0xd4
    pHandle->ElPeriodSum = 0;
    pHandle->ZcEvents = 0;
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
    
    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8006ae0:	f890 204a 	ldrb.w	r2, [r0, #74]	@ 0x4a
    pHandle->IsOnSensingEnabled = false;
 8006ae4:	f880 103a 	strb.w	r1, [r0, #58]	@ 0x3a
    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006ae8:	f100 042e 	add.w	r4, r0, #46	@ 0x2e
    pHandle->ElPeriodSum = 0;
 8006aec:	6541      	str	r1, [r0, #84]	@ 0x54
    pHandle->ZcEvents = 0;
 8006aee:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
 8006af2:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	@ 0xfa
    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006af6:	6344      	str	r4, [r0, #52]	@ 0x34
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
 8006af8:	f8a0 10f2 	strh.w	r1, [r0, #242]	@ 0xf2
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8006afc:	b132      	cbz	r2, 8006b0c <BADC_Init+0x244>
 8006afe:	3068      	adds	r0, #104	@ 0x68
 8006b00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    {
      pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8006b04:	f840 3f04 	str.w	r3, [r0, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8006b08:	4282      	cmp	r2, r0
 8006b0a:	d1fb      	bne.n	8006b04 <BADC_Init+0x23c>
    }

    LL_TIM_EnableCounter(pHandle->pParams_str->LfTim);
 8006b0c:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6013      	str	r3, [r2, #0]
  }
}
 8006b16:	b002      	add	sp, #8
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(ADCx->CR,
 8006b1c:	4e0a      	ldr	r6, [pc, #40]	@ (8006b48 <BADC_Init+0x280>)
 8006b1e:	689c      	ldr	r4, [r3, #8]
 8006b20:	4034      	ands	r4, r6
 8006b22:	f044 0401 	orr.w	r4, r4, #1
 8006b26:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006b28:	681c      	ldr	r4, [r3, #0]
 8006b2a:	07e4      	lsls	r4, r4, #31
 8006b2c:	f53f af77 	bmi.w	8006a1e <BADC_Init+0x156>
 8006b30:	e7f5      	b.n	8006b1e <BADC_Init+0x256>
 8006b32:	2396      	movs	r3, #150	@ 0x96
      pHandle->BemfTimeout = 150U;
 8006b34:	461e      	mov	r6, r3
 8006b36:	e7a6      	b.n	8006a86 <BADC_Init+0x1be>
 8006b38:	5fffffc0 	.word	0x5fffffc0
 8006b3c:	6fffffc0 	.word	0x6fffffc0
 8006b40:	20000368 	.word	0x20000368
 8006b44:	053e2d63 	.word	0x053e2d63
 8006b48:	7fffffc0 	.word	0x7fffffc0
 8006b4c:	10624dd3 	.word	0x10624dd3
 8006b50:	aaaaaaab 	.word	0xaaaaaaab

08006b54 <BADC_Clear>:
  * @brief  Resets the parameter values of the component
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Clear( Bemf_ADC_Handle_t *pHandle )
{
  pHandle->ZcEvents = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
  pHandle->ElPeriodSum = 0;
 8006b5a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;
 8006b5c:	8243      	strh	r3, [r0, #18]
  pHandle->BufferFilled = 0U;
 8006b5e:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
  pHandle->CompSpeed = 0;
 8006b62:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0U;
 8006b66:	f8a0 30b8 	strh.w	r3, [r0, #184]	@ 0xb8
  pHandle->_Super.hElAngle  = 0;
 8006b6a:	8083      	strh	r3, [r0, #4]
  
  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 8006b6c:	7003      	strb	r3, [r0, #0]
  pHandle->IsLoopClosed=false;
  pHandle->IsAlgorithmConverged = false;
 8006b6e:	f8a0 3065 	strh.w	r3, [r0, #101]	@ 0x65
}
 8006b72:	4770      	bx	lr

08006b74 <BADC_Start>:
 * @brief  Starts bemf ADC conversion of the phase depending on current step
 * @param  pHandle: handler of the current instance of the Bemf_ADC component
 * @param  step: current step of the six-step sequence
 */
__weak void BADC_Start(Bemf_ADC_Handle_t *pHandle, uint8_t step)
{
 8006b74:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
  if (true == pHandle->ADCRegularLocked)
 8006b76:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006b7a:	6c46      	ldr	r6, [r0, #68]	@ 0x44
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006b7c:	e9d6 2402 	ldrd	r2, r4, [r6, #8]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006b80:	6935      	ldr	r5, [r6, #16]
  if (true == pHandle->ADCRegularLocked)
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d040      	beq.n	8006c08 <BADC_Start+0x94>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006b86:	6853      	ldr	r3, [r2, #4]
 8006b88:	f023 0320 	bic.w	r3, r3, #32
 8006b8c:	6053      	str	r3, [r2, #4]
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	f023 0320 	bic.w	r3, r3, #32
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	686b      	ldr	r3, [r5, #4]
 8006b98:	f023 0320 	bic.w	r3, r3, #32
 8006b9c:	606b      	str	r3, [r5, #4]
  else
  {
    pHandle->ADCRegularLocked = true;
  }

  switch (step)
 8006b9e:	2905      	cmp	r1, #5
 8006ba0:	d830      	bhi.n	8006c04 <BADC_Start+0x90>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	fa03 f101 	lsl.w	r1, r3, r1
 8006ba8:	f011 0f24 	tst.w	r1, #36	@ 0x24
 8006bac:	d157      	bne.n	8006c5e <BADC_Start+0xea>
 8006bae:	f011 0f12 	tst.w	r1, #18
 8006bb2:	d12d      	bne.n	8006c10 <BADC_Start+0x9c>
 8006bb4:	f011 0f09 	tst.w	r1, #9
 8006bb8:	d024      	beq.n	8006c04 <BADC_Start+0x90>
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @param  Phase: Floating phase for bemf acquisition
  */
void BADC_SelectAdcChannel(Bemf_ADC_Handle_t * pHandle, uint8_t Phase)
{
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006bba:	69f2      	ldr	r2, [r6, #28]
 8006bbc:	2a09      	cmp	r2, #9
 8006bbe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006bc2:	fa03 f302 	lsl.w	r3, r3, r2
 8006bc6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006bca:	bf84      	itt	hi
 8006bcc:	391e      	subhi	r1, #30
 8006bce:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
  MODIFY_REG(ADCx->JSQR,
 8006bd2:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8006bd4:	bf94      	ite	ls
 8006bd6:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8006bda:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8006bde:	0c5b      	lsrs	r3, r3, #17
 8006be0:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006be4:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8006be8:	4313      	orrs	r3, r2
 8006bea:	64eb      	str	r3, [r5, #76]	@ 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006bec:	686b      	ldr	r3, [r5, #4]
 8006bee:	f043 0320 	orr.w	r3, r3, #32
 8006bf2:	606b      	str	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8006bf4:	68ab      	ldr	r3, [r5, #8]
 8006bf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bfe:	f043 0308 	orr.w	r3, r3, #8
 8006c02:	60ab      	str	r3, [r5, #8]
}
 8006c04:	bc70      	pop	{r4, r5, r6}
 8006c06:	4770      	bx	lr
    pHandle->ADCRegularLocked = true;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 8006c0e:	e7c6      	b.n	8006b9e <BADC_Start+0x2a>
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006c10:	69b2      	ldr	r2, [r6, #24]
 8006c12:	2a09      	cmp	r2, #9
 8006c14:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006c18:	fa03 f302 	lsl.w	r3, r3, r2
 8006c1c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006c20:	bf84      	itt	hi
 8006c22:	391e      	subhi	r1, #30
 8006c24:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
  MODIFY_REG(ADCx->JSQR,
 8006c28:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8006c2a:	bf94      	ite	ls
 8006c2c:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8006c30:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8006c34:	0c5b      	lsrs	r3, r3, #17
 8006c36:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006c3a:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	64e3      	str	r3, [r4, #76]	@ 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006c42:	6863      	ldr	r3, [r4, #4]
 8006c44:	f043 0320 	orr.w	r3, r3, #32
 8006c48:	6063      	str	r3, [r4, #4]
  MODIFY_REG(ADCx->CR,
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c54:	f043 0308 	orr.w	r3, r3, #8
 8006c58:	60a3      	str	r3, [r4, #8]
}
 8006c5a:	bc70      	pop	{r4, r5, r6}
 8006c5c:	4770      	bx	lr
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006c5e:	6971      	ldr	r1, [r6, #20]
 8006c60:	2909      	cmp	r1, #9
 8006c62:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8006c66:	fa03 f301 	lsl.w	r3, r3, r1
 8006c6a:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8006c6e:	bf84      	itt	hi
 8006c70:	381e      	subhi	r0, #30
 8006c72:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
  MODIFY_REG(ADCx->JSQR,
 8006c76:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8006c78:	bf94      	ite	ls
 8006c7a:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 8006c7e:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8006c82:	0c5b      	lsrs	r3, r3, #17
 8006c84:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006c88:	f421 5178 	bic.w	r1, r1, #15872	@ 0x3e00
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006c90:	6853      	ldr	r3, [r2, #4]
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->CR,
 8006c98:	6893      	ldr	r3, [r2, #8]
 8006c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006ca2:	f043 0308 	orr.w	r3, r3, #8
}
 8006ca6:	bc70      	pop	{r4, r5, r6}
 8006ca8:	6093      	str	r3, [r2, #8]
 8006caa:	4770      	bx	lr

08006cac <BADC_Stop>:
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006cac:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006cae:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
{
 8006cb2:	b430      	push	{r4, r5}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006cb4:	684c      	ldr	r4, [r1, #4]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f024 0420 	bic.w	r4, r4, #32
 8006cbc:	604c      	str	r4, [r1, #4]
 8006cbe:	6854      	ldr	r4, [r2, #4]
 8006cc0:	f024 0420 	bic.w	r4, r4, #32
 8006cc4:	6054      	str	r4, [r2, #4]
 8006cc6:	685c      	ldr	r4, [r3, #4]
 8006cc8:	f024 0420 	bic.w	r4, r4, #32
 8006ccc:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006cce:	2420      	movs	r4, #32
 8006cd0:	600c      	str	r4, [r1, #0]
 8006cd2:	6014      	str	r4, [r2, #0]
 8006cd4:	601c      	str	r4, [r3, #0]
  if (true == pHandle->ADCRegularLocked)
 8006cd6:	f890 4050 	ldrb.w	r4, [r0, #80]	@ 0x50
 8006cda:	b194      	cbz	r4, 8006d02 <BADC_Stop+0x56>
  MODIFY_REG(ADCx->CR,
 8006cdc:	688c      	ldr	r4, [r1, #8]
 8006cde:	4d0a      	ldr	r5, [pc, #40]	@ (8006d08 <BADC_Stop+0x5c>)
 8006ce0:	402c      	ands	r4, r5
 8006ce2:	f044 0420 	orr.w	r4, r4, #32
 8006ce6:	608c      	str	r4, [r1, #8]
 8006ce8:	6891      	ldr	r1, [r2, #8]
 8006cea:	4029      	ands	r1, r5
 8006cec:	f041 0120 	orr.w	r1, r1, #32
 8006cf0:	6091      	str	r1, [r2, #8]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	402a      	ands	r2, r5
    pHandle->ADCRegularLocked=false;    
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f042 0220 	orr.w	r2, r2, #32
 8006cfc:	609a      	str	r2, [r3, #8]
 8006cfe:	f880 1050 	strb.w	r1, [r0, #80]	@ 0x50
}
 8006d02:	bc30      	pop	{r4, r5}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	7fffffc0 	.word	0x7fffffc0

08006d0c <BADC_SpeedMeasureOn>:
  LL_TIM_ClearFlag_UPDATE(pHandle->pParams_str->LfTim);
 8006d0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006d0e:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d10:	f06f 0201 	mvn.w	r2, #1
 8006d14:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	60da      	str	r2, [r3, #12]
}
 8006d1e:	4770      	bx	lr

08006d20 <BADC_SpeedMeasureOff>:
  LL_TIM_DisableIT_UPDATE(pHandle->pParams_str->LfTim);
 8006d20:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006d22:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d24:	68d3      	ldr	r3, [r2, #12]
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	60d3      	str	r3, [r2, #12]
}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <BADC_SetSamplingPoint>:
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006d30:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8006d34:	2a03      	cmp	r2, #3
{
 8006d36:	4603      	mov	r3, r0
 8006d38:	4608      	mov	r0, r1
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006d3a:	d00f      	beq.n	8006d5c <BADC_SetSamplingPoint+0x2c>
      pHandle->IsOnSensingEnabled=false;
 8006d3c:	2100      	movs	r1, #0
      pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006d3e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
      pHandle->IsOnSensingEnabled=false;
 8006d42:	f883 103a 	strb.w	r1, [r3, #58]	@ 0x3a
      pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006d46:	635a      	str	r2, [r3, #52]	@ 0x34
  if (true == pHandle->pParams_str->gpio_divider_available)  LL_GPIO_ResetOutputPin( pHandle->pParams_str->bemf_divider_port, pHandle->pParams_str->bemf_divider_pin );
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	f893 1020 	ldrb.w	r1, [r3, #32]
 8006d4e:	b111      	cbz	r1, 8006d56 <BADC_SetSamplingPoint+0x26>
 8006d50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006d54:	628b      	str	r3, [r1, #40]	@ 0x28
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8006d56:	8891      	ldrh	r1, [r2, #4]
 8006d58:	f000 bcd6 	b.w	8007708 <PWMC_SetADCTriggerChannel>
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006d5c:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	d1eb      	bne.n	8006d3c <BADC_SetSamplingPoint+0xc>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8006d64:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006d68:	8b89      	ldrh	r1, [r1, #28]
 8006d6a:	b122      	cbz	r2, 8006d76 <BADC_SetSamplingPoint+0x46>
    else if ((pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh < pHandle->OnSensingDisThres))
 8006d6c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8006d6e:	428a      	cmp	r2, r1
 8006d70:	d8e4      	bhi.n	8006d3c <BADC_SetSamplingPoint+0xc>
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8006d72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d74:	e7e8      	b.n	8006d48 <BADC_SetSamplingPoint+0x18>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8006d76:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8006d78:	428a      	cmp	r2, r1
 8006d7a:	d2fa      	bcs.n	8006d72 <BADC_SetSamplingPoint+0x42>
      pHandle->IsOnSensingEnabled=true;
 8006d7c:	2101      	movs	r1, #1
      pHandle->pSensing_Params = &(pHandle->Pwm_ON);
 8006d7e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
      pHandle->IsOnSensingEnabled=true;
 8006d82:	f883 103a 	strb.w	r1, [r3, #58]	@ 0x3a
      pHandle->pSensing_Params = &(pHandle->Pwm_ON);
 8006d86:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d88:	e7de      	b.n	8006d48 <BADC_SetSamplingPoint+0x18>
 8006d8a:	bf00      	nop

08006d8c <BADC_IsZcDetected>:
  pHandle->DemagCounter++;
 8006d8c:	f8b0 30f0 	ldrh.w	r3, [r0, #240]	@ 0xf0
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006d90:	f8b0 c0f2 	ldrh.w	ip, [r0, #242]	@ 0xf2
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006d94:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  pHandle->DemagCounter++;
 8006d96:	3301      	adds	r3, #1
 8006d98:	b29b      	uxth	r3, r3
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006d9a:	459c      	cmp	ip, r3
{
 8006d9c:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006d9e:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006da2:	6916      	ldr	r6, [r2, #16]
  pHandle->DemagCounter++;
 8006da4:	f8a0 30f0 	strh.w	r3, [r0, #240]	@ 0xf0
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006da8:	d302      	bcc.n	8006db0 <BADC_IsZcDetected+0x24>
        switch(pHandlePWMC->Step)
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	bc70      	pop	{r4, r5, r6}
 8006dae:	4770      	bx	lr
    if (pHandle->ZcDetected == false)
 8006db0:	f890 3067 	ldrb.w	r3, [r0, #103]	@ 0x67
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f8      	bne.n	8006daa <BADC_IsZcDetected+0x1e>
      switch(pHandlePWMC->Step)
 8006db8:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	d8f4      	bhi.n	8006daa <BADC_IsZcDetected+0x1e>
 8006dc0:	e8df f003 	tbb	[pc, r3]
 8006dc4:	5b694c3d 	.word	0x5b694c3d
 8006dc8:	0379      	.short	0x0379
        AdcValue = ADCx_u->JDR1;
 8006dca:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006dce:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8006dd2:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_u->JDR1;
 8006dd4:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006dd6:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[0] = AdcValue;   
 8006dd8:	8404      	strh	r4, [r0, #32]
        if(pHandle->Direction == 1)
 8006dda:	d065      	beq.n	8006ea8 <BADC_IsZcDetected+0x11c>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006ddc:	882d      	ldrh	r5, [r5, #0]
 8006dde:	42a5      	cmp	r5, r4
 8006de0:	d9e3      	bls.n	8006daa <BADC_IsZcDetected+0x1e>
{
 8006de2:	f245 5554 	movw	r5, #21844	@ 0x5554
        pHandle->MeasuredElAngle += (S16_60_PHASE_SHIFT/2) - (int16_t)((uint32_t)(pHandle->Zc2CommDelay * S16_60_PHASE_SHIFT)>>9);
 8006de6:	f8b0 6040 	ldrh.w	r6, [r0, #64]	@ 0x40
 8006dea:	f642 24aa 	movw	r4, #10922	@ 0x2aaa
 8006dee:	fb06 f404 	mul.w	r4, r6, r4
 8006df2:	eba5 2454 	sub.w	r4, r5, r4, lsr #9
 8006df6:	f8a0 40bc 	strh.w	r4, [r0, #188]	@ 0xbc
        if (pHandle->ZcEvents > pHandle->StartUpConsistThreshold) 
 8006dfa:	f890 5062 	ldrb.w	r5, [r0, #98]	@ 0x62
 8006dfe:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
 8006e02:	42a5      	cmp	r5, r4
        pHandle->ZcEvents++;
 8006e04:	f104 0401 	add.w	r4, r4, #1
 8006e08:	f880 4026 	strb.w	r4, [r0, #38]	@ 0x26
          pHandle->IsAlgorithmConverged = true;
 8006e0c:	f04f 0401 	mov.w	r4, #1
        if (pHandle->ZcEvents > pHandle->StartUpConsistThreshold) 
 8006e10:	d361      	bcc.n	8006ed6 <BADC_IsZcDetected+0x14a>
        switch(pHandlePWMC->Step)
 8006e12:	2b05      	cmp	r3, #5
        pHandle->ZcDetected = true;
 8006e14:	f880 4067 	strb.w	r4, [r0, #103]	@ 0x67
        if (true == pHandle->IsAlgorithmConverged)
 8006e18:	f890 4065 	ldrb.w	r4, [r0, #101]	@ 0x65
        switch(pHandlePWMC->Step)
 8006e1c:	d80b      	bhi.n	8006e36 <BADC_IsZcDetected+0xaa>
 8006e1e:	2501      	movs	r5, #1
 8006e20:	fa05 f303 	lsl.w	r3, r5, r3
 8006e24:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8006e28:	d070      	beq.n	8006f0c <BADC_IsZcDetected+0x180>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006e2a:	6813      	ldr	r3, [r2, #0]
          if(pHandle->Direction == 1)
 8006e2c:	2901      	cmp	r1, #1
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	d073      	beq.n	8006f1a <BADC_IsZcDetected+0x18e>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006e32:	e9c0 3338 	strd	r3, r3, [r0, #224]	@ 0xe0
        if (true == pHandle->IsAlgorithmConverged)
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d153      	bne.n	8006ee2 <BADC_IsZcDetected+0x156>
        switch(pHandlePWMC->Step)
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7b6      	b.n	8006dac <BADC_IsZcDetected+0x20>
        AdcValue = ADCx_w->JDR1;
 8006e3e:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006e42:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e46:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_w->JDR1;
 8006e48:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006e4a:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[2] = AdcValue;
 8006e4c:	8484      	strh	r4, [r0, #36]	@ 0x24
        if(pHandle->Direction == 1)
 8006e4e:	d01d      	beq.n	8006e8c <BADC_IsZcDetected+0x100>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8006e50:	886d      	ldrh	r5, [r5, #2]
 8006e52:	42a5      	cmp	r5, r4
 8006e54:	d2a9      	bcs.n	8006daa <BADC_IsZcDetected+0x1e>
{
 8006e56:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8006e5a:	e7c4      	b.n	8006de6 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_v->JDR1;
 8006e5c:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006e60:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e64:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_v->JDR1;
 8006e66:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006e68:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[1] = AdcValue;
 8006e6a:	8444      	strh	r4, [r0, #34]	@ 0x22
        if(pHandle->Direction == 1)
 8006e6c:	d02c      	beq.n	8006ec8 <BADC_IsZcDetected+0x13c>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e6e:	882d      	ldrh	r5, [r5, #0]
 8006e70:	42a5      	cmp	r5, r4
 8006e72:	d99a      	bls.n	8006daa <BADC_IsZcDetected+0x1e>
{
 8006e74:	f64a 25ab 	movw	r5, #43691	@ 0xaaab
 8006e78:	e7b5      	b.n	8006de6 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_w->JDR1;
 8006e7a:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006e7e:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e82:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_w->JDR1;
 8006e84:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006e86:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[2] = AdcValue;          
 8006e88:	8484      	strh	r4, [r0, #36]	@ 0x24
        if(pHandle->Direction == 1)
 8006e8a:	d0e1      	beq.n	8006e50 <BADC_IsZcDetected+0xc4>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e8c:	882d      	ldrh	r5, [r5, #0]
 8006e8e:	42a5      	cmp	r5, r4
 8006e90:	d98b      	bls.n	8006daa <BADC_IsZcDetected+0x1e>
{
 8006e92:	2500      	movs	r5, #0
 8006e94:	e7a7      	b.n	8006de6 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_u->JDR1;
 8006e96:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006e9a:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006e9e:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_u->JDR1;
 8006ea0:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006ea2:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[0] = AdcValue;
 8006ea4:	8404      	strh	r4, [r0, #32]
        if(pHandle->Direction == 1)
 8006ea6:	d099      	beq.n	8006ddc <BADC_IsZcDetected+0x50>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8006ea8:	886d      	ldrh	r5, [r5, #2]
 8006eaa:	42a5      	cmp	r5, r4
 8006eac:	f4bf af7d 	bcs.w	8006daa <BADC_IsZcDetected+0x1e>
{
 8006eb0:	f24d 5556 	movw	r5, #54614	@ 0xd556
 8006eb4:	e797      	b.n	8006de6 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_v->JDR1;
 8006eb6:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
        if(pHandle->Direction == 1)
 8006eba:	f990 105a 	ldrsb.w	r1, [r0, #90]	@ 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006ebe:	6b45      	ldr	r5, [r0, #52]	@ 0x34
        AdcValue = ADCx_v->JDR1;
 8006ec0:	b2a4      	uxth	r4, r4
        if(pHandle->Direction == 1)
 8006ec2:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[1] = AdcValue;   
 8006ec4:	8444      	strh	r4, [r0, #34]	@ 0x22
        if(pHandle->Direction == 1)
 8006ec6:	d0d2      	beq.n	8006e6e <BADC_IsZcDetected+0xe2>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8006ec8:	886d      	ldrh	r5, [r5, #2]
 8006eca:	42a5      	cmp	r5, r4
 8006ecc:	f4bf af6d 	bcs.w	8006daa <BADC_IsZcDetected+0x1e>
{
 8006ed0:	f642 25aa 	movw	r5, #10922	@ 0x2aaa
 8006ed4:	e787      	b.n	8006de6 <BADC_IsZcDetected+0x5a>
        switch(pHandlePWMC->Step)
 8006ed6:	2b05      	cmp	r3, #5
          pHandle->IsAlgorithmConverged = true;
 8006ed8:	f880 4065 	strb.w	r4, [r0, #101]	@ 0x65
        pHandle->ZcDetected = true;
 8006edc:	f880 4067 	strb.w	r4, [r0, #103]	@ 0x67
        switch(pHandlePWMC->Step)
 8006ee0:	d99d      	bls.n	8006e1e <BADC_IsZcDetected+0x92>
          uint32_t tempReg = (uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * (pHandle->AvrElSpeedDpp * pHandle->Direction)));		  
 8006ee2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
          LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,pHandle->ZC_Counter_Last + (((uint32_t)((pHandle->Zc2CommDelay) * tempReg)) >> 9) );
 8006ee6:	6814      	ldr	r4, [r2, #0]
 8006ee8:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
          uint32_t tempReg = (uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * (pHandle->AvrElSpeedDpp * pHandle->Direction)));		  
 8006eec:	fb11 f103 	smulbb	r1, r1, r3
 8006ef0:	f8d0 30b4 	ldr.w	r3, [r0, #180]	@ 0xb4
 8006ef4:	fb03 1101 	mla	r1, r3, r1, r1
 8006ef8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
 8006efc:	fbb3 f3f1 	udiv	r3, r3, r1
          LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,pHandle->ZC_Counter_Last + (((uint32_t)((pHandle->Zc2CommDelay) * tempReg)) >> 9) );
 8006f00:	fb06 f303 	mul.w	r3, r6, r3
 8006f04:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  WRITE_REG(TIMx->ARR, AutoReload);
 8006f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8006f0a:	e796      	b.n	8006e3a <BADC_IsZcDetected+0xae>
        switch(pHandlePWMC->Step)
 8006f0c:	f013 0f15 	tst.w	r3, #21
 8006f10:	d091      	beq.n	8006e36 <BADC_IsZcDetected+0xaa>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006f12:	6813      	ldr	r3, [r2, #0]
          if(pHandle->Direction == 1)
 8006f14:	42a9      	cmp	r1, r5
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	d08b      	beq.n	8006e32 <BADC_IsZcDetected+0xa6>
            pHandle->ZC_Counter_Up = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006f1a:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
            pHandle->ZC_Counter_Last = pHandle->ZC_Counter_Up;
 8006f1e:	f8c0 30e4 	str.w	r3, [r0, #228]	@ 0xe4
 8006f22:	e788      	b.n	8006e36 <BADC_IsZcDetected+0xaa>

08006f24 <BADC_CalcAvrgMecSpeedUnit>:
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8006f24:	f9b0 305c 	ldrsh.w	r3, [r0, #92]	@ 0x5c
{
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8006f30:	81c3      	strh	r3, [r0, #14]
  if (0 ==  pHandle->AvrElSpeedDpp)
 8006f32:	b1f3      	cbz	r3, 8006f72 <BADC_CalcAvrgMecSpeedUnit+0x4e>
    if (pHandle->AvrElSpeedDpp != MAX_PSEUDO_SPEED)
 8006f34:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	f000 80a1 	beq.w	8007080 <BADC_CalcAvrgMecSpeedUnit+0x15c>
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8006f3e:	8881      	ldrh	r1, [r0, #4]
 8006f40:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	@ 0xbc
 8006f44:	1a52      	subs	r2, r2, r1
 8006f46:	b212      	sxth	r2, r2
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8006f48:	f8b0 10d4 	ldrh.w	r1, [r0, #212]	@ 0xd4
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8006f4c:	f8a0 20ba 	strh.w	r2, [r0, #186]	@ 0xba
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8006f50:	fb92 f1f1 	sdiv	r1, r2, r1
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8006f54:	8b42      	ldrh	r2, [r0, #26]
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8006f56:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8006f5a:	fb02 f303 	mul.w	r3, r2, r3
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8006f5e:	69c1      	ldr	r1, [r0, #28]
 8006f60:	7842      	ldrb	r2, [r0, #1]
                       * (int32_t)SPEED_UNIT )
 8006f62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f66:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8006f68:	fb01 f202 	mul.w	r2, r1, r2
 8006f6c:	fb93 f3f2 	sdiv	r3, r3, r2
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8006f70:	b21b      	sxth	r3, r3
    *pMecSpeedUnit = 0;
 8006f72:	802b      	strh	r3, [r5, #0]
  bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8006f74:	4629      	mov	r1, r5
 8006f76:	4620      	mov	r0, r4
 8006f78:	f001 f95a 	bl	8008230 <SPD_IsMecSpeedReliable>
void BADC_CalcAvrgElSpeedDpp( Bemf_ADC_Handle_t * pHandle )
{
  uint32_t wCaptBuf;
  
  /* used to validate the average speed measurement */
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8006f7c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8006f80:	f894 104a 	ldrb.w	r1, [r4, #74]	@ 0x4a
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8006f84:	f9b5 2000 	ldrsh.w	r2, [r5]
 8006f88:	81a2      	strh	r2, [r4, #12]
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8006f8a:	428b      	cmp	r3, r1
 8006f8c:	d205      	bcs.n	8006f9a <BADC_CalcAvrgMecSpeedUnit+0x76>
  {
    pHandle->BufferFilled++;
 8006f8e:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8006f92:	3301      	adds	r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
    /* Nothing to do */
  }
  if (false == pHandle->IsLoopClosed)
  {
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8006f9a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  if (false == pHandle->IsLoopClosed)
 8006f9e:	f894 6066 	ldrb.w	r6, [r4, #102]	@ 0x66
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8006fa2:	3301      	adds	r3, #1
  if (false == pHandle->IsLoopClosed)
 8006fa4:	b97e      	cbnz	r6, 8006fc6 <BADC_CalcAvrgMecSpeedUnit+0xa2>
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8006fa6:	f9b4 505e 	ldrsh.w	r5, [r4, #94]	@ 0x5e
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	d161      	bne.n	8007072 <BADC_CalcAvrgMecSpeedUnit+0x14e>
 8006fae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  }
  else
  {
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
  }
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8006fb6:	f8c4 20d8 	str.w	r2, [r4, #216]	@ 0xd8

  /* Filtering to fast speed... could be a glitch  ? */
  /* the MAX_PSEUDO_SPEED is temporary in the buffer, and never included in average computation*/
  if (wCaptBuf < pHandle->MinPeriod)
 8006fba:	f8d4 20cc 	ldr.w	r2, [r4, #204]	@ 0xcc
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d20e      	bcs.n	8006fe0 <BADC_CalcAvrgMecSpeedUnit+0xbc>
}
 8006fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
 8006fc6:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 8006fca:	f8d4 50ec 	ldr.w	r5, [r4, #236]	@ 0xec
 8006fce:	442a      	add	r2, r5
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8006fd4:	f8c4 20d8 	str.w	r2, [r4, #216]	@ 0xd8
  if (wCaptBuf < pHandle->MinPeriod)
 8006fd8:	f8d4 20cc 	ldr.w	r2, [r4, #204]	@ 0xcc
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d3f0      	bcc.n	8006fc2 <BADC_CalcAvrgMecSpeedUnit+0x9e>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006fe0:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
    if (wCaptBuf >= pHandle->MaxPeriod)
 8006fe4:	f8d4 80c8 	ldr.w	r8, [r4, #200]	@ 0xc8
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006fe8:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    {
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8006fea:	f994 c05a 	ldrsb.w	ip, [r4, #90]	@ 0x5a
 8006fee:	eb04 0e82 	add.w	lr, r4, r2, lsl #2
    if (wCaptBuf >= pHandle->MaxPeriod)
 8006ff2:	4543      	cmp	r3, r8
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006ff4:	f8de 706c 	ldr.w	r7, [lr, #108]	@ 0x6c
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)wCaptBuf ;
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
    }
    /* Update pointers to speed buffer */
    pHandle->SpeedFIFOIdx++;
 8006ff8:	f102 0201 	add.w	r2, r2, #1
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006ffc:	eba5 0507 	sub.w	r5, r5, r7
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8007000:	bf38      	it	cc
 8007002:	fb0c f703 	mulcc.w	r7, ip, r3
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007006:	6565      	str	r5, [r4, #84]	@ 0x54
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8007008:	bf2c      	ite	cs
 800700a:	fb0c f708 	mulcs.w	r7, ip, r8
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 800700e:	19ed      	addcc	r5, r5, r7
    pHandle->SpeedFIFOIdx++;
 8007010:	b292      	uxth	r2, r2
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 8007012:	bf38      	it	cc
 8007014:	6565      	strcc	r5, [r4, #84]	@ 0x54
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
    {
      pHandle->SpeedFIFOIdx = 0U;
 8007016:	428a      	cmp	r2, r1
 8007018:	bf08      	it	eq
 800701a:	2200      	moveq	r2, #0
 800701c:	f8ce 706c 	str.w	r7, [lr, #108]	@ 0x6c
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8007020:	f8a4 20b8 	strh.w	r2, [r4, #184]	@ 0xb8
    }
    if (((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U)) 
 8007024:	f894 206a 	ldrb.w	r2, [r4, #106]	@ 0x6a
 8007028:	4291      	cmp	r1, r2
 800702a:	d917      	bls.n	800705c <BADC_CalcAvrgMecSpeedUnit+0x138>
 800702c:	b9bb      	cbnz	r3, 800705e <BADC_CalcAvrgMecSpeedUnit+0x13a>
        || (false == pHandle->IsLoopClosed))
 800702e:	b1b6      	cbz	r6, 800705e <BADC_CalcAvrgMecSpeedUnit+0x13a>
      pHandle->SpeedFIFOIdx = 0U;
 8007030:	2200      	movs	r2, #0
 8007032:	f104 0568 	add.w	r5, r4, #104	@ 0x68
 8007036:	4613      	mov	r3, r2
    else
    {
      /* Average speed allow to smooth the mechanical sensors misalignement */
      int32_t  tElPeriodSum = 0;
      uint8_t i;
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007038:	3201      	adds	r2, #1
      {
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 800703a:	f855 6f04 	ldr.w	r6, [r5, #4]!
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 800703e:	fa5f fc82 	uxtb.w	ip, r2
 8007042:	4561      	cmp	r1, ip
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 8007044:	4433      	add	r3, r6
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007046:	d8f7      	bhi.n	8007038 <BADC_CalcAvrgMecSpeedUnit+0x114>
      }             
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
                                               (tElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 8007048:	fb93 f3f1 	sdiv	r3, r3, r1
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
 800704c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007050:	fb92 f2f3 	sdiv	r2, r2, r3
 8007054:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
}
 8007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || (false == pHandle->IsLoopClosed))
 800705c:	b99e      	cbnz	r6, 8007086 <BADC_CalcAvrgMecSpeedUnit+0x162>
      uint32_t tempReg = (pHandle->PseudoPeriodConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 800705e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007062:	fbb2 f2f3 	udiv	r2, r2, r3
 8007066:	fb0c f202 	mul.w	r2, ip, r2
      pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 800706a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
}
 800706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007072:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007076:	fb03 f505 	mul.w	r5, r3, r5
 800707a:	fbb2 f2f5 	udiv	r2, r2, r5
 800707e:	e7a7      	b.n	8006fd0 <BADC_CalcAvrgMecSpeedUnit+0xac>
      *pMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8007080:	f9b0 30c0 	ldrsh.w	r3, [r0, #192]	@ 0xc0
 8007084:	e775      	b.n	8006f72 <BADC_CalcAvrgMecSpeedUnit+0x4e>
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007086:	2900      	cmp	r1, #0
 8007088:	d1d2      	bne.n	8007030 <BADC_CalcAvrgMecSpeedUnit+0x10c>
 800708a:	460b      	mov	r3, r1
 800708c:	e7de      	b.n	800704c <BADC_CalcAvrgMecSpeedUnit+0x128>
 800708e:	bf00      	nop

08007090 <BADC_SetDirection>:
  if (MC_NULL == pHandle)
 8007090:	b108      	cbz	r0, 8007096 <BADC_SetDirection+0x6>
    pHandle->Direction = direction;
 8007092:	f880 105a 	strb.w	r1, [r0, #90]	@ 0x5a
}
 8007096:	4770      	bx	lr

08007098 <BADC_IsObserverConverged>:
}
 8007098:	f890 0065 	ldrb.w	r0, [r0, #101]	@ 0x65
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <BADC_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 80070a0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80070a4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80070a8:	428a      	cmp	r2, r1
{
 80070aa:	4603      	mov	r3, r0
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 80070ac:	d013      	beq.n	80070d6 <BADC_CalcElAngle+0x36>
      if (false == pHandle->IsLoopClosed)
 80070ae:	f890 1066 	ldrb.w	r1, [r0, #102]	@ 0x66
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80070b2:	f9b0 00bc 	ldrsh.w	r0, [r0, #188]	@ 0xbc
      if (false == pHandle->IsLoopClosed)
 80070b6:	b961      	cbnz	r1, 80070d2 <BADC_CalcElAngle+0x32>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80070b8:	8899      	ldrh	r1, [r3, #4]
        pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80070ba:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80070be:	fa1f fc82 	uxth.w	ip, r2
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80070c2:	4461      	add	r1, ip
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80070c4:	4484      	add	ip, r0
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80070c6:	f8b3 00be 	ldrh.w	r0, [r3, #190]	@ 0xbe
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80070ca:	f8a3 c0bc 	strh.w	ip, [r3, #188]	@ 0xbc
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80070ce:	4401      	add	r1, r0
 80070d0:	b208      	sxth	r0, r1
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 80070d2:	8098      	strh	r0, [r3, #4]
}
 80070d4:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80070d6:	8880      	ldrh	r0, [r0, #4]
 80070d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80070dc:	4410      	add	r0, r2
 80070de:	b200      	sxth	r0, r0
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 80070e0:	8098      	strh	r0, [r3, #4]
}
 80070e2:	4770      	bx	lr

080070e4 <BADC_StepChangeEvent>:
  * @param  pHandlePWMC: handler of the current instance of the PWMC component
  */
void BADC_StepChangeEvent(Bemf_ADC_Handle_t * pHandle, int16_t hElSpeedDpp, PWMC_Handle_t *pHandlePWMC)
{
  pHandle->DemagCounter = 0;
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 80070e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80070e6:	681a      	ldr	r2, [r3, #0]
{
 80070e8:	b530      	push	{r4, r5, lr}
  return (uint32_t)(READ_REG(TIMx->ARR));
 80070ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 80070ec:	f8d0 50e4 	ldr.w	r5, [r0, #228]	@ 0xe4
  if (false == pHandle->IsLoopClosed)
 80070f0:	f890 4066 	ldrb.w	r4, [r0, #102]	@ 0x66
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 80070f4:	1b5b      	subs	r3, r3, r5
  pHandle->DemagCounter = 0;
 80070f6:	f04f 0c00 	mov.w	ip, #0
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 80070fa:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
  pHandle->DemagCounter = 0;
 80070fe:	f8a0 c0f0 	strh.w	ip, [r0, #240]	@ 0xf0
  if (false == pHandle->IsLoopClosed)
 8007102:	b974      	cbnz	r4, 8007122 <BADC_StepChangeEvent+0x3e>
  {
    if (hElSpeedDpp < 0)
 8007104:	4561      	cmp	r1, ip
    {
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 8007106:	bfb8      	it	lt
 8007108:	4249      	neglt	r1, r1
    }
    else
    {
      pHandle->VirtualElSpeedDpp = hElSpeedDpp;
    }
    pHandle->ZcDetected = false;
 800710a:	f04f 0300 	mov.w	r3, #0
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 800710e:	bfb8      	it	lt
 8007110:	b209      	sxthlt	r1, r1
    pHandle->ZcDetected = false;
 8007112:	f880 3067 	strb.w	r3, [r0, #103]	@ 0x67
    else
    {
      pHandle->ZcDetected = false;
    }
  }
  pHandle->StepUpdate = true;
 8007116:	2301      	movs	r3, #1
 8007118:	f8a0 105e 	strh.w	r1, [r0, #94]	@ 0x5e
 800711c:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
}
 8007120:	bd30      	pop	{r4, r5, pc}
    if(pHandle->Direction == -1)
 8007122:	f990 e05a 	ldrsb.w	lr, [r0, #90]	@ 0x5a
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8007126:	f8b0 10bc 	ldrh.w	r1, [r0, #188]	@ 0xbc
    if(pHandle->Direction == -1)
 800712a:	f642 23aa 	movw	r3, #10922	@ 0x2aaa
 800712e:	f24d 5456 	movw	r4, #54614	@ 0xd556
 8007132:	f1be 3fff 	cmp.w	lr, #4294967295
 8007136:	bf08      	it	eq
 8007138:	4623      	moveq	r3, r4
    pHandle->MeasuredElAngle += ElAngleUpdate;
 800713a:	440b      	add	r3, r1
    if ( false == pHandle->ZcDetected)
 800713c:	f890 1067 	ldrb.w	r1, [r0, #103]	@ 0x67
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8007140:	f8a0 30bc 	strh.w	r3, [r0, #188]	@ 0xbc
    if ( false == pHandle->ZcDetected)
 8007144:	b961      	cbnz	r1, 8007160 <BADC_StepChangeEvent+0x7c>
 8007146:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
      LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) * 150 / 100);
 8007148:	4908      	ldr	r1, [pc, #32]	@ (800716c <BADC_StepChangeEvent+0x88>)
 800714a:	2496      	movs	r4, #150	@ 0x96
 800714c:	fb04 f303 	mul.w	r3, r4, r3
 8007150:	fba1 1303 	umull	r1, r3, r1, r3
 8007154:	095b      	lsrs	r3, r3, #5
  WRITE_REG(TIMx->ARR, AutoReload);
 8007156:	62d3      	str	r3, [r2, #44]	@ 0x2c
  pHandle->StepUpdate = true;
 8007158:	2301      	movs	r3, #1
 800715a:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
}
 800715e:	bd30      	pop	{r4, r5, pc}
  pHandle->StepUpdate = true;
 8007160:	2301      	movs	r3, #1
      pHandle->ZcDetected = false;
 8007162:	f880 c067 	strb.w	ip, [r0, #103]	@ 0x67
  pHandle->StepUpdate = true;
 8007166:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68
}
 800716a:	bd30      	pop	{r4, r5, pc}
 800716c:	51eb851f 	.word	0x51eb851f

08007170 <BADC_CalcRevUpDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRevUpDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8007170:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	@ 0x5e
 8007174:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
                       * (int32_t)SPEED_UNIT )
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8007178:	7842      	ldrb	r2, [r0, #1]
 800717a:	69c1      	ldr	r1, [r0, #28]
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800717c:	fb0c f303 	mul.w	r3, ip, r3
                       * (int32_t)SPEED_UNIT )
 8007180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8007184:	fb01 f202 	mul.w	r2, r1, r2
                       * (int32_t)SPEED_UNIT )
 8007188:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 800718a:	fb93 f3f2 	sdiv	r3, r3, r2
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800718e:	b21b      	sxth	r3, r3
  if (hSpeed == 0)
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 8007190:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	@ 0xfa
  if (hSpeed == 0)
 8007194:	b13b      	cbz	r3, 80071a6 <BADC_CalcRevUpDemagTime+0x36>
  }	  
  else
  {
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
 8007196:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	@ 0xf6
 800719a:	fb91 f3f3 	sdiv	r3, r1, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	429a      	cmp	r2, r3
 80071a2:	bf38      	it	cc
 80071a4:	461a      	movcc	r2, r3
 80071a6:	f8a0 20f2 	strh.w	r2, [r0, #242]	@ 0xf2
  }
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
  }  
}
 80071aa:	4770      	bx	lr

080071ac <BADC_CalcRunDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRunDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = pHandle->_Super.hAvrMecSpeedUnit;
 80071ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  if (hSpeed < 0) hSpeed = - hSpeed; 
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 80071b0:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	@ 0xf4
  {   
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 80071b4:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	@ 0xfa
  if (hSpeed < 0) hSpeed = - hSpeed; 
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bfbc      	itt	lt
 80071bc:	425b      	neglt	r3, r3
 80071be:	b21b      	sxthlt	r3, r3
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 80071c0:	428b      	cmp	r3, r1
 80071c2:	da07      	bge.n	80071d4 <BADC_CalcRunDemagTime+0x28>
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
 80071c4:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	@ 0xf8
 80071c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf38      	it	cc
 80071d2:	461a      	movcc	r2, r3
    {
      pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 80071d4:	f8a0 20f2 	strh.w	r2, [r0, #242]	@ 0xf2
  } 
  else
  {   
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
  }
}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop

080071dc <BADC_SetLoopClosed>:
  *         virtual speed sensor transition is ended.  
  * @param  pHandle: handler of the current instance of the STO component
  */
void BADC_SetLoopClosed(Bemf_ADC_Handle_t *pHandle)
{
  pHandle->IsLoopClosed=true;
 80071dc:	2301      	movs	r3, #1
 80071de:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
}
 80071e2:	4770      	bx	lr

080071e4 <BADC_GetLastBemfValue>:
  * @param  phase: motor phase under investigation
  * @retval uint16_t: Bemf value
  */
uint16_t BADC_GetLastBemfValue(Bemf_ADC_Handle_t *pHandle, uint8_t phase)
{   
  return ((MC_NULL == pHandle) ? 0U : pHandle->BemfLastValues[phase]);
 80071e4:	b110      	cbz	r0, 80071ec <BADC_GetLastBemfValue+0x8>
 80071e6:	3110      	adds	r1, #16
 80071e8:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <BADC_GetBemfZcrFlag>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @retval bool: zero crossing detection flag
  */
bool BADC_GetBemfZcrFlag(Bemf_ADC_Handle_t *pHandle)
{   
  return ((MC_NULL == pHandle) ? 0U : pHandle->ZcDetected);
 80071f0:	b108      	cbz	r0, 80071f6 <BADC_GetBemfZcrFlag+0x6>
 80071f2:	f890 0067 	ldrb.w	r0, [r0, #103]	@ 0x67
}  
 80071f6:	4770      	bx	lr

080071f8 <BADC_ClearStepUpdate>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @retval bool: step update request
  */
bool BADC_ClearStepUpdate(Bemf_ADC_Handle_t *pHandle)
{ 
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 80071f8:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
{ 
 80071fc:	4603      	mov	r3, r0
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 80071fe:	b12a      	cbz	r2, 800720c <BADC_ClearStepUpdate+0x14>
  pHandle->StepUpdate = false;
 8007200:	2200      	movs	r2, #0
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 8007202:	f890 0068 	ldrb.w	r0, [r0, #104]	@ 0x68
  pHandle->StepUpdate = false;
 8007206:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  return retValue;
}
 800720a:	4770      	bx	lr
  pHandle->StepUpdate = false;
 800720c:	2200      	movs	r2, #0
 800720e:	2001      	movs	r0, #1
 8007210:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop

08007218 <BADC_SetBemfSensorlessParam>:
  */
void BADC_SetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *Zc2CommDelay,
                                   Bemf_Demag_Params *bemfAdcDemagConfig)         
{  
  pHandle->Pwm_OFF.AdcThresholdUp = BemfAdcConfig->AdcThresholdUp;
  pHandle->Pwm_OFF.AdcThresholdDown = BemfAdcConfig->AdcThresholdDown;
 8007218:	f8d1 c000 	ldr.w	ip, [r1]
 800721c:	f8c0 c02e 	str.w	ip, [r0, #46]	@ 0x2e
  pHandle->Pwm_OFF.SamplingPoint = BemfAdcConfig->SamplingPoint;
 8007220:	8889      	ldrh	r1, [r1, #4]
 8007222:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->Zc2CommDelay = *Zc2CommDelay;
 8007224:	8811      	ldrh	r1, [r2, #0]
  pHandle->DemagParams.DemagMinimumSpeedUnit = bemfAdcDemagConfig->DemagMinimumSpeedUnit;
 8007226:	881a      	ldrh	r2, [r3, #0]
  pHandle->DemagParams.DemagMinimumThreshold = bemfAdcDemagConfig->DemagMinimumThreshold;
 8007228:	88db      	ldrh	r3, [r3, #6]
 800722a:	f8a0 30fa 	strh.w	r3, [r0, #250]	@ 0xfa
  pHandle->Zc2CommDelay = *Zc2CommDelay;
 800722e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
  pHandle->DemagParams.DemagMinimumSpeedUnit = bemfAdcDemagConfig->DemagMinimumSpeedUnit;
 8007232:	f8a0 20f4 	strh.w	r2, [r0, #244]	@ 0xf4
}
 8007236:	4770      	bx	lr

08007238 <BADC_SetBemfOnTimeSensorlessParam>:
  * @param  OnSensingEnThres: Minimum dudty cycle for on-sensing activation
  * @param  OnSensingDisThres: Minimum duty cycle for on-sensing Deactivationg
  */
void BADC_SetBemfOnTimeSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfOnAdcConfig, uint16_t *OnSensingEnThres,
                                   uint16_t *OnSensingDisThres)
{  
 8007238:	b410      	push	{r4}
  pHandle->Pwm_ON.AdcThresholdUp = BemfOnAdcConfig->AdcThresholdUp;
  pHandle->Pwm_ON.AdcThresholdDown = BemfOnAdcConfig->AdcThresholdDown;
 800723a:	680c      	ldr	r4, [r1, #0]
 800723c:	6284      	str	r4, [r0, #40]	@ 0x28
  pHandle->Pwm_ON.SamplingPoint = BemfOnAdcConfig->SamplingPoint;
 800723e:	8889      	ldrh	r1, [r1, #4]
 8007240:	8581      	strh	r1, [r0, #44]	@ 0x2c
  pHandle->OnSensingEnThres = *OnSensingEnThres;
 8007242:	8812      	ldrh	r2, [r2, #0]
 8007244:	8782      	strh	r2, [r0, #60]	@ 0x3c
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 8007246:	881b      	ldrh	r3, [r3, #0]
}
 8007248:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 800724c:	87c3      	strh	r3, [r0, #62]	@ 0x3e
}
 800724e:	4770      	bx	lr

08007250 <BADC_GetBemfSensorlessParam>:
  */
void BADC_GetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *Zc2CommDelay,
                                   Bemf_Demag_Params *BemfAdcDemagConfig)         
{  
  BemfAdcConfig->AdcThresholdUp = pHandle->Pwm_OFF.AdcThresholdUp;
  BemfAdcConfig->AdcThresholdDown = pHandle->Pwm_OFF.AdcThresholdDown;
 8007250:	f8d0 c02e 	ldr.w	ip, [r0, #46]	@ 0x2e
 8007254:	f8c1 c000 	str.w	ip, [r1]
  BemfAdcConfig->SamplingPoint = pHandle->Pwm_OFF.SamplingPoint;
 8007258:	f8b0 c032 	ldrh.w	ip, [r0, #50]	@ 0x32
 800725c:	f8a1 c004 	strh.w	ip, [r1, #4]
  *Zc2CommDelay = pHandle->Zc2CommDelay;
 8007260:	f8b0 1040 	ldrh.w	r1, [r0, #64]	@ 0x40
 8007264:	8011      	strh	r1, [r2, #0]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007266:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	@ 0xf4
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800726a:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	@ 0xfa
 800726e:	80da      	strh	r2, [r3, #6]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007270:	8019      	strh	r1, [r3, #0]
}
 8007272:	4770      	bx	lr

08007274 <BADC_GetBemfOnTimeSensorlessParam>:
  * @param  OnSensingEnThres: Minimum duty cycle for on-sensing activation
  * @param  OnSensingDisThres: Minimum duty cycle for on-sensing Deactivationg
  */
void BADC_GetBemfOnTimeSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfOnAdcConfig, uint16_t *OnSensingEnThres,
                                   uint16_t *OnSensingDisThres)
{  
 8007274:	b410      	push	{r4}
  BemfOnAdcConfig->AdcThresholdUp = pHandle->Pwm_ON.AdcThresholdUp;
  BemfOnAdcConfig->AdcThresholdDown = pHandle->Pwm_ON.AdcThresholdDown;
 8007276:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007278:	600c      	str	r4, [r1, #0]
  BemfOnAdcConfig->SamplingPoint = pHandle->Pwm_ON.SamplingPoint;
 800727a:	f8b0 c02c 	ldrh.w	ip, [r0, #44]	@ 0x2c
 800727e:	f8a1 c004 	strh.w	ip, [r1, #4]
  *OnSensingEnThres = pHandle->OnSensingEnThres;
 8007282:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 8007284:	8011      	strh	r1, [r2, #0]
  *OnSensingDisThres = pHandle->OnSensingDisThres;
 8007286:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
}
 8007288:	f85d 4b04 	ldr.w	r4, [sp], #4
  *OnSensingDisThres = pHandle->OnSensingDisThres;
 800728c:	801a      	strh	r2, [r3, #0]
}
 800728e:	4770      	bx	lr

08007290 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007292:	7fc3      	ldrb	r3, [r0, #31]
 8007294:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8007298:	429a      	cmp	r2, r3
{
 800729a:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800729c:	d002      	beq.n	80072a4 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800729e:	3301      	adds	r3, #1
 80072a0:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80072a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 80072a4:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 80072aa:	b1a5      	cbz	r5, 80072d6 <MCPA_dataLog+0x46>
 80072ac:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80072ae:	8ba2      	ldrh	r2, [r4, #28]
 80072b0:	42aa      	cmp	r2, r5
 80072b2:	d24e      	bcs.n	8007352 <MCPA_dataLog+0xc2>
 80072b4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80072b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80072ba:	d066      	beq.n	800738a <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80072bc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80072c0:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 80072c2:	8b22      	ldrh	r2, [r4, #24]
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	3202      	adds	r2, #2
 80072c8:	2309      	movs	r3, #9
 80072ca:	6845      	ldr	r5, [r0, #4]
 80072cc:	b292      	uxth	r2, r2
 80072ce:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	8323      	strh	r3, [r4, #24]
}
 80072d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80072d6:	4601      	mov	r1, r0
 80072d8:	2209      	movs	r2, #9
 80072da:	f851 0b14 	ldr.w	r0, [r1], #20
 80072de:	6803      	ldr	r3, [r0, #0]
 80072e0:	4798      	blx	r3
 80072e2:	b390      	cbz	r0, 800734a <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80072e4:	4b49      	ldr	r3, [pc, #292]	@ (800740c <MCPA_dataLog+0x17c>)
 80072e6:	6961      	ldr	r1, [r4, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80072ec:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80072f0:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 80072f4:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80072f8:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80072fa:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 80072fc:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80072fe:	d101      	bne.n	8007304 <MCPA_dataLog+0x74>
 8007300:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007302:	e7d4      	b.n	80072ae <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007304:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007308:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 800730c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007310:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007314:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007318:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 800731c:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800731e:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8007320:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007324:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007326:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800732a:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800732c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007330:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007334:	f001 f8ea 	bl	800850c <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8007338:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800733c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8007340:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8007344:	441a      	add	r2, r3
 8007346:	f001 f8e1 	bl	800850c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800734a:	8b25      	ldrh	r5, [r4, #24]
 800734c:	2d00      	cmp	r5, #0
 800734e:	d1ad      	bne.n	80072ac <MCPA_dataLog+0x1c>
}
 8007350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007352:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007356:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007358:	b36e      	cbz	r6, 80073b6 <MCPA_dataLog+0x126>
 800735a:	68a2      	ldr	r2, [r4, #8]
 800735c:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8007360:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8007362:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007366:	8800      	ldrh	r0, [r0, #0]
 8007368:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800736c:	8b25      	ldrh	r5, [r4, #24]
 800736e:	3502      	adds	r5, #2
 8007370:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007372:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007374:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007376:	d1f4      	bne.n	8007362 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8007378:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800737c:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800737e:	2bfd      	cmp	r3, #253	@ 0xfd
 8007380:	4618      	mov	r0, r3
 8007382:	d91d      	bls.n	80073c0 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007384:	4295      	cmp	r5, r2
 8007386:	d897      	bhi.n	80072b8 <MCPA_dataLog+0x28>
}
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800738a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800738e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8007392:	4418      	add	r0, r3
 8007394:	4298      	cmp	r0, r3
 8007396:	dd91      	ble.n	80072bc <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007398:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800739a:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800739c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073a4:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80073a6:	5cf3      	ldrb	r3, [r6, r3]
 80073a8:	442b      	add	r3, r5
 80073aa:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073ac:	b2d3      	uxtb	r3, r2
 80073ae:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80073b0:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073b2:	dbf3      	blt.n	800739c <MCPA_dataLog+0x10c>
 80073b4:	e782      	b.n	80072bc <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 80073b6:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 80073ba:	28fd      	cmp	r0, #253	@ 0xfd
 80073bc:	f63f af71 	bhi.w	80072a2 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 80073c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d006      	beq.n	80073d6 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 80073c8:	3301      	adds	r3, #1
 80073ca:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80073ce:	4295      	cmp	r5, r2
 80073d0:	f63f af74 	bhi.w	80072bc <MCPA_dataLog+0x2c>
}
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073d6:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80073da:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80073dc:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073de:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80073e0:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073e4:	ddf3      	ble.n	80073ce <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80073e6:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80073ea:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80073ee:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80073f6:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073fa:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80073fc:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80073fe:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007400:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007402:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007404:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007406:	dbf2      	blt.n	80073ee <MCPA_dataLog+0x15e>
 8007408:	e7e1      	b.n	80073ce <MCPA_dataLog+0x13e>
 800740a:	bf00      	nop
 800740c:	2000187c 	.word	0x2000187c

08007410 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8007410:	8b03      	ldrh	r3, [r0, #24]
 8007412:	b19b      	cbz	r3, 800743c <MCPA_flushDataLog+0x2c>
{
 8007414:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8007416:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800741a:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800741c:	2afe      	cmp	r2, #254	@ 0xfe
 800741e:	4604      	mov	r4, r0
 8007420:	d00d      	beq.n	800743e <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007422:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8007426:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8007428:	8b22      	ldrh	r2, [r4, #24]
 800742a:	6820      	ldr	r0, [r4, #0]
 800742c:	3202      	adds	r2, #2
 800742e:	2309      	movs	r3, #9
 8007430:	6845      	ldr	r5, [r0, #4]
 8007432:	b292      	uxth	r2, r2
 8007434:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800743e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8007442:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8007446:	4494      	add	ip, r2
 8007448:	4562      	cmp	r2, ip
 800744a:	daea      	bge.n	8007422 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800744c:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800744e:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007450:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8007454:	6800      	ldr	r0, [r0, #0]
 8007456:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007458:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800745a:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800745c:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800745e:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007460:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007462:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007464:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007466:	dbf3      	blt.n	8007450 <MCPA_flushDataLog+0x40>
 8007468:	e7db      	b.n	8007422 <MCPA_flushDataLog+0x12>
 800746a:	bf00      	nop

0800746c <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007470:	880f      	ldrh	r7, [r1, #0]
{
 8007472:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8007474:	2f00      	cmp	r7, #0
 8007476:	d046      	beq.n	8007506 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8007478:	6803      	ldr	r3, [r0, #0]
 800747a:	89db      	ldrh	r3, [r3, #14]
 800747c:	42bb      	cmp	r3, r7
 800747e:	d33f      	bcc.n	8007500 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007480:	788b      	ldrb	r3, [r1, #2]
 8007482:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8007486:	f891 8003 	ldrb.w	r8, [r1, #3]
 800748a:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800748e:	790b      	ldrb	r3, [r1, #4]
 8007490:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007494:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8007496:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007498:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800749c:	4443      	add	r3, r8
 800749e:	4293      	cmp	r3, r2
 80074a0:	dc57      	bgt.n	8007552 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 80074a2:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d057      	beq.n	8007558 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 80074a8:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074ac:	4645      	mov	r5, r8
 80074ae:	e011      	b.n	80074d4 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80074b0:	68e3      	ldr	r3, [r4, #12]
 80074b2:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 80074b4:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074b6:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80074ba:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 80074be:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074c0:	f105 0c01 	add.w	ip, r5, #1
 80074c4:	fa5f f58c 	uxtb.w	r5, ip
 80074c8:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 80074ca:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074cc:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 80074ce:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80074d2:	da11      	bge.n	80074f8 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80074d4:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80074d8:	6861      	ldr	r1, [r4, #4]
 80074da:	4648      	mov	r0, r9
 80074dc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80074e0:	f7fb fdaa 	bl	8003038 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80074e4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	f04f 0002 	mov.w	r0, #2
 80074ee:	d8df      	bhi.n	80074b0 <MCPA_cfgLog+0x44>
 80074f0:	4648      	mov	r0, r9
 80074f2:	f7fb fd95 	bl	8003020 <RI_GetIDSize>
 80074f6:	e7db      	b.n	80074b0 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80074f8:	f108 0206 	add.w	r2, r8, #6
 80074fc:	4297      	cmp	r7, r2
 80074fe:	d210      	bcs.n	8007522 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8007500:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8007502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8007506:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8007508:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 800750c:	b9ab      	cbnz	r3, 800753a <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8007512:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8007516:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8007518:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 800751c:	2000      	movs	r0, #0
}
 800751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8007522:	3f02      	subs	r7, #2
 8007524:	eba7 0708 	sub.w	r7, r7, r8
 8007528:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 800752a:	7833      	ldrb	r3, [r6, #0]
 800752c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f3      	bne.n	800751c <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8007534:	8b23      	ldrh	r3, [r4, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0e9      	beq.n	800750e <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800753a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800753c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8007540:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8007542:	8b22      	ldrh	r2, [r4, #24]
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	3202      	adds	r2, #2
 8007548:	6845      	ldr	r5, [r0, #4]
 800754a:	b292      	uxth	r2, r2
 800754c:	2309      	movs	r3, #9
 800754e:	47a8      	blx	r5
 8007550:	e7dd      	b.n	800750e <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8007552:	200a      	movs	r0, #10
}
 8007554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007558:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800755a:	4698      	mov	r8, r3
 800755c:	e7ce      	b.n	80074fc <MCPA_cfgLog+0x90>
 800755e:	bf00      	nop

08007560 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8007560:	8843      	ldrh	r3, [r0, #2]
 8007562:	8982      	ldrh	r2, [r0, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d306      	bcc.n	8007576 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8007568:	89c2      	ldrh	r2, [r0, #14]
 800756a:	429a      	cmp	r2, r3
 800756c:	d901      	bls.n	8007572 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 800756e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8007570:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8007572:	8900      	ldrh	r0, [r0, #8]
 8007574:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8007576:	2008      	movs	r0, #8
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8007584:	7802      	ldrb	r2, [r0, #0]
{
 8007586:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8007588:	b122      	cbz	r2, 8007594 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800758a:	8882      	ldrh	r2, [r0, #4]
 800758c:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800758e:	2100      	movs	r1, #0
 8007590:	8101      	strh	r1, [r0, #8]
}
 8007592:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8007594:	f7ff fff2 	bl	800757c <NTC_Clear>
}
 8007598:	bd08      	pop	{r3, pc}
 800759a:	bf00      	nop

0800759c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 800759c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800759e:	7803      	ldrb	r3, [r0, #0]
{
 80075a0:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80075a2:	b983      	cbnz	r3, 80075c6 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 80075a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075a8:	4299      	cmp	r1, r3
 80075aa:	d007      	beq.n	80075bc <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80075ac:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80075ae:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80075b0:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 80075b2:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80075b6:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80075ba:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80075bc:	4620      	mov	r0, r4
 80075be:	f7ff ffcf 	bl	8007560 <NTC_SetFaultState>
 80075c2:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80075c8:	8120      	strh	r0, [r4, #8]
}
 80075ca:	bd10      	pop	{r4, pc}

080075cc <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80075cc:	7803      	ldrb	r3, [r0, #0]
 80075ce:	b95b      	cbnz	r3, 80075e8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80075d0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80075d2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80075d4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80075d8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80075da:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80075dc:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80075e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80075e4:	b200      	sxth	r0, r0
 80075e6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80075e8:	88c0      	ldrh	r0, [r0, #6]
}
 80075ea:	b200      	sxth	r0, r0
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop

080075f0 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80075f0:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80075f2:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80075f4:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80075f6:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80075f8:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80075fa:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80075fc:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80075fe:	4770      	bx	lr

08007600 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8007600:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007602:	4770      	bx	lr

08007604 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8007604:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007606:	4770      	bx	lr

08007608 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8007608:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop

08007610 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8007610:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop

08007618 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8007618:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800761a:	4770      	bx	lr

0800761c <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 800761c:	8b80      	ldrh	r0, [r0, #28]
 800761e:	4770      	bx	lr

08007620 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007620:	2301      	movs	r3, #1
 8007622:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8007624:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007626:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop

0800762c <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 800762c:	8b40      	ldrh	r0, [r0, #26]
 800762e:	4770      	bx	lr

08007630 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8007630:	8bc0      	ldrh	r0, [r0, #30]
 8007632:	4770      	bx	lr

08007634 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8007634:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007636:	4770      	bx	lr

08007638 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8007638:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800763a:	4770      	bx	lr

0800763c <PID_SetKIDivisorPOW2>:
{
 800763c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800763e:	2301      	movs	r3, #1
{
 8007640:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007642:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007644:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8007648:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800764a:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800764c:	8343      	strh	r3, [r0, #26]
{
 800764e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007650:	f7ff fff2 	bl	8007638 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8007654:	4902      	ldr	r1, [pc, #8]	@ (8007660 <PID_SetKIDivisorPOW2+0x24>)
 8007656:	4628      	mov	r0, r5
 8007658:	40a1      	lsls	r1, r4
 800765a:	f7ff ffeb 	bl	8007634 <PID_SetLowerIntegralTermLimit>
}
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	ffff8001 	.word	0xffff8001

08007664 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8007664:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007666:	4770      	bx	lr

08007668 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007668:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007670:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8007672:	4770      	bx	lr

08007674 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007674:	2301      	movs	r3, #1
 8007676:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007678:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800767a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007680:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8007684:	4603      	mov	r3, r0
 8007686:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007688:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800768c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007690:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007694:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8007698:	b17c      	cbz	r4, 80076ba <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800769a:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800769e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 80076a2:	eb15 0e01 	adds.w	lr, r5, r1
 80076a6:	d41d      	bmi.n	80076e4 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 80076a8:	420d      	tst	r5, r1
 80076aa:	4914      	ldr	r1, [pc, #80]	@ (80076fc <PI_Controller+0x7c>)
 80076ac:	bf48      	it	mi
 80076ae:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80076b0:	45a6      	cmp	lr, r4
 80076b2:	dc02      	bgt.n	80076ba <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80076b4:	691c      	ldr	r4, [r3, #16]
 80076b6:	4574      	cmp	r4, lr
 80076b8:	dd1d      	ble.n	80076f6 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80076ba:	8b99      	ldrh	r1, [r3, #28]
 80076bc:	410a      	asrs	r2, r1
 80076be:	8bd9      	ldrh	r1, [r3, #30]
 80076c0:	fa44 f101 	asr.w	r1, r4, r1
 80076c4:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80076c6:	4290      	cmp	r0, r2
 80076c8:	da03      	bge.n	80076d2 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80076ca:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80076cc:	4414      	add	r4, r2
 80076ce:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80076d0:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80076d2:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80076d4:	bfc5      	ittet	gt
 80076d6:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80076da:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80076dc:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80076de:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80076e0:	609c      	str	r4, [r3, #8]
}
 80076e2:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	dde3      	ble.n	80076b0 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80076e8:	2900      	cmp	r1, #0
 80076ea:	dde1      	ble.n	80076b0 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80076ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076f0:	428c      	cmp	r4, r1
 80076f2:	d1e2      	bne.n	80076ba <PI_Controller+0x3a>
 80076f4:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80076f6:	4674      	mov	r4, lr
 80076f8:	e7df      	b.n	80076ba <PI_Controller+0x3a>
 80076fa:	bf00      	nop
 80076fc:	80000001 	.word	0x80000001

08007700 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8007700:	6803      	ldr	r3, [r0, #0]
 8007702:	4718      	bx	r3

08007704 <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 8007704:	6843      	ldr	r3, [r0, #4]
 8007706:	4718      	bx	r3

08007708 <PWMC_SetADCTriggerChannel>:
  * @param  pHandle Handle on the target instance of the PWMC component
  * @param  SamplingPoint pulse value of the timer channel used for ADC triggering
  */
__weak void PWMC_SetADCTriggerChannel( PWMC_Handle_t * pHandle, uint16_t SamplingPoint )
{
  pHandle->pFctSetADCTriggerChannel( pHandle, SamplingPoint );
 8007708:	6883      	ldr	r3, [r0, #8]
 800770a:	4718      	bx	r3

0800770c <PWMC_SetAlignFlag>:
* @param  flag to be applied in uint8_t, 1: motor is in align stage, 2: motor is not in align stage
* @retval none
*/
void PWMC_SetAlignFlag(PWMC_Handle_t *pHandle, int16_t flag)
{
  pHandle->AlignFlag = flag;
 800770c:	8541      	strh	r1, [r0, #42]	@ 0x2a
}
 800770e:	4770      	bx	lr

08007710 <PWMC_ForceFastDemagTime>:
  * @param  uint16_t: period where the fast demagnetization is applied
  * @retval none
  */
void PWMC_ForceFastDemagTime(PWMC_Handle_t * pHandle, uint16_t constFastDemagTime )
{
  pHandle->DemagCounterThreshold = constFastDemagTime;
 8007710:	85c1      	strh	r1, [r0, #46]	@ 0x2e
}
 8007712:	4770      	bx	lr

08007714 <PWMC_SetFastDemagState>:
  {
    pHandle->ModUpdateReq = ENABLE_FAST_DEMAG;
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_FAST_DEMAG;
 8007714:	2901      	cmp	r1, #1
 8007716:	bf18      	it	ne
 8007718:	2102      	movne	r1, #2
 800771a:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
  }    
}
 800771e:	4770      	bx	lr

08007720 <PWMC_SetQuasiSynchState>:
  */
void PWMC_SetQuasiSynchState(PWMC_Handle_t * pHandle, uint8_t State )
{
  if (State == 1)
  {
    pHandle->ModUpdateReq = ENABLE_QUASI_SYNCH;
 8007720:	2901      	cmp	r1, #1
 8007722:	bf14      	ite	ne
 8007724:	2304      	movne	r3, #4
 8007726:	2303      	moveq	r3, #3
 8007728:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_QUASI_SYNCH;
  }    
}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop

08007730 <PWMC_GetFastDemagState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetFastDemagState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetFastDemagFlag) ? 0 : pHandle->pGetFastDemagFlag(pHandle));  
 8007730:	6943      	ldr	r3, [r0, #20]
 8007732:	b103      	cbz	r3, 8007736 <PWMC_GetFastDemagState+0x6>
 8007734:	4718      	bx	r3
}
 8007736:	4618      	mov	r0, r3
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop

0800773c <PWMC_GetQuasiSynchState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetQuasiSynchState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetQuasiSynchFlag) ? 0 : pHandle->pGetQuasiSynchFlag(pHandle));
 800773c:	6983      	ldr	r3, [r0, #24]
 800773e:	b103      	cbz	r3, 8007742 <PWMC_GetQuasiSynchState+0x6>
 8007740:	4718      	bx	r3
}
 8007742:	4618      	mov	r0, r3
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop

08007748 <PWMC_ElAngleToStep>:
 * @retval calculated step
 */
__weak uint8_t  PWMC_ElAngleToStep( PWMC_Handle_t * pHandle )
{
  uint8_t Step;
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 8007748:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 800774a:	f5a2 53aa 	sub.w	r3, r2, #5440	@ 0x1540
 800774e:	3b15      	subs	r3, #21
 8007750:	f642 21a9 	movw	r1, #10921	@ 0x2aa9
 8007754:	b29b      	uxth	r3, r3
 8007756:	428b      	cmp	r3, r1
 8007758:	d909      	bls.n	800776e <PWMC_ElAngleToStep+0x26>
  else if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_2;
 800775a:	f5a2 537f 	sub.w	r3, r2, #16320	@ 0x3fc0
 800775e:	3b3f      	subs	r3, #63	@ 0x3f
 8007760:	b29b      	uxth	r3, r3
 8007762:	f642 20aa 	movw	r0, #10922	@ 0x2aaa
 8007766:	4283      	cmp	r3, r0
 8007768:	d803      	bhi.n	8007772 <PWMC_ElAngleToStep+0x2a>
 800776a:	2001      	movs	r0, #1
 800776c:	4770      	bx	lr
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 800776e:	2000      	movs	r0, #0
 8007770:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 8007772:	f502 43d5 	add.w	r3, r2, #27264	@ 0x6a80
 8007776:	332a      	adds	r3, #42	@ 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	f24d 5c53 	movw	ip, #54611	@ 0xd553
 800777e:	4563      	cmp	r3, ip
 8007780:	d80a      	bhi.n	8007798 <PWMC_ElAngleToStep+0x50>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 8007782:	4283      	cmp	r3, r0
 8007784:	d90a      	bls.n	800779c <PWMC_ElAngleToStep+0x54>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
 8007786:	f502 527f 	add.w	r2, r2, #16320	@ 0x3fc0
 800778a:	323f      	adds	r2, #63	@ 0x3f
 800778c:	b292      	uxth	r2, r2
 800778e:	428a      	cmp	r2, r1
 8007790:	bf8c      	ite	hi
 8007792:	2005      	movhi	r0, #5
 8007794:	2004      	movls	r0, #4
 8007796:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 8007798:	2002      	movs	r0, #2
 800779a:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 800779c:	2003      	movs	r0, #3
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT / 2))) Step = STEP_6;
  else {}
  return Step;
}
 800779e:	4770      	bx	lr

080077a0 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80077a0:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80077a2:	f890 0033 	ldrb.w	r0, [r0, #51]	@ 0x33
 80077a6:	b1a8      	cbz	r0, 80077d4 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80077ae:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80077b0:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80077b2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80077b6:	b11a      	cbz	r2, 80077c0 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    retVal |= MC_OVER_CURR;
 80077be:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80077c0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80077c4:	b12a      	cbz	r2, 80077d2 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80077c6:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 80077ca:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80077cc:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80077d2:	4770      	bx	lr
 80077d4:	2140      	movs	r1, #64	@ 0x40
 80077d6:	e7ec      	b.n	80077b2 <PWMC_IsFaultOccurred+0x12>

080077d8 <ThreePwm_Init>:
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80077d8:	4919      	ldr	r1, [pc, #100]	@ (8007840 <ThreePwm_Init+0x68>)
  * @brief  It initializes TIMx and NVIC
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void ThreePwm_Init( PWMC_ThreePwm_Handle_t * pHandle )
{
 80077da:	b410      	push	{r4}
 80077dc:	680a      	ldr	r2, [r1, #0]
    LL_RCC_HSE_EnableCSS();

    /* Peripheral clocks enabling END ----------------------------------------*/

    /* Clear TIMx break flag. */
    LL_TIM_ClearFlag_BRK( pHandle->pParams_str->TIMx );
 80077de:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80077e0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	600a      	str	r2, [r1, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80077e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80077ec:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80077ee:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80077f0:	f06f 0101 	mvn.w	r1, #1
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80077f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077f8:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80077fa:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007802:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007806:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	f442 7288 	orr.w	r2, r2, #272	@ 0x110
    LL_TIM_CC_EnableChannel( pHandle->pParams_str->TIMx, TIMxCCER_MASK_CH123 );

	/* Clear the flags */
    pHandle->_Super.OverVoltageFlag = false;
    pHandle->_Super.OverCurrentFlag = false;
    pHandle->_Super.driverProtectionFlag = false;
 800780e:	2100      	movs	r1, #0
 8007810:	f042 0201 	orr.w	r2, r2, #1
 8007814:	621a      	str	r2, [r3, #32]
    pHandle->FastDemagUpdated = true;
    pHandle->_Super.hElAngle = 0;
 8007816:	6301      	str	r1, [r0, #48]	@ 0x30
    pHandle->FastDemagUpdated = true;
 8007818:	2201      	movs	r2, #1
    LL_TIM_EnableCounter( pHandle->pParams_str->TIMx );
    if (pHandle->pParams_str->OCPolarity == LL_TIM_OCPOLARITY_HIGH)
 800781a:	68a4      	ldr	r4, [r4, #8]
    pHandle->FastDemagUpdated = true;
 800781c:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007820:	681a      	ldr	r2, [r3, #0]
    pHandle->_Super.driverProtectionFlag = false;
 8007822:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]
    if (pHandle->pParams_str->OCPolarity == LL_TIM_OCPOLARITY_HIGH)
 800782c:	b924      	cbnz	r4, 8007838 <ThreePwm_Init+0x60>
    {
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_LOW;
 800782e:	2302      	movs	r3, #2
    else
    {
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_HIGH;
    }
  }
}
 8007830:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_LOW;
 8007834:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
 8007836:	4770      	bx	lr
 8007838:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800783c:	63c1      	str	r1, [r0, #60]	@ 0x3c
}
 800783e:	4770      	bx	lr
 8007840:	40021000 	.word	0x40021000

08007844 <PWMC_SetPhaseVoltage>:
* @param  new duty cycle value.
* @retval none
*/
__weak void PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, uint16_t DutyCycle )
{
  pHandle->CntPh = DutyCycle;
 8007844:	8381      	strh	r1, [r0, #28]
}
 8007846:	4770      	bx	lr

08007848 <ThreePwm_ApplyNextStep>:
*/
__weak bool ThreePwm_ApplyNextStep( PWMC_ThreePwm_Handle_t * pHandle )
{
  bool retVal = false;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
  if (pHandle->_Super.Step != pHandle->_Super.NextStep)
 8007848:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
 800784c:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8007850:	428a      	cmp	r2, r1
 8007852:	d010      	beq.n	8007876 <ThreePwm_ApplyNextStep+0x2e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007854:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8007856:	6812      	ldr	r2, [r2, #0]
{
 8007858:	b410      	push	{r4}
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800785a:	6954      	ldr	r4, [r2, #20]
 800785c:	f044 0420 	orr.w	r4, r4, #32
 8007860:	6154      	str	r4, [r2, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007862:	6954      	ldr	r4, [r2, #20]
 8007864:	4603      	mov	r3, r0
  {
    LL_TIM_GenerateEvent_COM( TIMx );
    LL_TIM_GenerateEvent_UPDATE( TIMx );
    pHandle->_Super.Step = pHandle->_Super.NextStep;
    retVal = true;
 8007866:	2001      	movs	r0, #1
 8007868:	4304      	orrs	r4, r0
 800786a:	6154      	str	r4, [r2, #20]
    pHandle->_Super.Step = pHandle->_Super.NextStep;
 800786c:	f883 102d 	strb.w	r1, [r3, #45]	@ 0x2d
  }
  return retVal;
}
 8007870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007874:	4770      	bx	lr
  bool retVal = false;
 8007876:	2000      	movs	r0, #0
}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop

0800787c <ThreePwm_IsFastDemagUpdated>:
* @retval bool FastDemag configuration has been updated
*/
__weak bool ThreePwm_IsFastDemagUpdated( PWMC_ThreePwm_Handle_t * pHandle )
{
  return (pHandle->FastDemagUpdated);
}
 800787c:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop

08007884 <ThreePwm_ResetOCPolarity>:
* @param  pHandle Pointer on the target component instance.
* @retval none
*/
__weak void ThreePwm_ResetOCPolarity( PWMC_ThreePwm_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007884:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8007886:	6813      	ldr	r3, [r2, #0]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH1, pHandle->pParams_str->OCPolarity);
 8007888:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	f022 0202 	bic.w	r2, r2, #2
 8007890:	430a      	orrs	r2, r1
 8007892:	621a      	str	r2, [r3, #32]
 8007894:	6a1a      	ldr	r2, [r3, #32]
 8007896:	f022 0220 	bic.w	r2, r2, #32
 800789a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800789e:	621a      	str	r2, [r3, #32]
 80078a0:	6a1a      	ldr	r2, [r3, #32]
 80078a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80078a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80078aa:	621a      	str	r2, [r3, #32]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH2, pHandle->pParams_str->OCPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH3, pHandle->pParams_str->OCPolarity);
}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <ThreePwm_LoadNextStep>:
{
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80078b2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
{
 80078b4:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80078b6:	681d      	ldr	r5, [r3, #0]
{
 80078b8:	460e      	mov	r6, r1
  pHandle->_Super.NextStep = PWMC_ElAngleToStep(&(pHandle->_Super));
 80078ba:	f7ff ff45 	bl	8007748 <PWMC_ElAngleToStep>
  if (pHandle->_Super.Step != pHandle->_Super.NextStep) 
 80078be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
  pHandle->_Super.NextStep = PWMC_ElAngleToStep(&(pHandle->_Super));
 80078c2:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
  if (pHandle->_Super.Step != pHandle->_Super.NextStep) 
 80078c6:	4283      	cmp	r3, r0
 80078c8:	d008      	beq.n	80078dc <ThreePwm_LoadNextStep+0x2c>
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 80078ca:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
    pHandle->DemagCounter = 0;
 80078ce:	2700      	movs	r7, #0
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 80078d0:	2b01      	cmp	r3, #1
    pHandle->DemagCounter = 0;
 80078d2:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 80078d6:	d01d      	beq.n	8007914 <ThreePwm_LoadNextStep+0x64>
    if (pHandle->_Super.ModUpdateReq == DISABLE_FAST_DEMAG) 
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d051      	beq.n	8007980 <ThreePwm_LoadNextStep+0xd0>
  if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold)))
 80078dc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80078e0:	b9e3      	cbnz	r3, 800791c <ThreePwm_LoadNextStep+0x6c>
  else if ( pHandle->_Super.AlignFlag == 1 )
 80078e2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	@ 0x2a
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d031      	beq.n	800794e <ThreePwm_LoadNextStep+0x9e>
  else if ( pHandle->_Super.AlignFlag == -1 )
 80078ea:	3301      	adds	r3, #1
 80078ec:	f000 8086 	beq.w	80079fc <ThreePwm_LoadNextStep+0x14c>
    if (pHandle->DemagCounter >= pHandle->_Super.DemagCounterThreshold )
 80078f0:	f8b4 2044 	ldrh.w	r2, [r4, #68]	@ 0x44
 80078f4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80078f6:	429a      	cmp	r2, r3
 80078f8:	f080 8094 	bcs.w	8007a24 <ThreePwm_LoadNextStep+0x174>
    switch ( pHandle->_Super.NextStep )
 80078fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007900:	2b05      	cmp	r3, #5
 8007902:	d83c      	bhi.n	800797e <ThreePwm_LoadNextStep+0xce>
 8007904:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007908:	00a900d8 	.word	0x00a900d8
 800790c:	00bd00b4 	.word	0x00bd00b4
 8007910:	009900cd 	.word	0x009900cd
      pHandle->FastDemag = true;
 8007914:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007918:	f884 7037 	strb.w	r7, [r4, #55]	@ 0x37
  if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold)))
 800791c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	@ 0x44
 8007920:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007922:	429a      	cmp	r2, r3
 8007924:	d2dd      	bcs.n	80078e2 <ThreePwm_LoadNextStep+0x32>
      CCWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 8007926:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
      CWFastDemagPulse = pHandle->_Super.CntPh;
 8007928:	8ba7      	ldrh	r7, [r4, #28]
      CCWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 800792a:	6899      	ldr	r1, [r3, #8]
    pHandle->FastDemagUpdated = false;
 800792c:	2200      	movs	r2, #0
    if (Direction > 0)
 800792e:	4296      	cmp	r6, r2
    pHandle->FastDemagUpdated = false;
 8007930:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
      CWFastDemagPolarity = pHandle->NegOCPolarity;
 8007934:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
    if (Direction > 0)
 8007936:	dd33      	ble.n	80079a0 <ThreePwm_LoadNextStep+0xf0>
      CCWFastDemagPulse = 0;
 8007938:	4616      	mov	r6, r2
    switch ( pHandle->_Super.NextStep )
 800793a:	2805      	cmp	r0, #5
 800793c:	d81f      	bhi.n	800797e <ThreePwm_LoadNextStep+0xce>
 800793e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007942:	010f      	.short	0x010f
 8007944:	011f0130 	.word	0x011f0130
 8007948:	00c300dc 	.word	0x00c300dc
 800794c:	00f5      	.short	0x00f5
    switch ( pHandle->_Super.NextStep )
 800794e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007952:	2b05      	cmp	r3, #5
 8007954:	d813      	bhi.n	800797e <ThreePwm_LoadNextStep+0xce>
 8007956:	e8df f003 	tbb	[pc, r3]
 800795a:	434b      	.short	0x434b
 800795c:	0329323a 	.word	0x0329323a
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007960:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007962:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007964:	68d8      	ldr	r0, [r3, #12]
 8007966:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007968:	2200      	movs	r2, #0
 800796a:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800796c:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800796e:	63e9      	str	r1, [r5, #60]	@ 0x3c
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007970:	695a      	ldr	r2, [r3, #20]
 8007972:	8b19      	ldrh	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007974:	6184      	str	r4, [r0, #24]
 8007976:	6191      	str	r1, [r2, #24]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );  
 8007978:	69da      	ldr	r2, [r3, #28]
 800797a:	8c1b      	ldrh	r3, [r3, #32]
 800797c:	6193      	str	r3, [r2, #24]
}
 800797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ThreePwm_ResetOCPolarity(pHandle);
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff ff7f 	bl	8007884 <ThreePwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007986:	696b      	ldr	r3, [r5, #20]
 8007988:	f043 0320 	orr.w	r3, r3, #32
 800798c:	616b      	str	r3, [r5, #20]
  else if ( pHandle->_Super.AlignFlag == 1 )
 800798e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	@ 0x2a
      pHandle->FastDemag = false;
 8007992:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
  else if ( pHandle->_Super.AlignFlag == 1 )
 8007996:	2b01      	cmp	r3, #1
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007998:	f884 7037 	strb.w	r7, [r4, #55]	@ 0x37
  else if ( pHandle->_Super.AlignFlag == 1 )
 800799c:	d1a5      	bne.n	80078ea <ThreePwm_LoadNextStep+0x3a>
 800799e:	e7d6      	b.n	800794e <ThreePwm_LoadNextStep+0x9e>
    if (Direction > 0)
 80079a0:	46a4      	mov	ip, r4
      CCWFastDemagPulse = pHandle->_Super.CntPh;
 80079a2:	463e      	mov	r6, r7
      CWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 80079a4:	460c      	mov	r4, r1
      CWFastDemagPulse = 0;
 80079a6:	4617      	mov	r7, r2
      CCWFastDemagPolarity = pHandle->NegOCPolarity;
 80079a8:	4661      	mov	r1, ip
 80079aa:	e7c6      	b.n	800793a <ThreePwm_LoadNextStep+0x8a>
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80079ae:	8ba2      	ldrh	r2, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079b0:	68d8      	ldr	r0, [r3, #12]
 80079b2:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80079b4:	2100      	movs	r1, #0
 80079b6:	6369      	str	r1, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079b8:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80079ba:	63ea      	str	r2, [r5, #60]	@ 0x3c
 80079bc:	e7d8      	b.n	8007970 <ThreePwm_LoadNextStep+0xc0>
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80079c0:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079c2:	68d8      	ldr	r0, [r3, #12]
 80079c4:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80079c6:	2200      	movs	r2, #0
 80079c8:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079ca:	63a9      	str	r1, [r5, #56]	@ 0x38
 80079cc:	e7f5      	b.n	80079ba <ThreePwm_LoadNextStep+0x10a>
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079ce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80079d0:	8ba2      	ldrh	r2, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079d2:	68d8      	ldr	r0, [r3, #12]
 80079d4:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80079d6:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 80079d8:	2100      	movs	r1, #0
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079da:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80079dc:	63e9      	str	r1, [r5, #60]	@ 0x3c
 80079de:	e7c7      	b.n	8007970 <ThreePwm_LoadNextStep+0xc0>
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80079e2:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079e4:	68d8      	ldr	r0, [r3, #12]
 80079e6:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80079e8:	6369      	str	r1, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079ea:	2200      	movs	r2, #0
 80079ec:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80079ee:	e7e4      	b.n	80079ba <ThreePwm_LoadNextStep+0x10a>
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079f0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80079f2:	8ba2      	ldrh	r2, [r4, #28]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80079f4:	68d8      	ldr	r0, [r3, #12]
 80079f6:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079f8:	2100      	movs	r1, #0
 80079fa:	e7e5      	b.n	80079c8 <ThreePwm_LoadNextStep+0x118>
    switch ( pHandle->_Super.NextStep )
 80079fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d8bc      	bhi.n	800797e <ThreePwm_LoadNextStep+0xce>
 8007a04:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <ThreePwm_LoadNextStep+0x15c>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	080079cf 	.word	0x080079cf
 8007a14:	080079bf 	.word	0x080079bf
 8007a18:	080079ad 	.word	0x080079ad
 8007a1c:	08007961 	.word	0x08007961
 8007a20:	080079f1 	.word	0x080079f1
      pHandle->FastDemagUpdated = true;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
      ThreePwm_ResetOCPolarity(pHandle);
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f7ff ff2a 	bl	8007884 <ThreePwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007a30:	696b      	ldr	r3, [r5, #20]
 8007a32:	f043 0320 	orr.w	r3, r3, #32
 8007a36:	616b      	str	r3, [r5, #20]
}
 8007a38:	e760      	b.n	80078fc <ThreePwm_LoadNextStep+0x4c>
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a3a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007a3c:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a3e:	68d8      	ldr	r0, [r3, #12]
 8007a40:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a42:	2200      	movs	r2, #0
 8007a44:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a46:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a48:	63e9      	str	r1, [r5, #60]	@ 0x3c
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	8b19      	ldrh	r1, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007a4e:	6284      	str	r4, [r0, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007a50:	6191      	str	r1, [r2, #24]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	8c1b      	ldrh	r3, [r3, #32]
 8007a56:	6193      	str	r3, [r2, #24]
}
 8007a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a5a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007a5c:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a5e:	6958      	ldr	r0, [r3, #20]
 8007a60:	8b1c      	ldrh	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a62:	6369      	str	r1, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a64:	2200      	movs	r2, #0
 8007a66:	63aa      	str	r2, [r5, #56]	@ 0x38
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a68:	8a19      	ldrh	r1, [r3, #16]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a6a:	63ea      	str	r2, [r5, #60]	@ 0x3c
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	e7ee      	b.n	8007a4e <ThreePwm_LoadNextStep+0x19e>
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a70:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007a72:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a74:	68d8      	ldr	r0, [r3, #12]
 8007a76:	8a1c      	ldrh	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a78:	2200      	movs	r2, #0
 8007a7a:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a7c:	63a9      	str	r1, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a7e:	63ea      	str	r2, [r5, #60]	@ 0x3c
  WRITE_REG(GPIOx->BRR, PinMask);
 8007a80:	e7e3      	b.n	8007a4a <ThreePwm_LoadNextStep+0x19a>
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a82:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007a84:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a86:	69d8      	ldr	r0, [r3, #28]
 8007a88:	8c1c      	ldrh	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a8e:	63a9      	str	r1, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a90:	63ea      	str	r2, [r5, #60]	@ 0x3c
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	8a19      	ldrh	r1, [r3, #16]
 8007a96:	6284      	str	r4, [r0, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007a98:	6191      	str	r1, [r2, #24]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	8b1b      	ldrh	r3, [r3, #24]
 8007a9e:	6193      	str	r3, [r2, #24]
}
 8007aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007aa2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007aa4:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007aa6:	6958      	ldr	r0, [r3, #20]
 8007aa8:	8b1c      	ldrh	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007aae:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ab0:	63e9      	str	r1, [r5, #60]	@ 0x3c
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	8a19      	ldrh	r1, [r3, #16]
 8007ab6:	e7ca      	b.n	8007a4e <ThreePwm_LoadNextStep+0x19e>
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007ab8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007aba:	8ba1      	ldrh	r1, [r4, #28]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007abc:	69d8      	ldr	r0, [r3, #28]
 8007abe:	8c1c      	ldrh	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ac0:	6369      	str	r1, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ac6:	e7e3      	b.n	8007a90 <ThreePwm_LoadNextStep+0x1e0>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ac8:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007aca:	636f      	str	r7, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007acc:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ace:	63ee      	str	r6, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007ad0:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007ad2:	6958      	ldr	r0, [r3, #20]
 8007ad4:	f022 0202 	bic.w	r2, r2, #2
 8007ad8:	4322      	orrs	r2, r4
 8007ada:	622a      	str	r2, [r5, #32]
 8007adc:	6a2a      	ldr	r2, [r5, #32]
 8007ade:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007ae2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007ae6:	68d9      	ldr	r1, [r3, #12]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007ae8:	8b1c      	ldrh	r4, [r3, #24]
 8007aea:	622a      	str	r2, [r5, #32]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007aec:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007aee:	6284      	str	r4, [r0, #40]	@ 0x28
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007af0:	8a18      	ldrh	r0, [r3, #16]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007af2:	8c1b      	ldrh	r3, [r3, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007af4:	6188      	str	r0, [r1, #24]
 8007af6:	6193      	str	r3, [r2, #24]
}
 8007af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007afa:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007afc:	636e      	str	r6, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007afe:	63af      	str	r7, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b00:	63ea      	str	r2, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007b02:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b04:	69d8      	ldr	r0, [r3, #28]
 8007b06:	f022 0202 	bic.w	r2, r2, #2
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	622a      	str	r2, [r5, #32]
 8007b0e:	6a2a      	ldr	r2, [r5, #32]
 8007b10:	f022 0220 	bic.w	r2, r2, #32
 8007b14:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b18:	68d9      	ldr	r1, [r3, #12]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b1a:	8c1c      	ldrh	r4, [r3, #32]
 8007b1c:	622a      	str	r2, [r5, #32]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007b1e:	695a      	ldr	r2, [r3, #20]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007b20:	6284      	str	r4, [r0, #40]	@ 0x28
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b22:	8a18      	ldrh	r0, [r3, #16]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007b24:	8b1b      	ldrh	r3, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b26:	6188      	str	r0, [r1, #24]
 8007b28:	6193      	str	r3, [r2, #24]
}
 8007b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b30:	63ae      	str	r6, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b32:	63ef      	str	r7, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007b34:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b36:	68d8      	ldr	r0, [r3, #12]
 8007b38:	f022 0220 	bic.w	r2, r2, #32
 8007b3c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8007b40:	622a      	str	r2, [r5, #32]
 8007b42:	6a2a      	ldr	r2, [r5, #32]
 8007b44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007b48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007b4c:	6959      	ldr	r1, [r3, #20]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b4e:	8a1c      	ldrh	r4, [r3, #16]
 8007b50:	622a      	str	r2, [r5, #32]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b52:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007b54:	6284      	str	r4, [r0, #40]	@ 0x28
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007b56:	8b18      	ldrh	r0, [r3, #24]
        LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b58:	8c1b      	ldrh	r3, [r3, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b5a:	6188      	str	r0, [r1, #24]
 8007b5c:	6193      	str	r3, [r2, #24]
}
 8007b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b60:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b62:	636e      	str	r6, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b64:	63af      	str	r7, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b66:	63ea      	str	r2, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007b68:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b6a:	69d8      	ldr	r0, [r3, #28]
 8007b6c:	f022 0202 	bic.w	r2, r2, #2
 8007b70:	4322      	orrs	r2, r4
 8007b72:	622a      	str	r2, [r5, #32]
 8007b74:	6a2a      	ldr	r2, [r5, #32]
 8007b76:	f022 0220 	bic.w	r2, r2, #32
 8007b7a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007b7e:	e7cb      	b.n	8007b18 <ThreePwm_LoadNextStep+0x268>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b80:	2200      	movs	r2, #0
 8007b82:	636a      	str	r2, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b84:	63ae      	str	r6, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b86:	63ef      	str	r7, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007b88:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b8a:	68d8      	ldr	r0, [r3, #12]
 8007b8c:	f022 0220 	bic.w	r2, r2, #32
 8007b90:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007b94:	622a      	str	r2, [r5, #32]
 8007b96:	6a2a      	ldr	r2, [r5, #32]
 8007b98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007b9c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8007ba0:	e7d4      	b.n	8007b4c <ThreePwm_LoadNextStep+0x29c>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ba2:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ba4:	636f      	str	r7, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ba6:	63aa      	str	r2, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ba8:	63ee      	str	r6, [r5, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007baa:	6a2a      	ldr	r2, [r5, #32]
        LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007bac:	6958      	ldr	r0, [r3, #20]
 8007bae:	f022 0202 	bic.w	r2, r2, #2
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	622a      	str	r2, [r5, #32]
 8007bb6:	6a2a      	ldr	r2, [r5, #32]
 8007bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007bc0:	e791      	b.n	8007ae6 <ThreePwm_LoadNextStep+0x236>
 8007bc2:	bf00      	nop

08007bc4 <ThreePwm_TurnOnLowSides>:
#endif
  PWMC_ThreePwm_Handle_t * pHandle = ( PWMC_ThreePwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007bc4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
{
 8007bc6:	b538      	push	{r3, r4, r5, lr}

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007bc8:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007bca:	680c      	ldr	r4, [r1, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007bcc:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bd0:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007bd2:	f06f 0201 	mvn.w	r2, #1
 8007bd6:	6122      	str	r2, [r4, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bd8:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bda:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bdc:	63e3      	str	r3, [r4, #60]	@ 0x3c
{
 8007bde:	4605      	mov	r5, r0

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  ThreePwm_ResetOCPolarity( pHandle );
 8007be0:	f7ff fe50 	bl	8007884 <ThreePwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007be4:	6962      	ldr	r2, [r4, #20]
  LL_TIM_GenerateEvent_COM( TIMx );
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007be6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8007be8:	f042 0220 	orr.w	r2, r2, #32
 8007bec:	6162      	str	r2, [r4, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007bee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007bf0:	68d9      	ldr	r1, [r3, #12]
 8007bf2:	8a18      	ldrh	r0, [r3, #16]
 8007bf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bf8:	6462      	str	r2, [r4, #68]	@ 0x44
 8007bfa:	6188      	str	r0, [r1, #24]
  LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
  LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );  
 8007bfc:	69da      	ldr	r2, [r3, #28]
  LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007bfe:	6959      	ldr	r1, [r3, #20]
 8007c00:	8b18      	ldrh	r0, [r3, #24]
  LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );  
 8007c02:	8c1b      	ldrh	r3, [r3, #32]
 8007c04:	6188      	str	r0, [r1, #24]
 8007c06:	6193      	str	r3, [r2, #24]
}
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	bf00      	nop

08007c0c <ThreePwm_SwitchOnPWM>:
#endif
  PWMC_ThreePwm_Handle_t * pHandle = ( PWMC_ThreePwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c0c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
{
 8007c0e:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c10:	6814      	ldr	r4, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c12:	68e2      	ldr	r2, [r4, #12]

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  pHandle->DemagCounter = 0;
 8007c1e:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 8007c22:	60e2      	str	r2, [r4, #12]
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	6062      	str	r2, [r4, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
 8007c2c:	6862      	ldr	r2, [r4, #4]
 8007c2e:	f022 0204 	bic.w	r2, r2, #4
 8007c32:	6062      	str	r2, [r4, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c34:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c36:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c38:	63e3      	str	r3, [r4, #60]	@ 0x3c
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ca0 <ThreePwm_SwitchOnPWM+0x94>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c44:	61a3      	str	r3, [r4, #24]
 8007c46:	69a3      	ldr	r3, [r4, #24]
 8007c48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c4c:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
 8007c50:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8007c54:	61a3      	str	r3, [r4, #24]
 8007c56:	69e3      	ldr	r3, [r4, #28]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c5e:	61e3      	str	r3, [r4, #28]
{
 8007c60:	4605      	mov	r5, r0
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );		
  ThreePwm_ResetOCPolarity( pHandle );
 8007c62:	f7ff fe0f 	bl	8007884 <ThreePwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007c66:	6963      	ldr	r3, [r4, #20]
  LL_TIM_GenerateEvent_COM( TIMx );
	/* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
  LL_TIM_EnableAllOutputs(TIMx);
  if (true == pHandle->Oversampling )
 8007c68:	f895 2039 	ldrb.w	r2, [r5, #57]	@ 0x39
 8007c6c:	f043 0320 	orr.w	r3, r3, #32
 8007c70:	6163      	str	r3, [r4, #20]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007c72:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c78:	6463      	str	r3, [r4, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c80:	6463      	str	r3, [r4, #68]	@ 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  if (true == pHandle->Oversampling )
 8007c8c:	b11a      	cbz	r2, 8007c96 <ThreePwm_SwitchOnPWM+0x8a>
 8007c8e:	f043 0320 	orr.w	r3, r3, #32
 8007c92:	6063      	str	r3, [r4, #4]
  }
  else
  {
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
  }	 
}
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8007c9a:	6063      	str	r3, [r4, #4]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	fffeff8c 	.word	0xfffeff8c

08007ca4 <ThreePwm_SetADCTriggerChannel>:
#endif
	PWMC_ThreePwm_Handle_t * pHandle = ( PWMC_ThreePwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007ca4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007ca6:	681b      	ldr	r3, [r3, #0]

  pHandle->_Super.ADCTriggerCnt = SamplingPoint;
 8007ca8:	8401      	strh	r1, [r0, #32]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007caa:	6419      	str	r1, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, pHandle->_Super.ADCTriggerCnt);
}
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <ThreePwm_SwitchOffPWM>:
#endif
  PWMC_ThreePwm_Handle_t * pHandle = ( PWMC_ThreePwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cb0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
{
 8007cb2:	b4f0      	push	{r4, r5, r6, r7}
  return MC_NULL;
}

void ThreePwm_ResetEnablePins( PWMC_ThreePwm_Handle_t * pHandle )
{
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007cb4:	68d6      	ldr	r6, [r2, #12]
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007cb6:	6955      	ldr	r5, [r2, #20]
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007cb8:	69d4      	ldr	r4, [r2, #28]
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007cba:	8a17      	ldrh	r7, [r2, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cbc:	6813      	ldr	r3, [r2, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
  WRITE_REG(GPIOx->BRR, PinMask);
 8007cc4:	62b7      	str	r7, [r6, #40]	@ 0x28
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007cc6:	8b16      	ldrh	r6, [r2, #24]
  LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007cc8:	8c12      	ldrh	r2, [r2, #32]
 8007cca:	62ae      	str	r6, [r5, #40]	@ 0x28
 8007ccc:	62a2      	str	r2, [r4, #40]	@ 0x28
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cd6:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007cd8:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007cda:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007cdc:	68da      	ldr	r2, [r3, #12]
  pHandle->_Super.CntPh = 0;
 8007cde:	8381      	strh	r1, [r0, #28]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007cec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
}
 8007cf0:	bcf0      	pop	{r4, r5, r6, r7}
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop

08007cf8 <ThreePwm_BRK_IRQHandler>:
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
 8007cf8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007cfa:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.OverCurrentFlag = true;
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007d02:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d04:	f06f 0101 	mvn.w	r1, #1
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007d08:	400a      	ands	r2, r1
 8007d0a:	60da      	str	r2, [r3, #12]
}
 8007d0c:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d0e:	6119      	str	r1, [r3, #16]
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop

08007d14 <ThreePwm_FastDemagFlag>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif

  return (pHandle->FastDemag);
}
 8007d14:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <ThreePwm_UpdatePwmDemagCounter>:
  return (uint32_t)(READ_REG(TIMx->RCR));
 8007d1c:	4a06      	ldr	r2, [pc, #24]	@ (8007d38 <ThreePwm_UpdatePwmDemagCounter+0x1c>)
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void ThreePwm_UpdatePwmDemagCounter( PWMC_ThreePwm_Handle_t * pHandle )
{
  pHandle->DemagCounter += LL_TIM_GetRepetitionCounter(TIM1) + 1;
 8007d1e:	f8b0 c044 	ldrh.w	ip, [r0, #68]	@ 0x44
 8007d22:	6b13      	ldr	r3, [r2, #48]	@ 0x30
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007d24:	68d1      	ldr	r1, [r2, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	4463      	add	r3, ip
 8007d2a:	f041 0101 	orr.w	r1, r1, #1
 8007d2e:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 8007d32:	60d1      	str	r1, [r2, #12]
  LL_TIM_EnableIT_UPDATE(TIM1);
}
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40012c00 	.word	0x40012c00

08007d3c <ThreePwm_DisablePwmDemagCounter>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007d3c:	4a02      	ldr	r2, [pc, #8]	@ (8007d48 <ThreePwm_DisablePwmDemagCounter+0xc>)
 8007d3e:	68d3      	ldr	r3, [r2, #12]
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	60d3      	str	r3, [r2, #12]
  * @retval none
  */
__weak void ThreePwm_DisablePwmDemagCounter( PWMC_ThreePwm_Handle_t * pHandle )
{
  LL_TIM_DisableIT_UPDATE(TIM1);
}
 8007d46:	4770      	bx	lr
 8007d48:	40012c00 	.word	0x40012c00

08007d4c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8007d4c:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8007d50:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007d52:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8007d54:	4494      	add	ip, r2
 8007d56:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8007d5a:	b430      	push	{r4, r5}
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	f36c 050f 	bfi	r5, ip, #0, #16
 8007d62:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007d66:	b14b      	cbz	r3, 8007d7c <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8007d68:	6944      	ldr	r4, [r0, #20]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007d6e:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8007d70:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8007d74:	8941      	ldrh	r1, [r0, #10]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	4291      	cmp	r1, r2
 8007d7a:	d8f7      	bhi.n	8007d6c <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8007d7c:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8007d7e:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8007d80:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8007d82:	bc30      	pop	{r4, r5}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <RVBS_Init>:
{
 8007d88:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8007d8a:	f7ff ffdf 	bl	8007d4c <RVBS_Clear>
}
 8007d8e:	bd08      	pop	{r3, pc}

08007d90 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007d90:	8982      	ldrh	r2, [r0, #12]
 8007d92:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007d94:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007d96:	428a      	cmp	r2, r1
 8007d98:	d010      	beq.n	8007dbc <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007d9a:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8007d9e:	459c      	cmp	ip, r3
 8007da0:	d80a      	bhi.n	8007db8 <RVBS_CheckFaultState+0x28>
{
 8007da2:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8007da4:	7c04      	ldrb	r4, [r0, #16]
 8007da6:	b994      	cbnz	r4, 8007dce <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8007da8:	4299      	cmp	r1, r3
 8007daa:	d914      	bls.n	8007dd6 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8007dac:	2301      	movs	r3, #1
 8007dae:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8007db0:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8007db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db6:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8007db8:	2004      	movs	r0, #4
 8007dba:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d30c      	bcc.n	8007dda <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007dc0:	8a40      	ldrh	r0, [r0, #18]
 8007dc2:	4298      	cmp	r0, r3
 8007dc4:	bf94      	ite	ls
 8007dc6:	2000      	movls	r0, #0
 8007dc8:	2001      	movhi	r0, #1
 8007dca:	0080      	lsls	r0, r0, #2
 8007dcc:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d2ee      	bcs.n	8007db0 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8007dd6:	2002      	movs	r0, #2
 8007dd8:	e7eb      	b.n	8007db2 <RVBS_CheckFaultState+0x22>
 8007dda:	2002      	movs	r0, #2
}
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop

08007de0 <RVBS_CalcAvVbus>:
{
 8007de0:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8007de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007de6:	4299      	cmp	r1, r3
{
 8007de8:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8007dea:	d021      	beq.n	8007e30 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8007dec:	6943      	ldr	r3, [r0, #20]
 8007dee:	7e45      	ldrb	r5, [r0, #25]
 8007df0:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007df4:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8007df8:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8007dfc:	d00d      	beq.n	8007e1a <RVBS_CalcAvVbus+0x3a>
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8007e06:	3b02      	subs	r3, #2
      wtemp = 0u;
 8007e08:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8007e0a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007e0e:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8007e10:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8007e12:	d1fa      	bne.n	8007e0a <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8007e14:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8007e18:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8007e1a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007e1e:	4575      	cmp	r5, lr
        pHandle->index++;
 8007e20:	bf34      	ite	cc
 8007e22:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8007e24:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8007e26:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8007e28:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8007e2a:	bf34      	ite	cc
 8007e2c:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8007e2e:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8007e30:	4620      	mov	r0, r4
 8007e32:	f7ff ffad 	bl	8007d90 <RVBS_CheckFaultState>
 8007e36:	8120      	strh	r0, [r4, #8]
}
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	bf00      	nop

08007e3c <RUC_Init>:
  */
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS)
{
  if (MC_NULL == pHandle)
 8007e3c:	b1b0      	cbz	r0, 8007e6c <RUC_Init+0x30>
    pHandle->pVSS = pVSS;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007e3e:	6943      	ldr	r3, [r0, #20]
    pHandle->pVSS = pVSS;
 8007e40:	e9c0 1214 	strd	r1, r2, [r0, #80]	@ 0x50
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007e44:	b19b      	cbz	r3, 8007e6e <RUC_Init+0x32>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007e46:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007e48:	b1a3      	cbz	r3, 8007e74 <RUC_Init+0x38>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007e4a:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007e4c:	b1a3      	cbz	r3, 8007e78 <RUC_Init+0x3c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007e4e:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007e50:	b1a3      	cbz	r3, 8007e7c <RUC_Init+0x40>
 8007e52:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8007e54:	2205      	movs	r2, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8007e56:	b15b      	cbz	r3, 8007e70 <RUC_Init+0x34>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	2205      	movs	r2, #5
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007e5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e64:	2100      	movs	r1, #0
 8007e66:	6159      	str	r1, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 8007e68:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a

    }
  }
}
 8007e6c:	4770      	bx	lr
      bPhase++;
 8007e6e:	2201      	movs	r2, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007e70:	1e53      	subs	r3, r2, #1
 8007e72:	e7f3      	b.n	8007e5c <RUC_Init+0x20>
      bPhase++;
 8007e74:	2202      	movs	r2, #2
 8007e76:	e7fb      	b.n	8007e70 <RUC_Init+0x34>
 8007e78:	2203      	movs	r2, #3
 8007e7a:	e7f9      	b.n	8007e70 <RUC_Init+0x34>
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	e7f7      	b.n	8007e70 <RUC_Init+0x34>

08007e80 <RUC_Clear>:
  *         This parameter must be -1 or +1.
  */

__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
  if (MC_NULL == pHandle)
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d03d      	beq.n	8007f00 <RUC_Clear+0x80>
{
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8007e88:	e9d0 7814 	ldrd	r7, r8, [r0, #80]	@ 0x50
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	4604      	mov	r4, r0
    pHandle->hDirection = hMotorDirection;
 8007e90:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 8007e92:	f880 504f 	strb.w	r5, [r0, #79]	@ 0x4f

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8007e96:	4640      	mov	r0, r8

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007e98:	b28e      	uxth	r6, r1
    VSS_Clear(pVSS);
 8007e9a:	f000 f9ff 	bl	800829c <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f000 f907 	bl	80080b4 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007ea6:	8861      	ldrh	r1, [r4, #2]
 8007ea8:	fb11 f106 	smulbb	r1, r1, r6
 8007eac:	b209      	sxth	r1, r1
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f000 faaa 	bl	8008408 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, STC_GetDutyCycleRef(pSTC), 0U);
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f000 f8f9 	bl	80080ac <STC_GetDutyCycleRef>
 8007eba:	462a      	mov	r2, r5
 8007ebc:	b201      	sxth	r1, r0
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f000 f8fe 	bl	80080c0 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalPulse, (uint32_t)(pPhaseParams->hDurationms));
 8007ec4:	89a2      	ldrh	r2, [r4, #12]
 8007ec6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8007eca:	4638      	mov	r0, r7
 8007ecc:	f000 f8f8 	bl	80080c0 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms );
 8007ed0:	89e1      	ldrh	r1, [r4, #14]
 8007ed2:	89a2      	ldrh	r2, [r4, #12]
 8007ed4:	fb11 f106 	smulbb	r1, r1, r6
 8007ed8:	b209      	sxth	r1, r1
 8007eda:	4640      	mov	r0, r8
 8007edc:	f000 fa9c 	bl	8008418 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007ee2:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8007ee4:	4a07      	ldr	r2, [pc, #28]	@ (8007f04 <RUC_Clear+0x84>)

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
    pHandle->EnteredZone1 = false;
 8007ee6:	f884 504e 	strb.w	r5, [r4, #78]	@ 0x4e
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007ef4:	6962      	ldr	r2, [r4, #20]
 8007ef6:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8007ef8:	3301      	adds	r3, #1
 8007efa:	80a3      	strh	r3, [r4, #4]
  }
}
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	10624dd3 	.word	0x10624dd3

08007f08 <RUC_UpdatePulse>:
  * @brief  Update rev-up duty cycle relative to actual Vbus value to be applied
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  BusVHandle: pointer to the bus voltage sensor
  */
__weak void RUC_UpdatePulse(RevUpCtrl_Handle_t *pHandle, BusVoltageSensor_Handle_t *BusVHandle)
{
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
  if (MC_NULL == pHandle)
 8007f0c:	b138      	cbz	r0, 8007f1e <RUC_UpdatePulse+0x16>
  {
    /* Nothing to do */
  }
  else
  {
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
 8007f0e:	4608      	mov	r0, r1
                                  / VBS_GetAvBusVoltage_V(BusVHandle);
 8007f10:	f7fe fcd4 	bl	80068bc <VBS_GetAvBusVoltage_V>
 8007f14:	2378      	movs	r3, #120	@ 0x78
 8007f16:	fbb3 f3f0 	udiv	r3, r3, r0
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
 8007f1a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
    pHandle->PulseUpdateFactor = tPulseUpdateFactor;						
  }
}
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <RUC_Exec>:
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
  bool retVal = true;

  if (MC_NULL == pHandle)
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d038      	beq.n	8007f96 <RUC_Exec+0x76>
  {
    retVal = false;
  }
  else
  {
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007f24:	8883      	ldrh	r3, [r0, #4]
{
 8007f26:	b510      	push	{r4, lr}
 8007f28:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007f2a:	b12b      	cbz	r3, 8007f38 <RUC_Exec+0x18>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	8083      	strh	r3, [r0, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 8007f32:	b10b      	cbz	r3, 8007f38 <RUC_Exec+0x18>
  bool retVal = true;
 8007f34:	2001      	movs	r0, #1
        retVal = false;
      }
    }
  }
  return (retVal);
}
 8007f36:	bd10      	pop	{r4, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	b353      	cbz	r3, 8007f92 <RUC_Exec+0x72>
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10;
 8007f3c:	8899      	ldrh	r1, [r3, #4]
 8007f3e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
 8007f42:	4a16      	ldr	r2, [pc, #88]	@ (8007f9c <RUC_Exec+0x7c>)
 8007f44:	fb00 f101 	mul.w	r1, r0, r1
 8007f48:	fba2 2101 	umull	r2, r1, r2, r1
        (void)STC_ExecRamp(pHandle->pSTC, hPulse,
 8007f4c:	f341 01cf 	sbfx	r1, r1, #3, #16
 8007f50:	881a      	ldrh	r2, [r3, #0]
 8007f52:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8007f54:	f000 f8b4 	bl	80080c0 <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	88e0      	ldrh	r0, [r4, #6]
 8007f5c:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007f5e:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f60:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007f64:	b209      	sxth	r1, r1
 8007f66:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8007f68:	f000 fa56 	bl	8008418 <VSS_SetMecAcceleration>
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007f6c:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007f6e:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007f70:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007f72:	4a0b      	ldr	r2, [pc, #44]	@ (8007fa0 <RUC_Exec+0x80>)
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007f74:	6889      	ldr	r1, [r1, #8]
 8007f76:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007f78:	fb00 f303 	mul.w	r3, r0, r3
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
        pHandle->bStageCnt++;
 8007f80:	f894 204f 	ldrb.w	r2, [r4, #79]	@ 0x4f
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007f84:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8007f86:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8007f88:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8007f8a:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8007f8c:	f884 204f 	strb.w	r2, [r4, #79]	@ 0x4f
 8007f90:	e7d0      	b.n	8007f34 <RUC_Exec+0x14>
    retVal = false;
 8007f92:	2000      	movs	r0, #0
}
 8007f94:	bd10      	pop	{r4, pc}
    retVal = false;
 8007f96:	2000      	movs	r0, #0
}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	10624dd3 	.word	0x10624dd3

08007fa4 <RUC_IsAlignStageNow>:
  */
uint8_t RUC_IsAlignStageNow(RevUpCtrl_Handle_t *pHandle)
{
  uint8_t align_flag = 0;

  if (MC_NULL == pHandle)
 8007fa4:	b150      	cbz	r0, 8007fbc <RUC_IsAlignStageNow+0x18>
    hRetVal = pHandle->ParamsData[bPhase].hFinalMecSpeedUnit;
 8007fa6:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 8007faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007fae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  }
  else
  {
    int16_t speed;
    speed = RUC_GetPhaseFinalMecSpeed01Hz(pHandle, pHandle->bStageCnt);
    if (0 == speed)
 8007fb2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8007fb6:	fab0 f080 	clz	r0, r0
 8007fba:	0940      	lsrs	r0, r0, #5
    {
      align_flag = 1;
    }
  }
  return (align_flag);
}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle)
{
  bool retVal = false;

  if (MC_NULL == pHandle)
 8007fc0:	b138      	cbz	r0, 8007fd2 <RUC_FirstAccelerationStageReached+0x12>
  {
    /* Nothing to do */
  }
  else
  {
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8007fc2:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 8007fc6:	f890 004b 	ldrb.w	r0, [r0, #75]	@ 0x4b
 8007fca:	4283      	cmp	r3, r0
 8007fcc:	bf34      	ite	cc
 8007fce:	2000      	movcc	r0, #0
 8007fd0:	2001      	movcs	r0, #1
    {
      retVal = true;
    }
  }
  return (retVal);
}
 8007fd2:	4770      	bx	lr

08007fd4 <RUC_SetPhase>:
  */
__weak bool RUC_SetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
  bool retValue = true;

  if ((MC_NULL == pHandle) || (MC_NULL == phaseData))
 8007fd4:	b180      	cbz	r0, 8007ff8 <RUC_SetPhase+0x24>
 8007fd6:	b172      	cbz	r2, 8007ff6 <RUC_SetPhase+0x22>
  {
    retValue = false;
  }
  else
  {
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8007fd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007fdc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007fe0:	f8b2 c004 	ldrh.w	ip, [r2, #4]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8007fe4:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8007fe8:	8813      	ldrh	r3, [r2, #0]
 8007fea:	8183      	strh	r3, [r0, #12]
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8007fec:	f8a0 c010 	strh.w	ip, [r0, #16]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8007ff0:	81c1      	strh	r1, [r0, #14]
  bool retValue = true;
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	4770      	bx	lr
    retValue = false;
 8007ff6:	4610      	mov	r0, r2
  }
  return (retValue);
}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <RUC_GetPhase>:
  */
__weak bool RUC_GetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
  bool retValue = true;

  if ((MC_NULL == pHandle) || (MC_NULL == phaseData))
 8007ffc:	b1a0      	cbz	r0, 8008028 <RUC_GetPhase+0x2c>
 8007ffe:	b18a      	cbz	r2, 8008024 <RUC_GetPhase+0x28>
{
 8008000:	b500      	push	{lr}
  {
    retValue = false;
  }
  else
  {
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8008002:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008006:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  bool retValue = true;
 800800a:	2001      	movs	r0, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 800800c:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8008010:	f9b1 c00e 	ldrsh.w	ip, [r1, #14]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	8013      	strh	r3, [r2, #0]
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8008018:	f8a2 e004 	strh.w	lr, [r2, #4]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800801c:	f8a2 c002 	strh.w	ip, [r2, #2]
  }
  return (retValue);
}
 8008020:	f85d fb04 	ldr.w	pc, [sp], #4
    retValue = false;
 8008024:	4610      	mov	r0, r2
 8008026:	4770      	bx	lr
}
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop

0800802c <RUC_GetDirection>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Returns direction of the motor.
  */
__weak int16_t RUC_GetDirection(RevUpCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : (int16_t)pHandle->hDirection);
 800802c:	b108      	cbz	r0, 8008032 <RUC_GetDirection+0x6>
 800802e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
}
 8008032:	4770      	bx	lr

08008034 <STC_Init>:
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  if (MC_NULL == pHandle)
 8008034:	b190      	cbz	r0, 800805c <STC_Init+0x28>
{
 8008036:	b430      	push	{r4, r5}
  else
  {
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008038:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	@ 0x2a
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 800803c:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
    pHandle->Mode = pHandle->ModeDefault;
 800803e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8008042:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008044:	042d      	lsls	r5, r5, #16
    pHandle->TargetFinal = 0;
 8008046:	2300      	movs	r3, #0
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 8008048:	0424      	lsls	r4, r4, #16
 800804a:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->PISpeed = pPI;
 800804e:	6101      	str	r1, [r0, #16]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
  }
}
 8008050:	bc30      	pop	{r4, r5}
    pHandle->SPD = SPD_Handle;
 8008052:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 8008054:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8008056:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008058:	6183      	str	r3, [r0, #24]
}
 800805a:	4770      	bx	lr
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  if (MC_NULL == pHandle)
 8008060:	b100      	cbz	r0, 8008064 <STC_SetSpeedSensor+0x4>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 8008062:	6141      	str	r1, [r0, #20]
  }
}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 8008068:	b100      	cbz	r0, 800806c <STC_GetSpeedSensor+0x4>
 800806a:	6940      	ldr	r0, [r0, #20]
}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if (MC_NULL == pHandle)
 8008070:	b140      	cbz	r0, 8008084 <STC_Clear+0x14>
{
 8008072:	b510      	push	{r4, lr}
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008074:	7803      	ldrb	r3, [r0, #0]
 8008076:	2b03      	cmp	r3, #3
 8008078:	4604      	mov	r4, r0
 800807a:	d004      	beq.n	8008086 <STC_Clear+0x16>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 800807c:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	60a3      	str	r3, [r4, #8]
  }
}
 8008082:	bd10      	pop	{r4, pc}
 8008084:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008086:	6900      	ldr	r0, [r0, #16]
 8008088:	2100      	movs	r1, #0
 800808a:	f7ff fac5 	bl	8007618 <PID_SetIntegralTerm>
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 800808e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	60a3      	str	r3, [r4, #8]
}
 8008094:	bd10      	pop	{r4, pc}
 8008096:	bf00      	nop

08008098 <STC_GetMecSpeedRefUnit>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 8008098:	b130      	cbz	r0, 80080a8 <STC_GetMecSpeedRefUnit+0x10>
 800809a:	6840      	ldr	r0, [r0, #4]
 800809c:	2800      	cmp	r0, #0
 800809e:	bfbc      	itt	lt
 80080a0:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80080a4:	30ff      	addlt	r0, #255	@ 0xff
 80080a6:	1400      	asrs	r0, r0, #16
#endif
}
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop

080080ac <STC_GetDutyCycleRef>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 80080ac:	b100      	cbz	r0, 80080b0 <STC_GetDutyCycleRef+0x4>
 80080ae:	8940      	ldrh	r0, [r0, #10]
#endif
}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <STC_SetControlMode>:
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
  if (MC_NULL == pHandle)
 80080b4:	b110      	cbz	r0, 80080bc <STC_SetControlMode+0x8>
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80080b6:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80080b8:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80080ba:	60c3      	str	r3, [r0, #12]
  }
}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <STC_ExecRamp>:
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
  bool allowedRange = true;

  if (MC_NULL == pHandle)
 80080c0:	b350      	cbz	r0, 8008118 <STC_ExecRamp+0x58>
{
 80080c2:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80080c4:	7803      	ldrb	r3, [r0, #0]
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	460d      	mov	r5, r1
 80080ca:	4616      	mov	r6, r2
 80080cc:	4604      	mov	r4, r0
 80080ce:	d025      	beq.n	800811c <STC_ExecRamp+0x5c>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80080d0:	6840      	ldr	r0, [r0, #4]
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80080d2:	8be3      	ldrh	r3, [r4, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80080d4:	2800      	cmp	r0, #0
 80080d6:	bfbc      	itt	lt
 80080d8:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80080dc:	30ff      	addlt	r0, #255	@ 0xff
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80080de:	428b      	cmp	r3, r1
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80080e0:	ea4f 4020 	mov.w	r0, r0, asr #16
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80080e4:	da01      	bge.n	80080ea <STC_ExecRamp+0x2a>
    allowedRange = false;
 80080e6:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
      }
    }
  }
  return (allowedRange);
}
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80080ea:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 80080ee:	428b      	cmp	r3, r1
 80080f0:	dcf9      	bgt.n	80080e6 <STC_ExecRamp+0x26>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80080f2:	8c23      	ldrh	r3, [r4, #32]
 80080f4:	428b      	cmp	r3, r1
 80080f6:	dd03      	ble.n	8008100 <STC_ExecRamp+0x40>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80080f8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 80080fc:	428b      	cmp	r3, r1
 80080fe:	dbf2      	blt.n	80080e6 <STC_ExecRamp+0x26>
      if (0U == hDurationms)
 8008100:	b99e      	cbnz	r6, 800812a <STC_ExecRamp+0x6a>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008102:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008104:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008106:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008108:	bf0c      	ite	eq
 800810a:	6065      	streq	r5, [r4, #4]
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 800810c:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 800810e:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8008110:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8008112:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8008114:	2001      	movs	r0, #1
}
 8008116:	bd70      	pop	{r4, r5, r6, pc}
    allowedRange = false;
 8008118:	2000      	movs	r0, #0
}
 800811a:	4770      	bx	lr
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 800811c:	f7ff ffc6 	bl	80080ac <STC_GetDutyCycleRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 8008120:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008122:	42ab      	cmp	r3, r5
 8008124:	dbdf      	blt.n	80080e6 <STC_ExecRamp+0x26>
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 8008126:	b200      	sxth	r0, r0
 8008128:	e7ea      	b.n	8008100 <STC_ExecRamp+0x40>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800812a:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 800812c:	4a06      	ldr	r2, [pc, #24]	@ (8008148 <STC_ExecRamp+0x88>)
        pHandle->TargetFinal = hTargetFinal;
 800812e:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008130:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8008134:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008138:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 800813a:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800813c:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800813e:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008140:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 8008144:	e7e4      	b.n	8008110 <STC_ExecRamp+0x50>
 8008146:	bf00      	nop
 8008148:	10624dd3 	.word	0x10624dd3

0800814c <STC_StopRamp>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 800814c:	b110      	cbz	r0, 8008154 <STC_StopRamp+0x8>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008152:	6183      	str	r3, [r0, #24]
  }
}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop

08008158 <STC_CalcSpeedReference>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t motor dutycycle reference. This value represents actually the
  *         dutycycle expressed in digit.
  */
__weak uint16_t STC_CalcSpeedReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008158:	b570      	push	{r4, r5, r6, lr}
  uint16_t hDutyCycleReference;

  if (MC_NULL == pHandle)
 800815a:	4604      	mov	r4, r0
 800815c:	b190      	cbz	r0, 8008184 <STC_CalcSpeedReference+0x2c>
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800815e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8008160:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008162:	2a04      	cmp	r2, #4
 8008164:	d00f      	beq.n	8008186 <STC_CalcSpeedReference+0x2e>
    if (pHandle->RampRemainingStep > 1U)
 8008166:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8008168:	6846      	ldr	r6, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800816a:	d918      	bls.n	800819e <STC_CalcSpeedReference+0x46>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800816c:	6981      	ldr	r1, [r0, #24]
 800816e:	440e      	add	r6, r1

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008170:	3b01      	subs	r3, #1
      /* Compute speed error */
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008172:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 8008174:	60c3      	str	r3, [r0, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008176:	4630      	mov	r0, r6
 8008178:	db15      	blt.n	80081a6 <STC_CalcSpeedReference+0x4e>
 800817a:	1403      	asrs	r3, r0, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 800817c:	2a03      	cmp	r2, #3
 800817e:	d01e      	beq.n	80081be <STC_CalcSpeedReference+0x66>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
    }
    else
    {
      pHandle->DutyCycleRef = wCurrentReference;
 8008180:	60a6      	str	r6, [r4, #8]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hDutyCycleReference = (int16_t)(wCurrentReference >> 16);
#else
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 8008182:	b298      	uxth	r0, r3
#endif
    }
  }
  return (hDutyCycleReference);
}
 8008184:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->RampRemainingStep > 1U)
 8008186:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->DutyCycleRef;
 8008188:	6886      	ldr	r6, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800818a:	d910      	bls.n	80081ae <STC_CalcSpeedReference+0x56>
      wCurrentReference += pHandle->IncDecAmount;
 800818c:	6982      	ldr	r2, [r0, #24]
 800818e:	4416      	add	r6, r2
      pHandle->RampRemainingStep--;
 8008190:	3b01      	subs	r3, #1
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008192:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 8008194:	60c3      	str	r3, [r0, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008196:	4630      	mov	r0, r6
 8008198:	db0d      	blt.n	80081b6 <STC_CalcSpeedReference+0x5e>
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 800819a:	1403      	asrs	r3, r0, #16
 800819c:	e7f0      	b.n	8008180 <STC_CalcSpeedReference+0x28>
    else if (1U == pHandle->RampRemainingStep)
 800819e:	d021      	beq.n	80081e4 <STC_CalcSpeedReference+0x8c>
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80081a0:	2e00      	cmp	r6, #0
 80081a2:	4630      	mov	r0, r6
 80081a4:	dae9      	bge.n	800817a <STC_CalcSpeedReference+0x22>
 80081a6:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 80081aa:	30ff      	adds	r0, #255	@ 0xff
 80081ac:	e7e5      	b.n	800817a <STC_CalcSpeedReference+0x22>
    else if (1U == pHandle->RampRemainingStep)
 80081ae:	d01f      	beq.n	80081f0 <STC_CalcSpeedReference+0x98>
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	4630      	mov	r0, r6
 80081b4:	daf1      	bge.n	800819a <STC_CalcSpeedReference+0x42>
 80081b6:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 80081ba:	30ff      	adds	r0, #255	@ 0xff
 80081bc:	e7ed      	b.n	800819a <STC_CalcSpeedReference+0x42>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80081be:	6960      	ldr	r0, [r4, #20]
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 80081c0:	b29d      	uxth	r5, r3
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80081c2:	f000 f82d 	bl	8008220 <SPD_GetAvrgMecSpeedUnit>
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 80081c6:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
      else hError = hTargetSpeed - hMeasuredSpeed;
 80081ca:	bfcd      	iteet	gt
 80081cc:	1a2b      	subgt	r3, r5, r0
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 80081ce:	1b40      	suble	r0, r0, r5
 80081d0:	b201      	sxthle	r1, r0
      else hError = hTargetSpeed - hMeasuredSpeed;
 80081d2:	b219      	sxthgt	r1, r3
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80081d4:	6920      	ldr	r0, [r4, #16]
 80081d6:	f7ff fa53 	bl	8007680 <PI_Controller>
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
 80081da:	0403      	lsls	r3, r0, #16
 80081dc:	e9c4 6301 	strd	r6, r3, [r4, #4]
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80081e0:	b280      	uxth	r0, r0
}
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80081e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80081e8:	2100      	movs	r1, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80081ea:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 80081ec:	60c1      	str	r1, [r0, #12]
 80081ee:	e7c5      	b.n	800817c <STC_CalcSpeedReference+0x24>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80081f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80081f4:	2200      	movs	r2, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80081f6:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 80081f8:	60c2      	str	r2, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80081fa:	e7c1      	b.n	8008180 <STC_CalcSpeedReference+0x28>

080081fc <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. 
  *         Expressed in the unit defined by #SPEED_UNIT
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 80081fc:	b108      	cbz	r0, 8008202 <STC_GetMecSpeedRefUnitDefault+0x6>
 80081fe:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
}
 8008202:	4770      	bx	lr

08008204 <STC_ForceSpeedReferenceToCurrentSpeed>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 8008204:	b138      	cbz	r0, 8008216 <STC_ForceSpeedReferenceToCurrentSpeed+0x12>
{
 8008206:	b510      	push	{r4, lr}
 8008208:	4604      	mov	r4, r0
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800820a:	6940      	ldr	r0, [r0, #20]
 800820c:	f000 f808 	bl	8008220 <SPD_GetAvrgMecSpeedUnit>
 8008210:	0400      	lsls	r0, r0, #16
 8008212:	6060      	str	r0, [r4, #4]
  }
}
 8008214:	bd10      	pop	{r4, pc}
 8008216:	4770      	bx	lr

08008218 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8008218:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008220:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 8008228:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop

08008230 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008230:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8008234:	4603      	mov	r3, r0
 8008236:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8008238:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800823c:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8008240:	bfb8      	it	lt
 8008242:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008244:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008248:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800824a:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800824c:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800824e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 8008252:	bfb8      	it	lt
 8008254:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008256:	458e      	cmp	lr, r1
 8008258:	d816      	bhi.n	8008288 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800825a:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 800825e:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8008262:	bfb8      	it	lt
 8008264:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008268:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800826c:	bfb8      	it	lt
 800826e:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008272:	45f4      	cmp	ip, lr
 8008274:	d308      	bcc.n	8008288 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8008276:	428c      	cmp	r4, r1
 8008278:	d306      	bcc.n	8008288 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800827a:	4290      	cmp	r0, r2
 800827c:	d809      	bhi.n	8008292 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800827e:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008280:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8008282:	bf18      	it	ne
 8008284:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008286:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008288:	4290      	cmp	r0, r2
 800828a:	d9f8      	bls.n	800827e <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800828c:	3201      	adds	r2, #1
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	e7f5      	b.n	800827e <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8008292:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008294:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8008296:	2001      	movs	r0, #1
}
 8008298:	bd10      	pop	{r4, pc}
 800829a:	bf00      	nop

0800829c <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800829c:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800829e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80082a0:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 80082a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 80082a6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80082a8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80082aa:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 80082ac:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 80082ae:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80082b0:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 80082b2:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <VSS_Init>:
{
 80082b8:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80082ba:	f7ff ffef 	bl	800829c <VSS_Clear>
}
 80082be:	bd08      	pop	{r3, pc}

080082c0 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 80082c0:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 80082c4:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 80082c6:	b11a      	cbz	r2, 80082d0 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 80082c8:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 80082cc:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 80082ce:	4770      	bx	lr
{
 80082d0:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80082d2:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80082d6:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80082d8:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80082da:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80082de:	785a      	ldrb	r2, [r3, #1]
 80082e0:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80082e4:	4460      	add	r0, ip
 80082e6:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80082ea:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80082ec:	b200      	sxth	r0, r0
 80082ee:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80082f0:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80082f2:	b1fc      	cbz	r4, 8008334 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 80082f4:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80082f8:	b1f2      	cbz	r2, 8008338 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 80082fa:	3a01      	subs	r2, #1
 80082fc:	b212      	sxth	r2, r2
 80082fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008300:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008304:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008306:	db26      	blt.n	8008356 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008308:	eba1 0e0e 	sub.w	lr, r1, lr
 800830c:	fa0f fe8e 	sxth.w	lr, lr
 8008310:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8008312:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008316:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800831a:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800831e:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8008322:	fb12 f205 	smulbb	r2, r2, r5
 8008326:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 8008328:	db0e      	blt.n	8008348 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800832a:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800832c:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800832e:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008332:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8008334:	8098      	strh	r0, [r3, #4]
}
 8008336:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8008338:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800833c:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800833e:	2401      	movs	r4, #1
 8008340:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8008344:	8098      	strh	r0, [r3, #4]
}
 8008346:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8008348:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800834c:	2c00      	cmp	r4, #0
 800834e:	d0f1      	beq.n	8008334 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8008350:	440a      	add	r2, r1
 8008352:	b210      	sxth	r0, r2
 8008354:	e7ee      	b.n	8008334 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8008356:	ebae 0e01 	sub.w	lr, lr, r1
 800835a:	fa0f fe8e 	sxth.w	lr, lr
 800835e:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8008362:	e7d6      	b.n	8008312 <VSS_CalcElAngle+0x52>

08008364 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8008364:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8008366:	2a01      	cmp	r2, #1
{
 8008368:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800836a:	d922      	bls.n	80083b2 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800836c:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800836e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8008370:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008372:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008374:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8008376:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800837a:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800837c:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800837e:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008382:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8008384:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008388:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800838c:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008390:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008392:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8008396:	b212      	sxth	r2, r2
 8008398:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800839a:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800839c:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800839e:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80083a0:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 80083a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 80083a6:	b970      	cbnz	r0, 80083c6 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80083a8:	78da      	ldrb	r2, [r3, #3]
 80083aa:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80083ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b0:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 80083b2:	d00d      	beq.n	80083d0 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80083b4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 80083b8:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80083bc:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 80083be:	bb00      	cbnz	r0, 8008402 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80083c0:	78da      	ldrb	r2, [r3, #3]
 80083c2:	701a      	strb	r2, [r3, #0]
}
 80083c4:	4770      	bx	lr
 80083c6:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff bf30 	b.w	8008230 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80083d0:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 80083d4:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80083d8:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80083da:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80083dc:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80083e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80083e4:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80083e6:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80083ea:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80083ee:	785a      	ldrb	r2, [r3, #1]
 80083f0:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 80083f4:	2000      	movs	r0, #0
 80083f6:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 80083f8:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80083fc:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0de      	beq.n	80083c0 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff bf14 	b.w	8008230 <SPD_IsMecSpeedReliable>

08008408 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008408:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800840a:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800840c:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8008410:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008412:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop

08008418 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8008418:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800841c:	b9a3      	cbnz	r3, 8008448 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800841e:	8b43      	ldrh	r3, [r0, #26]
{
 8008420:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008422:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008424:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800842c:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008430:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8008432:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 8008436:	b942      	cbnz	r2, 800844a <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008438:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800843c:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800843e:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8008442:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008444:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008446:	bd10      	pop	{r4, pc}
 8008448:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800844a:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800844c:	fb02 f303 	mul.w	r3, r2, r3
 8008450:	4a0e      	ldr	r2, [pc, #56]	@ (800848c <VSS_SetMecAcceleration+0x74>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800845a:	3301      	adds	r3, #1
 800845c:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800845e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 8008462:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 8008464:	b91b      	cbnz	r3, 800846e <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008466:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008468:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800846a:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800846c:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800846e:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008472:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8008476:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800847a:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800847c:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8008480:	fb0e f303 	mul.w	r3, lr, r3
 8008484:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008486:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008488:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800848a:	e7ef      	b.n	800846c <VSS_SetMecAcceleration+0x54>
 800848c:	10624dd3 	.word	0x10624dd3

08008490 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8008490:	b151      	cbz	r1, 80084a8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8008492:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8008496:	2201      	movs	r2, #1
 8008498:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800849c:	b923      	cbnz	r3, 80084a8 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800849e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80084a2:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80084a4:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80084a6:	4770      	bx	lr
  bool bAux = true;
 80084a8:	2001      	movs	r0, #1
 80084aa:	4770      	bx	lr

080084ac <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 80084ac:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop

080084b4 <memset>:
 80084b4:	4402      	add	r2, r0
 80084b6:	4603      	mov	r3, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	@ (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 f826 	bl	8008528 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	080088a0 	.word	0x080088a0
 8008500:	080088a0 	.word	0x080088a0
 8008504:	080088a0 	.word	0x080088a0
 8008508:	080088a4 	.word	0x080088a4

0800850c <memcpy>:
 800850c:	440a      	add	r2, r1
 800850e:	4291      	cmp	r1, r2
 8008510:	f100 33ff 	add.w	r3, r0, #4294967295
 8008514:	d100      	bne.n	8008518 <memcpy+0xc>
 8008516:	4770      	bx	lr
 8008518:	b510      	push	{r4, lr}
 800851a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008522:	4291      	cmp	r1, r2
 8008524:	d1f9      	bne.n	800851a <memcpy+0xe>
 8008526:	bd10      	pop	{r4, pc}

08008528 <_init>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr

08008534 <_fini>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr
